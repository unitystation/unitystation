{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to unitystation. An open source effort to clone the /TG/station branch to unity. As this project is in its early stages, this wiki will serve the purpose of providing a foundation and a almost (not) up-to-date scripting reference to the underlying structure of unitystation.","title":"Introduction"},{"location":"#introduction","text":"Welcome to unitystation. An open source effort to clone the /TG/station branch to unity. As this project is in its early stages, this wiki will serve the purpose of providing a foundation and a almost (not) up-to-date scripting reference to the underlying structure of unitystation.","title":"Introduction"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct \u00b6 Introduction \u00b6 This code of conduct outlines our expectations for participants within the UnityStation community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community. Our open source community strives to: Be friendly and patient. Be welcoming : We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability. Be considerate : Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language. Be respectful : Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It's important to remember that a community where people feel uncomfortable or threatened is not a productive one. Be careful in the words that we choose : we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable. Try to understand why we disagree : Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we're different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn't mean that they're wrong. Don't forget that it is human to err and blaming each other doesn't get us anywhere. Instead, focus on helping t resolve issues and learning from mistakes. Definitions \u00b6 Harassment includes, but is not limited to: Offensive comments related to gender, gender identity and expression, sexual orientation, disability, mental illness, neuro(a)typicality, physical appearance, body size, race, age, regional discrimination, political or religious affiliation Repeated unwelcome comments regarding a person's lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment Deliberate misnaming. This includes deadnaming or persistently using a pronoun that does not correctly reflect a person's gender identity for malicious purposes. You must address people by the name they give you when not addressing them by their username or handle Threats of violence, both physical and psychological Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm Deliberate intimidation Stalking this includes following, tracking, recording, logging, (repeat)messaging and contact requests on other media/real-life, as long as there is a reasonable expectation that this person may not appreciate this. Sustained disruption of discussion Unwelcome sexual attention, including gratuitous or off-topic sexual images or behaviour Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others Deliberate \"outing\" of any aspect of a person's identity without their consent except as necessary to protect others from intentional abuse Publication of private communication without consent or approval from a moderator on the platform used. Our open source community prioritizes open communications and marginalized people's safety over privileged people's comfort. We will not act on complaints regarding: Reasonable communication of boundaries, such as \"leave me alone,\" \"go away,\" or \"I'm not discussing this with you\" Communicating in a 'tone' you don't find congenial Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we will fail at times, we seek to treat everyone both as fairly and equally as possible. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u2014or have any other concerns\u2014please report it contacting one of the community moderators, preferable of the platform involved. All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative will contact you personally, review the incident, follow up with any additional questions, and make a decision as to how to respond. All communication, including the complaint(s), response(s) and decision(s) are confidential and will only be shared at the discretion of a community moderator. If the person who is harassing you is part of the response team, they will recuse themselves from handling your incident. If the complaint originates from a member of the response team, it will be handled by a different member of the response team. We will respect confidentiality requests for the purpose of protecting victims of abuse.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#introduction","text":"This code of conduct outlines our expectations for participants within the UnityStation community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community. Our open source community strives to: Be friendly and patient. Be welcoming : We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability. Be considerate : Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language. Be respectful : Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It's important to remember that a community where people feel uncomfortable or threatened is not a productive one. Be careful in the words that we choose : we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable. Try to understand why we disagree : Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we're different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn't mean that they're wrong. Don't forget that it is human to err and blaming each other doesn't get us anywhere. Instead, focus on helping t resolve issues and learning from mistakes.","title":"Introduction"},{"location":"CODE_OF_CONDUCT/#definitions","text":"Harassment includes, but is not limited to: Offensive comments related to gender, gender identity and expression, sexual orientation, disability, mental illness, neuro(a)typicality, physical appearance, body size, race, age, regional discrimination, political or religious affiliation Repeated unwelcome comments regarding a person's lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment Deliberate misnaming. This includes deadnaming or persistently using a pronoun that does not correctly reflect a person's gender identity for malicious purposes. You must address people by the name they give you when not addressing them by their username or handle Threats of violence, both physical and psychological Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm Deliberate intimidation Stalking this includes following, tracking, recording, logging, (repeat)messaging and contact requests on other media/real-life, as long as there is a reasonable expectation that this person may not appreciate this. Sustained disruption of discussion Unwelcome sexual attention, including gratuitous or off-topic sexual images or behaviour Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others Deliberate \"outing\" of any aspect of a person's identity without their consent except as necessary to protect others from intentional abuse Publication of private communication without consent or approval from a moderator on the platform used. Our open source community prioritizes open communications and marginalized people's safety over privileged people's comfort. We will not act on complaints regarding: Reasonable communication of boundaries, such as \"leave me alone,\" \"go away,\" or \"I'm not discussing this with you\" Communicating in a 'tone' you don't find congenial Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we will fail at times, we seek to treat everyone both as fairly and equally as possible. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Definitions"},{"location":"CODE_OF_CONDUCT/#reporting-issues","text":"If you experience or witness unacceptable behavior\u2014or have any other concerns\u2014please report it contacting one of the community moderators, preferable of the platform involved. All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative will contact you personally, review the incident, follow up with any additional questions, and make a decision as to how to respond. All communication, including the complaint(s), response(s) and decision(s) are confidential and will only be shared at the discretion of a community moderator. If the person who is harassing you is part of the response team, they will recuse themselves from handling your incident. If the complaint originates from a member of the response team, it will be handled by a different member of the response team. We will respect confidentiality requests for the purpose of protecting victims of abuse.","title":"Reporting Issues"},{"location":"CONTRIBUTING/","text":"Contribution and Review Guidelines \u00b6 GIT Guidelines \u00b6 New to GIT \u00b6 If you have never used git before, you can look up our general reference on our wiki. Git and You \u00b6 GIT is a fantastic system, but while using it we have a few guidelines to keep it fantastic for everyone. Submit complete PR's. Mark your PR as a draft if you do not want it merged yet. Always try and fill in the whole form, even for small PR's. Don't close when a reviewer requests changes (just push the changes). Explain what you did in your PR. Be thorough, A door is not the same as a shutter. If you can add screenshots to clarify. Always try to add \"Fixes #000\" (where 000 is the Issue your PR fixes) Found something you want to fix yourself? Please do make an issue too. Structure Guidelines \u00b6 Naming scheme \u00b6 File and folder names are important and making mistakes in them may give conflicts an/or annoyance in the future. Remember, your garbage needs to be cleaned by someone sometime in the future! For that reason, we have a few guidelines in regards to naming files and folder. Always start folders with a Capital. After every _ comes another Capital Inclusion of files and folders \u00b6 Although GIT is quite friendly in what it accepts in terms of files and folder changes in a commit, a reviewer's or bugfixer's time is not unlimited. For that reason, we have a few specific guidelines in regards to the inclusion of files and folders in your PR. Only include files you actually changed. Never include .Scene files unless you know you changed them. Try not to include multiple changes in one PR Want to change the formatting of multiple files too? Make a separate PR. Code Guidelines \u00b6 Your code, your style, my review \u00b6 Here at UnityStation, we value people having their own style. But your code needs to be reviewable and editable by others too. For that reason, we have a few basic coding guidelines Always explain regex in a comment within your code. Write simple code and don't try to impress. We will run (Basic) automated reformating of code once in a while. Document your changes in your code and if need be, on the wiki. Add a description for every new class you create Bounty Guidelines \u00b6 We all know your bounty program is awesome. But we need to be clear about it. Bounty's are not a right, they are a favor You yourself are responsible for any tax or legal issues regarding the bounties Any fees required for payment of said bounty, will be paid from the bounty Promoted bounties before payment of fees. We will only use PayPal It's your responsibility to verify you can receive payments via PayPal Code needs to be fully reviewed, tested and merged before the bounty will be paid The bounty may be split over multiple contributors on request or moderator discretion Your code is considered licensed under AGPLv3 the moment you have published the code Review Guidelines \u00b6 Even us review gods need some guidelines once in a while. Let people learn from their mistakes Review instead of merging without comments Abide by these guidelines in your review Todo vs Feature vs bug: \u00b6 Please take note of the difference between a TODO and Feature Bug: An unexpected behavior of the game and/or server. Including, but not limited to, errors and warnings. Todo: When you come across something that needs tweaking/adding during development, is not an unexpected behavior Feature: When you, out of personal preference, want something added or changed. That's it! \u00b6 Someone will come along and review the changes. If everything looks good then they will merge it with the main repo. If you need any help don't be afraid to ask in the discord channel: https://discord.gg/tFcTpBp","title":"Contribution and Review Guidelines"},{"location":"CONTRIBUTING/#contribution-and-review-guidelines","text":"","title":"Contribution and Review Guidelines"},{"location":"CONTRIBUTING/#git-guidelines","text":"","title":"GIT Guidelines"},{"location":"CONTRIBUTING/#new-to-git","text":"If you have never used git before, you can look up our general reference on our wiki.","title":"New to GIT"},{"location":"CONTRIBUTING/#git-and-you","text":"GIT is a fantastic system, but while using it we have a few guidelines to keep it fantastic for everyone. Submit complete PR's. Mark your PR as a draft if you do not want it merged yet. Always try and fill in the whole form, even for small PR's. Don't close when a reviewer requests changes (just push the changes). Explain what you did in your PR. Be thorough, A door is not the same as a shutter. If you can add screenshots to clarify. Always try to add \"Fixes #000\" (where 000 is the Issue your PR fixes) Found something you want to fix yourself? Please do make an issue too.","title":"Git and You"},{"location":"CONTRIBUTING/#structure-guidelines","text":"","title":"Structure Guidelines"},{"location":"CONTRIBUTING/#naming-scheme","text":"File and folder names are important and making mistakes in them may give conflicts an/or annoyance in the future. Remember, your garbage needs to be cleaned by someone sometime in the future! For that reason, we have a few guidelines in regards to naming files and folder. Always start folders with a Capital. After every _ comes another Capital","title":"Naming scheme"},{"location":"CONTRIBUTING/#inclusion-of-files-and-folders","text":"Although GIT is quite friendly in what it accepts in terms of files and folder changes in a commit, a reviewer's or bugfixer's time is not unlimited. For that reason, we have a few specific guidelines in regards to the inclusion of files and folders in your PR. Only include files you actually changed. Never include .Scene files unless you know you changed them. Try not to include multiple changes in one PR Want to change the formatting of multiple files too? Make a separate PR.","title":"Inclusion of files and folders"},{"location":"CONTRIBUTING/#code-guidelines","text":"","title":"Code Guidelines"},{"location":"CONTRIBUTING/#your-code-your-style-my-review","text":"Here at UnityStation, we value people having their own style. But your code needs to be reviewable and editable by others too. For that reason, we have a few basic coding guidelines Always explain regex in a comment within your code. Write simple code and don't try to impress. We will run (Basic) automated reformating of code once in a while. Document your changes in your code and if need be, on the wiki. Add a description for every new class you create","title":"Your code, your style, my review"},{"location":"CONTRIBUTING/#bounty-guidelines","text":"We all know your bounty program is awesome. But we need to be clear about it. Bounty's are not a right, they are a favor You yourself are responsible for any tax or legal issues regarding the bounties Any fees required for payment of said bounty, will be paid from the bounty Promoted bounties before payment of fees. We will only use PayPal It's your responsibility to verify you can receive payments via PayPal Code needs to be fully reviewed, tested and merged before the bounty will be paid The bounty may be split over multiple contributors on request or moderator discretion Your code is considered licensed under AGPLv3 the moment you have published the code","title":"Bounty Guidelines"},{"location":"CONTRIBUTING/#review-guidelines","text":"Even us review gods need some guidelines once in a while. Let people learn from their mistakes Review instead of merging without comments Abide by these guidelines in your review","title":"Review Guidelines"},{"location":"CONTRIBUTING/#todo-vs-feature-vs-bug","text":"Please take note of the difference between a TODO and Feature Bug: An unexpected behavior of the game and/or server. Including, but not limited to, errors and warnings. Todo: When you come across something that needs tweaking/adding during development, is not an unexpected behavior Feature: When you, out of personal preference, want something added or changed.","title":"Todo vs Feature vs bug:"},{"location":"CONTRIBUTING/#thats-it","text":"Someone will come along and review the changes. If everything looks good then they will merge it with the main repo. If you need any help don't be afraid to ask in the discord channel: https://discord.gg/tFcTpBp","title":"That's it!"},{"location":"Documentation-Guide/","text":"Documentation Guide \u00b6 This page helps to explain how to create / edit documentation. Feel free to edit and expand this! Our main docs site is here You're allowed to edit directly via github, you don't need to use PRs for docs changes. If you don't have permissions and are planning to make significant changes, ask in Discord. You can edit any page by clicking the pencil icon in the top right of a page or by making a change on the develop branch within the docs folder If you have permissions you can create pages directly in GitHub by browsing under the docs folder When you change docs, they will eventually be built and published to our docs site. Look in the #git channel for a Branch gh-pages was force-pushed message to see when they are published. For working on larger edits / pages, we recommend using VSCode or an appropriate text editor to edit these, use a Markdown plugin We use MkDocs for our docs site, which internally uses Python-Markdown for rendering. Markdown renderers often have slight variations / conventions, so if you are running into trouble with something try searching \"MkDocs (issue)\" or \"Python Markdown (issue)\" to see the \"right\" way to do something. Use 4 spaces for indentation. Make sure that the png file extension is lower case, .PNG means something different and your image will not show up Code blocks don't work like how they do on github pages. For root-level (non-indented) codeblocks you can use \"fenced code blocks\" just like you can on github. But for code blocks appearing in a list you must use indented code blocks and a special macro. See this page for an example of indented code blocks in action","title":"Documentation Guide"},{"location":"Documentation-Guide/#documentation-guide","text":"This page helps to explain how to create / edit documentation. Feel free to edit and expand this! Our main docs site is here You're allowed to edit directly via github, you don't need to use PRs for docs changes. If you don't have permissions and are planning to make significant changes, ask in Discord. You can edit any page by clicking the pencil icon in the top right of a page or by making a change on the develop branch within the docs folder If you have permissions you can create pages directly in GitHub by browsing under the docs folder When you change docs, they will eventually be built and published to our docs site. Look in the #git channel for a Branch gh-pages was force-pushed message to see when they are published. For working on larger edits / pages, we recommend using VSCode or an appropriate text editor to edit these, use a Markdown plugin We use MkDocs for our docs site, which internally uses Python-Markdown for rendering. Markdown renderers often have slight variations / conventions, so if you are running into trouble with something try searching \"MkDocs (issue)\" or \"Python Markdown (issue)\" to see the \"right\" way to do something. Use 4 spaces for indentation. Make sure that the png file extension is lower case, .PNG means something different and your image will not show up Code blocks don't work like how they do on github pages. For root-level (non-indented) codeblocks you can use \"fenced code blocks\" just like you can on github. But for code blocks appearing in a list you must use indented code blocks and a special macro. See this page for an example of indented code blocks in action","title":"Documentation Guide"},{"location":"GPLv3/","text":"Licensing \u00b6 GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Licensing"},{"location":"GPLv3/#licensing","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Licensing"},{"location":"contribution-guides/Building-And-Testing/","text":"Building and Testing \u00b6 Before you PR for UnityStation, it would be helpful if you fully test your PR, read the contribution guidelines and read the Starting Contribution article on the wiki. Below you can read our standardised multiplayer test-setup. To test network interactions, you should set up a realistic environment. That means two instances: Client and Host (Server that's client, too). You can run one instance from editor by pressing play button, but for another one you'll have to make a standalone build . You can launch the game directly into the current scene, if it is a MainStation scene, that is open. TLDR QuickBuild \u00b6 Tools > Quick Build Automatically sets build settings to get MVB (minimum viable build) by including only necessary scenes. Operates independently of the main build window. Settings are persistent and won't be picked up by git (except Quick Load which is handled externally, so be sure to not commit that change). The Disable Scenes tab is the old DisableNonEssentialScenes tool. Initial setup: Build settings \u00b6 To make a proper standalone build, you should set up build settings (only once). Go to File > Build Settings : Make sure that StartUp , Lobby , OnlineScene and all MainStation scenes possible for lowpop ( Fallstation , SquareStation ) are checked (screenshot is out of date): (If you don't see your current scene in the list, press Add Open Scenes button) If you have Quick Load checked on GameManager prefab, you can uncheck all the asteroid and additional scenes, too. Mark Development Build and Script Debugging checkboxes, that will show all Build's logs in Editor's console: Press Build And Run . First time you'll get a folder selection dialog where the build files will be stored. Create a separate folder outside of unitystation's project hierarchy. Then building will start, Unity will freeze until it's finished. When it's ready a game window will pop up. Now you can enjoy smooth framerates and drag window around, also launch several instances if required (that doesn't work for OSX). Notice how Build's logs appear in Editor's console: Next time you'll just have to press Ctrl+B / Cmd+B to Build And Run. Important note: When you change stuff/recompile you'll need to rebuild to make Editor compatible with the Build. Set up ping simulation \u00b6 To simulate network latency you need to select Network Manager in Hierarchy tab: Then find Custom Network Manager script in Inspector tab and tick Use network simulation : Set up desirable ping (200 is recommended) and save (so that you don't lose that setting next time Unity crashes)! Note that actual ping will be more than expected, 200 ping setting usually makes it 250-750 Start up \u00b6 In general it's usually like this: Build And Run, then start up game in Editor when it finishes building. Doesn't matter much who should host and who should join, but keep in mind that Build performs better. Advanced Pre-Release Test sequence \u00b6 With above testing method you can find most issues related to your code, without spending too much time building. However, before a release or when a stricter test regime is warranted, for ex. when handling sync vars and clients joining, we have an advanced test-sequence: Create 2 clients (one of which hosting) with a ping of 200. Play the game, chat a little, kill a little, drop things, open things and move things. (extra for release) Before a release, we should test all issues and PR's that are ready for quality assessment in the release project. Test the features and bugs in every one of them, with multiple clients. Join with a third 200Ping client Look if your view is the same as the other clients. if not, you have found a bug already! play for a while with all three (extra for release) Before a release, we should test all issues and PR's that are ready for quality assessment in the release project. Test the features and bugs in every one of them, with the third client. No errors or inconsistencies? great, your build just passed our Quality assessment. Happy spess testing! Testing custom maps in Multiplayer \u00b6 Make sure you are on Lobby scene Set Online scene in NetworkManager (under Managers prefab): Don't forget to include the scene you are testing in build preferences as well: And then Build and Run + fire up game in editor","title":"Building and Testing"},{"location":"contribution-guides/Building-And-Testing/#building-and-testing","text":"Before you PR for UnityStation, it would be helpful if you fully test your PR, read the contribution guidelines and read the Starting Contribution article on the wiki. Below you can read our standardised multiplayer test-setup. To test network interactions, you should set up a realistic environment. That means two instances: Client and Host (Server that's client, too). You can run one instance from editor by pressing play button, but for another one you'll have to make a standalone build . You can launch the game directly into the current scene, if it is a MainStation scene, that is open.","title":"Building and Testing"},{"location":"contribution-guides/Building-And-Testing/#tldr-quickbuild","text":"Tools > Quick Build Automatically sets build settings to get MVB (minimum viable build) by including only necessary scenes. Operates independently of the main build window. Settings are persistent and won't be picked up by git (except Quick Load which is handled externally, so be sure to not commit that change). The Disable Scenes tab is the old DisableNonEssentialScenes tool.","title":"TLDR QuickBuild"},{"location":"contribution-guides/Building-And-Testing/#initial-setup-build-settings","text":"To make a proper standalone build, you should set up build settings (only once). Go to File > Build Settings : Make sure that StartUp , Lobby , OnlineScene and all MainStation scenes possible for lowpop ( Fallstation , SquareStation ) are checked (screenshot is out of date): (If you don't see your current scene in the list, press Add Open Scenes button) If you have Quick Load checked on GameManager prefab, you can uncheck all the asteroid and additional scenes, too. Mark Development Build and Script Debugging checkboxes, that will show all Build's logs in Editor's console: Press Build And Run . First time you'll get a folder selection dialog where the build files will be stored. Create a separate folder outside of unitystation's project hierarchy. Then building will start, Unity will freeze until it's finished. When it's ready a game window will pop up. Now you can enjoy smooth framerates and drag window around, also launch several instances if required (that doesn't work for OSX). Notice how Build's logs appear in Editor's console: Next time you'll just have to press Ctrl+B / Cmd+B to Build And Run. Important note: When you change stuff/recompile you'll need to rebuild to make Editor compatible with the Build.","title":"Initial setup: Build settings"},{"location":"contribution-guides/Building-And-Testing/#set-up-ping-simulation","text":"To simulate network latency you need to select Network Manager in Hierarchy tab: Then find Custom Network Manager script in Inspector tab and tick Use network simulation : Set up desirable ping (200 is recommended) and save (so that you don't lose that setting next time Unity crashes)! Note that actual ping will be more than expected, 200 ping setting usually makes it 250-750","title":"Set up ping simulation"},{"location":"contribution-guides/Building-And-Testing/#start-up","text":"In general it's usually like this: Build And Run, then start up game in Editor when it finishes building. Doesn't matter much who should host and who should join, but keep in mind that Build performs better.","title":"Start up"},{"location":"contribution-guides/Building-And-Testing/#advanced-pre-release-test-sequence","text":"With above testing method you can find most issues related to your code, without spending too much time building. However, before a release or when a stricter test regime is warranted, for ex. when handling sync vars and clients joining, we have an advanced test-sequence: Create 2 clients (one of which hosting) with a ping of 200. Play the game, chat a little, kill a little, drop things, open things and move things. (extra for release) Before a release, we should test all issues and PR's that are ready for quality assessment in the release project. Test the features and bugs in every one of them, with multiple clients. Join with a third 200Ping client Look if your view is the same as the other clients. if not, you have found a bug already! play for a while with all three (extra for release) Before a release, we should test all issues and PR's that are ready for quality assessment in the release project. Test the features and bugs in every one of them, with the third client. No errors or inconsistencies? great, your build just passed our Quality assessment. Happy spess testing!","title":"Advanced Pre-Release Test sequence"},{"location":"contribution-guides/Building-And-Testing/#testing-custom-maps-in-multiplayer","text":"Make sure you are on Lobby scene Set Online scene in NetworkManager (under Managers prefab): Don't forget to include the scene you are testing in build preferences as well: And then Build and Run + fire up game in editor","title":"Testing custom maps in Multiplayer"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/","text":"Developing On Linux \u00b6 Introduction \u00b6 Many users enjoy programming and development on Unix-based systems. Unix-based systems are extremely easy to set up, and development becomes a breeze with the amazing kit that linux distributions like Ubuntu, Debian, and Arch Linux have to offer. Setting up the Unity Editor to properly develop for UnityStation is a bit of a chore, so this guide should help walk you through it in as simple manner as possible. Some Pre-Requisites \u00b6 You're going to want to make sure that you're on a Unix-based system and that you have already forked the unitystation repository and cloned it to your computer. This is important, as we'll be editing our own fork, then pushing and pulling our commits to the unitystation repository. This guide is also under the impression that you've already installed .NET Core for Linux and Mono. Downloading the Unity Editor \u00b6 The Linux builds for the Unity Editor are separate from other builds and are considered experimental builds. Some versions of the Unity Editor for Linux may not work properly with the unitystation code, and some may not work properly on your system entirely. I would suggest that if something is wrong with the Unity Editor that you try a different version. Navigate to the Official 64-bit .deb Package & Unofficial Platform-Agnostic Installer thread located here: https://forum.unity.com/threads/unity-on-linux-release-notes-and-known-issues.350256/ Go to the last page, and go to the very last post for the latest build (note that some builds may be beta builds) Click on the link to the latest official installer Click on \"Linux Download Assistant\" to download the editor Allow the newly downloaded file to be executed as a program (you also can do this by running chmod +x FILENAME ) Run the installer Click \"Forward\" Click \"Accept\" and click \"Forward\" Check any components you'd like to install (keep the top three components checked by default) and click \"Forward\" Make sure that the editor files downloads to a temporary location (this is default) and click \"Forward\" Wait for the installation to complete (this may take a long time) Once the installation is complete, click \"Finish\". This should then launch the Unity Editor Setting Up the Unity Editor \u00b6 At this point in time, you may be asked to create a new Unity account. If you are asked to do so, then do so. If you already have an account, simply log into that account. Click \"Open\" in the upper-right corner Navigate to your cloned fork on your computer and enter the \"UnityProject\" directory, then click \"Open\". It is extremely important that you navigate to the \"UnityProject\" directory and not to the \"unitystation\" directory , as JetBrains Rider will have issues working with the project if you open the project improperly. Click \"Continue\" to continue past any warnings that Unity throws at you Wait for the project to be imported and open (this may take a very long time) Click \"File\" and click \"Open Scene\" and navigate to the \"Scenes\" folder and open \"OutpostDeathmatch.unity\" for the default scene Once the scene is open, you are all set to work with the Unity Editor Installing JetBrains Rider \u00b6 JetBrains Rider is a multi-platform C# IDE that works very well with Unity Editor. If you are a student, you can get the entire JetBrains suite for free with a valid student email. Rider comes with a Unity plug-in (if you choose to install it) that makes working with Unity extremely easy. Navigate to the JetBrains Toolbox App page (the ToolBox is essentially their \"program hub\", where you can manage and install all of their programs): https://www.jetbrains.com/toolbox/app/?fromMenu Click \"Download\" and make sure that \".tar.gz\" is selected Open the newly downloaded tar.gz file Extract the contained folder to your computer Navigate to that new folder and make sure the \"jetbrains-toolbox\" file is able to be executed, then run the file The Toolbox should open, and you should be presented with all currently installed programs by JetBrains, and all programs that you can install from them. Scroll down until you see \"Rider\" and click \"Install\" Once Rider is installed, simply click on it in the Toolbox to run it Scroll down on the Terms of Service and click \"Accept\" Click \"Open File or Folder\" and navigate to your cloned fork, opening the UnityProject folder. Again, it is extremely important that you do not select unitystation and instead select UnityProject Once the IDE has opened, you're all set with the installation. Attaching JetBrains Rider to the Unity Editor \u00b6 In order to develop seamlessly with the Unity Editor, we need to attach Rider to the Editor. If we don't do this, we might get some \"symbol not found\" errors, because Rider does not have the Unity API hooked up. Make sure that Unity is started and that the project is opened correctly (UnityProject, not unitystation) Make sure that JetBrains Rider is opened and the project is opened correctly (UnityProject, not unitystation) In Rider, click \"Run\" and click \"Attach to Unity Process\" Select the currently opened Unity process in the window Now, Rider should be connected to your Unity Editor In the Unity Editor, go to \"Edit\" in the menu-bar and click \"Preferences\". This will open the Preferences Menu Click on \"External Tools\" on the left side of the Preferences Menu Under \"External Script Editor\" click \"Browse\" and navigate to ~/.local/share/JetBrains/Toolbox/apps/Rider . Continue going through folders until you reach the \"bin\" folder, and select the \"rider.sh\" file for opening. Some folder names may be different depending on system or Rider version Now, you can right-click on a file in the project and click \"Open C# Project\" to open the file directly in Rider. Concluding Notes \u00b6 Now that you have the Unity Editor installed, JetBrains Rider installed, and the two connected, you can develop freely for UnityStation. You can either edit scripts within JetBrains Rider, or within Unity Editor, and both will synchronize continuously. Make sure to save when making changes, and to commit and push your work to your fork when you're ready to make a pull request. Issues and Tips \u00b6 Tip: At the Rider launcher, you can click the settings cog icon in the bottom right and click \"Create Desktop Entry\" so that you can run Rider from your launcher or lock it to your taskbar. Issue: Sometimes Rider has an issue resolving the symbols for Unity because it simply does not recognize the Unity Editor. To fix this issue, try saving the scene in the Unity Editor and then right-clicking on a C# file in the Project and clicking \"Open C# Project\". More Issues and Tips will be added here as time goes on","title":"Developing On Linux"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#developing-on-linux","text":"","title":"Developing On Linux"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#introduction","text":"Many users enjoy programming and development on Unix-based systems. Unix-based systems are extremely easy to set up, and development becomes a breeze with the amazing kit that linux distributions like Ubuntu, Debian, and Arch Linux have to offer. Setting up the Unity Editor to properly develop for UnityStation is a bit of a chore, so this guide should help walk you through it in as simple manner as possible.","title":"Introduction"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#some-pre-requisites","text":"You're going to want to make sure that you're on a Unix-based system and that you have already forked the unitystation repository and cloned it to your computer. This is important, as we'll be editing our own fork, then pushing and pulling our commits to the unitystation repository. This guide is also under the impression that you've already installed .NET Core for Linux and Mono.","title":"Some Pre-Requisites"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#downloading-the-unity-editor","text":"The Linux builds for the Unity Editor are separate from other builds and are considered experimental builds. Some versions of the Unity Editor for Linux may not work properly with the unitystation code, and some may not work properly on your system entirely. I would suggest that if something is wrong with the Unity Editor that you try a different version. Navigate to the Official 64-bit .deb Package & Unofficial Platform-Agnostic Installer thread located here: https://forum.unity.com/threads/unity-on-linux-release-notes-and-known-issues.350256/ Go to the last page, and go to the very last post for the latest build (note that some builds may be beta builds) Click on the link to the latest official installer Click on \"Linux Download Assistant\" to download the editor Allow the newly downloaded file to be executed as a program (you also can do this by running chmod +x FILENAME ) Run the installer Click \"Forward\" Click \"Accept\" and click \"Forward\" Check any components you'd like to install (keep the top three components checked by default) and click \"Forward\" Make sure that the editor files downloads to a temporary location (this is default) and click \"Forward\" Wait for the installation to complete (this may take a long time) Once the installation is complete, click \"Finish\". This should then launch the Unity Editor","title":"Downloading the Unity Editor"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#setting-up-the-unity-editor","text":"At this point in time, you may be asked to create a new Unity account. If you are asked to do so, then do so. If you already have an account, simply log into that account. Click \"Open\" in the upper-right corner Navigate to your cloned fork on your computer and enter the \"UnityProject\" directory, then click \"Open\". It is extremely important that you navigate to the \"UnityProject\" directory and not to the \"unitystation\" directory , as JetBrains Rider will have issues working with the project if you open the project improperly. Click \"Continue\" to continue past any warnings that Unity throws at you Wait for the project to be imported and open (this may take a very long time) Click \"File\" and click \"Open Scene\" and navigate to the \"Scenes\" folder and open \"OutpostDeathmatch.unity\" for the default scene Once the scene is open, you are all set to work with the Unity Editor","title":"Setting Up the Unity Editor"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#installing-jetbrains-rider","text":"JetBrains Rider is a multi-platform C# IDE that works very well with Unity Editor. If you are a student, you can get the entire JetBrains suite for free with a valid student email. Rider comes with a Unity plug-in (if you choose to install it) that makes working with Unity extremely easy. Navigate to the JetBrains Toolbox App page (the ToolBox is essentially their \"program hub\", where you can manage and install all of their programs): https://www.jetbrains.com/toolbox/app/?fromMenu Click \"Download\" and make sure that \".tar.gz\" is selected Open the newly downloaded tar.gz file Extract the contained folder to your computer Navigate to that new folder and make sure the \"jetbrains-toolbox\" file is able to be executed, then run the file The Toolbox should open, and you should be presented with all currently installed programs by JetBrains, and all programs that you can install from them. Scroll down until you see \"Rider\" and click \"Install\" Once Rider is installed, simply click on it in the Toolbox to run it Scroll down on the Terms of Service and click \"Accept\" Click \"Open File or Folder\" and navigate to your cloned fork, opening the UnityProject folder. Again, it is extremely important that you do not select unitystation and instead select UnityProject Once the IDE has opened, you're all set with the installation.","title":"Installing JetBrains Rider"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#attaching-jetbrains-rider-to-the-unity-editor","text":"In order to develop seamlessly with the Unity Editor, we need to attach Rider to the Editor. If we don't do this, we might get some \"symbol not found\" errors, because Rider does not have the Unity API hooked up. Make sure that Unity is started and that the project is opened correctly (UnityProject, not unitystation) Make sure that JetBrains Rider is opened and the project is opened correctly (UnityProject, not unitystation) In Rider, click \"Run\" and click \"Attach to Unity Process\" Select the currently opened Unity process in the window Now, Rider should be connected to your Unity Editor In the Unity Editor, go to \"Edit\" in the menu-bar and click \"Preferences\". This will open the Preferences Menu Click on \"External Tools\" on the left side of the Preferences Menu Under \"External Script Editor\" click \"Browse\" and navigate to ~/.local/share/JetBrains/Toolbox/apps/Rider . Continue going through folders until you reach the \"bin\" folder, and select the \"rider.sh\" file for opening. Some folder names may be different depending on system or Rider version Now, you can right-click on a file in the project and click \"Open C# Project\" to open the file directly in Rider.","title":"Attaching JetBrains Rider to the Unity Editor"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#concluding-notes","text":"Now that you have the Unity Editor installed, JetBrains Rider installed, and the two connected, you can develop freely for UnityStation. You can either edit scripts within JetBrains Rider, or within Unity Editor, and both will synchronize continuously. Make sure to save when making changes, and to commit and push your work to your fork when you're ready to make a pull request.","title":"Concluding Notes"},{"location":"contribution-guides/Developing-for-UnityStation-on-Unix-Systems-with-the-Unity-Editor-and-JetBrains-Rider/#issues-and-tips","text":"Tip: At the Rider launcher, you can click the settings cog icon in the bottom right and click \"Create Desktop Entry\" so that you can run Rider from your launcher or lock it to your taskbar. Issue: Sometimes Rider has an issue resolving the symbols for Unity because it simply does not recognize the Unity Editor. To fix this issue, try saving the scene in the Unity Editor and then right-clicking on a C# file in the Project and clicking \"Open C# Project\". More Issues and Tips will be added here as time goes on","title":"Issues and Tips"},{"location":"contribution-guides/Development-Standards-Guide/","text":"Development Standards Guide \u00b6 Having a consistent code style and basic standards for code quality helps to keep our code \"clean\", making it easier to develop as our project grows. It would be awesome to build a game as complex as SS13 that is also easy to keep improving upon. Remember that each line of code you add now will be read by many other fellow developers in the future (including you!), so writing code that's easy to understand has a very positive impact on the project. These are not strict rules, and reviewers don't expect developers to be able to follow all of these suggestions, but we strive to adhere to them as much as possible. When a reviewer looks at your PR, part of their review will involve thinking about code cleanliness. They will work with you to figure out if / what changes can be made to the PR to help with code cleanliness. They might suggest some items from this list or something from their own experience. As you submit more and more PRs, the reviewers you collaborate with should help you develop a better sense of how to write clean code until it becomes second nature. As a supplement to this, you can check out some best practices for Unity development here: 50 Tips and Best Practices for Unity And we highly recommend that you watch this video as it covers a lot of common mistakes that developers do: 20 Advanced Coding Tips For Big Unity Projects Code Style \u00b6 All classes, public methods and public fields should have XML /// comments. Parameter and return value documentations should be descriptive. Class documentation should describe the purpose of the class. Also comment any code where it might not be obvious to someone else why it's doing something. You can read more about how to write XML comments here . For example, here's a well-documented method: /// <summary> /// Trigger an interaction with the position set to this transform's position, with the specified originator and hand. /// </summary> /// <param name=\"originator\">GameObject of the player initiating the interaction</param> /// <param name=\"hand\">hand being used by the originator</param> /// <returns>true if further interactions should be prevented for the current update</returns> public bool Interact ( GameObject originator , string hand ) Usually, use a separate .cs file for each public class or struct. It is sometimes preferable to have more than one in the same file, but if uncertain err on the side of using a separate file. Use P ascal C ase for all file names, functions and public variables. Use namespace declarations matching the script's folder path on all new or modified script files. namespace SampleNamespace { class SampleClass { public void SampleMethod () { System . Console . WriteLine ( \"SampleMethod inside SampleNamespace\" ); } } } All variables and non-public fields except for constants / constant-like ones should use camelCase (with no prefix letter). public class Greytider { private float rage ; public bool Grief ( Player griefingVictim ) { float desireToGrief = griefingVictim . griefability - griefPoints / 100 } } All constants or constant-like variables should use uppercase snake case - \"CONSTANT_NAME\" public class ExplodeWhenShot { private const string EXPLOSION_SOUND = \"Explode01.wav\" ; //this is not an actual constant, but is initialized in Start() and never modified //afterwards so it should still be named using this convention private int DAMAGEABLE_MASK ; private void Start () { DAMAGEABLE_MASK = LayerMask . GetMask ( \"Players\" , \"Machines\" , \"Default\" ); } } Properties, public fields, classes, structs, enum constants, and methods should use PascalCase - \"SomeName\". public struct PlayerState public class PlayerSync { public bool IsGhost ; public bool IsAlive { get ; set ; } public void Attack ( GameObject attacker ) { ... } } public enum DamageType { Poison , Fire , Brute } We tend to prefix variables and methods with underscores to indicate that you shouldn't use them unless you REALLY know what you are doing and understand the implications, like Spawn._ServerFireClientServerSpawnHooks . Any TODO comments added in a PR should be accompanied by a corresponding issue in the issue tracker. A TODO comment means that there's something we need to remember to do, so we need to put it in the issue tracker to make sure we remember. Script folders should have no more than 10 scripts in a given folder. Reorganize, refactor, or add subfolders as needed to avoid folders getting too large. Local variables should be declared near where they are used, not at the beginning of their containing block. public float LongMethod () { //Don't declare it here, it's not used until later! //float distance; ... do a bunch of stuff ... ... do a bunch of stuff ... ... do a bunch of stuff ... //declare it here instead! float distance = CalculateDistance (); bool isInRange = distance > MAX_RANGE ; } When checking if something is null, use something == null rather than !something - it's easier for newer devs to understand. When checking if a boolean is false, use someBool == false rather than !someBool - sometimes it's easy to miss that exclamation point. Format code according to our standard formatting style. Your IDE will be able to apply some of these automatically by reading this from our .editorconfig file. For reference (or in case .editorconfig can't support these), here's the style conventions: Indent using tabs rather than spaces. When checking in code, try to ensure it uses Unix-style (LF) line endings. If you're on OSX or Linux, you don't need to do anything. If you are on Windows, ensure that you have configured git to check out Windows style but commit Unix-style line endings using the command git config --global core.autocrlf true or configuring this using your git GUI of choice. Avoid long lines. Break up lines of code that are longer than 120 characters. Alternatively, try to refactor the statement so it doesn't need to be so long! //too long! float distance = Vector3 . Distance ( Weapon . Owner . transform , PlayerManager . LocalPlayer . gameObject . transform ) + blah blah blah . //better! float distance = Vector3 . Distance ( Weapon . Owner . transform , PlayerManager . LocalPlayer . gameObject . transform ) + blah blah blah . // best! Refactor into a private method float distance = DistanceToLocalPlayer ( Weapon ) + blah blah blah Curly braces should always be on a line by themselves: if ( condition ) { .... } else { .... } Component and Scriptable Object Design \u00b6 If a field should be assignable in editor, make it private and add the [SerializeField] attribute and a [Tooltip(\"<description>\")] . If other classes must be able to read the field, use a getter-only auto property. This improves the encapsulation of your class, preventing other components from potentially breaking your class. Don't trust that others will know they aren't supposed to modify your field! : public class Health : MonoBehavior { [Tooltip(\"initial HP of this character)] [SerializeField] private float initialHP ; ///<summary> ///The initial HP of this character. ///</summary> public float InitialHP => initialHP ; } If you are SURE that you want the field to be modifiable by other classes, you can turn the getter into a property so you can add logic to validate / react to when the value is changed by other classes. You should usually not have a public field without any setter logic , as in most cases your component will need to perform some logic when the value is changed. If you really don't need any setter logic, it's okay to just leave it as a public field without a property. As always, make sure to document the effect of getting / setting. public class Health : MonoBehavior { [SerializeField] private float initialHP ; ///<summary> ///The initial HP of this character. Setting this ///will cause the character's HP to be higher upon respawn. ///</summary> public float InitialHP { get => initialHP ; set { //custom setter logic here initialHP = value ; } } } Public methods which only function correctly on the server must be prefixed with \"Server\" (or at least include Server somewhere in the name). It makes the name longer but it saves developers the trouble of wondering whether it's okay to call the method from the clientside, which can prevent quite nasty bugs. Do not rely on the [Server] attribute, since it's only available on NetworkBehavior components and is not visible in autocomplete. It's less vital but still recommended to follow this convention on private methods. Code Design \u00b6 Follow the philosophy \"tell, don't ask\". TELL a class to do something rather than ASKING it for some data and operating on that data. Treat a class as a folder for grouping together data and the logic that operates on that data. //bad - ASKing for health, modifying the health outside of the Player class var health = player . Health ; health = player . Invincible ? health : health - weapon . damage ; Player . Health = health ; //good - TELL the Player to handle an attack made against them player . Attack ( weapon ); Avoid many levels of nested indentation, almost certainly no more than 7, preferably no more than 3. You can solve this by taking deeply-nested logic and putting it into a descriptively-named private method. //bad if ( test1 ) { if ( test2 ) { if ( test3 ) { if ( test4 ) { ... } } } } //better if ( test1 ) { if ( test2 ) { AdditionalLogic (); } } private void AdditionalLogic () { if ( test3 ) { if ( test4 ) { ... } } } Try to keep individual .cs files small. Shoot for less than 500 actual lines of code (ignoring comments / blank lines). You can use refactoring, design patterns, and other techniques to try to make them small by splitting logic up into other .cs files / classes. When deciding what type to use, strings should be used only as a last resort. Prefer other types, such as enums, numeric types, custom classes, etc...if they are more appropriate. Most string or numeric literals should be constants. Don't define constants that have the same value in multiple places. There should only ever be one place you need to change if you ever need to change a constant's value. Writing efficent and maintainble code \u00b6 Unitystation is a gigantic and ambitious project that holds a lot of content and systems that can get tangled together, to avoid things tangling each other; we highly recommend that you write your code in a modular way that's easy for developers to maintain and and expand upon. Unity has a great talk on how to do just that in this video: How to adopt a modular code workflow for your team | Unite 2022 Below are good practices and explainations on what to do, so you can avoid having your code refactored/reworked 5 months later and make the lives of other contributors much easier. 0. In-code documentation and clarity \u00b6 You can avoid confusing others (and even yourself) by naming your functions and variables in a clear and descriptive way. //bad code private void DoThing(bool b) { state = b; } //good code private void UpdateState(bool newState) { state = newState; } Avoid using extremely shortened names whenever possible. //bad name. var DIS = GetComponent<DynamicInventorySystem>(); //good name. var inventory = GetComponent<DynamicInventorySystem>(); Explain things like long LINQ expressions, uncommon C# syntax and RegEx. LINQ and Regex are extremely useful but they can slow down everyone sometimes whenever they have to work on/with it. Having comments in code that explains what it does can save a developer minutes (if not hours) of their life to be productive elsewhere. Reminder, just because your code might seem obvious to you; doesn't mean that it's obvious to everyone else. // Linq expression that handles grabbing multiple names from a prefab. // it grabs all prefabs in documents then loops through all prefabs and grabs all searchable names. // if the searchable name contains a substring that the user is searching it will return it. var docs = (from doc in documents from prefabNames in doc.SearchableName where prefabNames.Contains(standardizedSearch) select doc).ToList(); } Make use of the Unitystation developer docs and document features and systems there. It's widely agreed everywhere that excessive commenting inside of code can make it look ugly. As a result, we move all or in-depth explanations of how things work to the developer docs. Whenever you finish working on a new feature or system, always try your best to write/update a page that explains what your changes does in detail. Make proprer use of Logger It's easy to debug problems when the game tells us that there is one. As a result, we use Logger ; a logging system that allows us to store records of how the game has been behaving/misbehaving while it's running. Logger should only be used to report unintended behaviors, errors and backend system messages. Never spam logger and remove any debugging messages you have left once you're done using it to print testing values/results in the console. To make our lives easier as well, add the class/gameObject name and function in the log message so it's easier to tell ourselves what went wrong from a surface. Note: Avoid using unity's Debug class for logging as it doesn't store logs where we need them to be. //bad use of logger. Logger.Log(\"something happened\"); //good use of logger. Logger.Log(\"[Manager/OnRoundEnd/Cleanup] - Manager cleaned references succesfully.\", Category.DebugConsole); Logger.LogError($\"[Item/ServerPerformInteraction] - Tried applying item on {gameObject.name} but it was missing X!\", Category.Interactions); Logger.LogWarning(\"[Object/OnEnable] - Integer values appear to be too high, unintended behavior may occur.\", Category.Atmospherics); 1. Writing modular code with minimal dependencies \u00b6 Video games are event driven, you should use the UpdateManager as sparingly as possible and when it actually makes sense to constantly update a state of an object every frame. Make use of Action<> and UnityEvent<> whenever you want to tell an object to do something based on a change or function being called on something else. For more info about UnityEvents check: The Offical Unity Docs Events can be used to reduce the likelyhood of bugs and NREs occuring and makes our code much more maintainable and easy to expand upon due to how they're designed. With events, components don't have to constantly reference each other and only require a subscription to relevent functions that get invoked when things happen in the game. //example of bad code class Health : Monobehavior { public bool StateChanged; public int currentHealth = 5; void stateChange(int damageTaken){ currentHealth -= damageTaken; if(currentHealth >= 0) return; StateChanged = true; Inventory.DropAll(); //How do we know that we have an inventory at all? } } class DeathUI : Monobehavior { public Health health; //<- possibily null void Awake(){ UpdateManager.Add(FIXED_UPDATE, myFunc); } void myFunc(){ if(health.StateChanged == false) return; DoThing(); } } class PlayerInventory : Inventory{ public void DropAll(); } //example of good code class Health : Monobehavior { public int CurrentHealth {private set; get;} = 5; public Action OnDeath = new Action(); public void TakeDamage(int damageTaken) { currentHealth -= damageTaken; if(currentHealth >= 0) return; OnDeath?.Invoke(); } } class DeathUI : Monobehavior { void OnEnable() { if(gameObject.TryGetComponent<Health>(out var playerHealth) == false) { // Always leave warnings and errors whenever possible instead of silently not reporting unintended behaviors. Logger.LogWarning(\"[DeathUI/OnEnable] - No health found on this gameObject! DeathUI hasn't subscribed to any events when it got enabled!\"); return; } // Subscribes to the OnDeath event which will trigger when this object's health reaches 0 or below. playerHealth.OnDeath += myFunc; } void myFunc() { DoThing(); } } class PlayerInventory : Inventory { //same thing as in DeathUI, just subscribe to the OnDeath event. } Note: Events can leak! Always remember to unsubscribe your events on OnDisable() . Minimise inheritance, Embrace Interfaces. Interface in C# is a blueprint of a class. It is like abstract class because all the methods which are declared inside the interface are abstract methods. It cannot be instantiated, but it can hold optional default implamentations. It is used to achieve multiple inheritance which can't be achieved by class. Interfaces allows to share behaviour with classes in a horizontal manner, contrary to inheritance where the sharing is vertical (from parent to children). In horizontal, there is no need for a parental relationship between the classes. CodeMonkey has a great video on how to utilise interfaces for a modular workflow: Modular Character System in Unity That being said, Inheritance is not something to be afraid of. Inheritance makes sense to be used while in the right context, which is mostly going to be in ScriptableObjects and scanerios where you want to work with common data that will be shared around. So, use inheritance for data driven scenarios while keep systems and functionality bound to C# Interfaces. Reduce duplicate code. If you've seen something that has been done more than twice in the project, write a common class or class extension that allows us to reduce the likelyhood of having to maintain duplicate code that all do the same thing in multiple areas. // bad code. class ClassA : MonoBehavior { public void DoX_InTransform(); } class ClassB : MonoBehavior { private void DoX_InTransform(); } class ClassC : MonoBehavior { public void DoX_InTransform(); } // good code. public static class TransformExtensions { //can be called anywhere when they access Transform. public static void DoX(this Transform t, float value) { //Common task here. } } 2. Performance gotchas! \u00b6 Unity still uses Mono, which means we do not get the performance benefits of .NET 6 and 7. As a result, minimise the use of things like LINQ unless you know what you're doing. As a general rule of thumb, avoid doing any performance intensive tasks or calculations on the game server. Your code may only take up 0.5% of CPU time but when 100 systems do this, it becomes inefficent and a glaring issue that someone has to deal with in the future. Avoid using the UpdateManager whenever possible and bind yourself to an event driven archticture/design for your code. Not only is it good for code quality; But it's also good for performance when your code is designed in a way that expects functions to be called every once and a while rather than every tick/frame. GetComponent<> , GetComponentInChildren() and TryGetComponent<>() are largely inefficent and can be incredibly slow. Use CommonComponents whenever possible or cache references to components. //How to cache references. [SerializeField] private SpriteHandler itemSprite; void Awake() { if(itemSprite == null) itemSprite = GetComponentInChildren<SpriteHandler>(); } Unity Coroutines are great for moving tasks that require things to happen over time from the Update() loop into an asynchronous workflow that allows you to spread, pause and kill tasks freely over multiple frames. However, do be aware that it's a double edged sword as IEnumerator does allocate memory whenever StartCoroutine invokes a coroutine and you can only invoke them from inside Monobehaviors. Use them wisely. TLDR: Coroutines trades CPU performance for memory \"It\u2019s best practice to condense a series of operations down to the fewest number of individual coroutines possible. Nested coroutines are useful for code clarity and maintenance, but they impose a higher memory overhead because the coroutine tracks objects.\" - Unity Docs. Use Time-Splitting whenever your iterators/loops are attempting to go through a large amount of objects/tasks. //How to time split. var currentIndex = 0; var maximumIndexesPerFrame = 20; foreach(var item in LargeList) { if(currentIndex >= maximumIndexesPerFrame) { //Causes the IEnumerator to be paused until the next frame. yield return WaitFor.EndOfFrame(); currentIndex = 0; } item.DoPossibilyHeavyTask(); currentIndex += 1; } If you're creating a custom data type, use struct instead of objects (aka class ). Structs allocate less memory and are a better choice when your data does not require to be changed overtime or require bundled functions that self manage that data. Turn off raycast masks in UI whenever you're not using them! Not only does it prevent bugs where mouse inputs may appeared blocked for no reason; but they also tell Unity to not waste time updating UI elements when there are no mouse interactions made for that element. Prioritize using Vector3.Distance() rather than raycasts whenever you do not require checking for physical properties in the game world, as functions like Physics2D.SphereOverlap() and MatrixManager.Linecast() are generally slow and allocate a lot of memory. Always use Stringbuilder for String concatenation operations as it's much faster than manually editing the string variable directly. TryCatch has a very small performance hit on the game. But it's generally recommended that you avoid using TryCatch all together especially on any function that runs on the UpdateManager and even more-so if it's on the game server; but if you do need it and have a good reason for its use case, always remember to never leave your catch methods empty and log your expectations. //bad TryCatch code. try { gameObject.pickupable.GetBestHandOrSlotFor(this); } catch { } //good TryCatch code. try { // Maximise the usecase of trycatch and report extra errors that may or may not happen. if(gameObject.pickupable == null) { throw new ArgumentNullException(paramName: nameof(s), message: \"this gameObject has no pickupable components!\"); } gameObject.pickupable.GetBestHandOrSlotFor(this); } catch (Exception e) { // Never leave your catch block empty, always report that something has went wrong here. Logger.LogError($\"[ClassName/Function] - An error occured when trying to get the best slot for this item. \\n {e}\"); }","title":"Development Standards Guide"},{"location":"contribution-guides/Development-Standards-Guide/#development-standards-guide","text":"Having a consistent code style and basic standards for code quality helps to keep our code \"clean\", making it easier to develop as our project grows. It would be awesome to build a game as complex as SS13 that is also easy to keep improving upon. Remember that each line of code you add now will be read by many other fellow developers in the future (including you!), so writing code that's easy to understand has a very positive impact on the project. These are not strict rules, and reviewers don't expect developers to be able to follow all of these suggestions, but we strive to adhere to them as much as possible. When a reviewer looks at your PR, part of their review will involve thinking about code cleanliness. They will work with you to figure out if / what changes can be made to the PR to help with code cleanliness. They might suggest some items from this list or something from their own experience. As you submit more and more PRs, the reviewers you collaborate with should help you develop a better sense of how to write clean code until it becomes second nature. As a supplement to this, you can check out some best practices for Unity development here: 50 Tips and Best Practices for Unity And we highly recommend that you watch this video as it covers a lot of common mistakes that developers do: 20 Advanced Coding Tips For Big Unity Projects","title":"Development Standards Guide"},{"location":"contribution-guides/Development-Standards-Guide/#code-style","text":"All classes, public methods and public fields should have XML /// comments. Parameter and return value documentations should be descriptive. Class documentation should describe the purpose of the class. Also comment any code where it might not be obvious to someone else why it's doing something. You can read more about how to write XML comments here . For example, here's a well-documented method: /// <summary> /// Trigger an interaction with the position set to this transform's position, with the specified originator and hand. /// </summary> /// <param name=\"originator\">GameObject of the player initiating the interaction</param> /// <param name=\"hand\">hand being used by the originator</param> /// <returns>true if further interactions should be prevented for the current update</returns> public bool Interact ( GameObject originator , string hand ) Usually, use a separate .cs file for each public class or struct. It is sometimes preferable to have more than one in the same file, but if uncertain err on the side of using a separate file. Use P ascal C ase for all file names, functions and public variables. Use namespace declarations matching the script's folder path on all new or modified script files. namespace SampleNamespace { class SampleClass { public void SampleMethod () { System . Console . WriteLine ( \"SampleMethod inside SampleNamespace\" ); } } } All variables and non-public fields except for constants / constant-like ones should use camelCase (with no prefix letter). public class Greytider { private float rage ; public bool Grief ( Player griefingVictim ) { float desireToGrief = griefingVictim . griefability - griefPoints / 100 } } All constants or constant-like variables should use uppercase snake case - \"CONSTANT_NAME\" public class ExplodeWhenShot { private const string EXPLOSION_SOUND = \"Explode01.wav\" ; //this is not an actual constant, but is initialized in Start() and never modified //afterwards so it should still be named using this convention private int DAMAGEABLE_MASK ; private void Start () { DAMAGEABLE_MASK = LayerMask . GetMask ( \"Players\" , \"Machines\" , \"Default\" ); } } Properties, public fields, classes, structs, enum constants, and methods should use PascalCase - \"SomeName\". public struct PlayerState public class PlayerSync { public bool IsGhost ; public bool IsAlive { get ; set ; } public void Attack ( GameObject attacker ) { ... } } public enum DamageType { Poison , Fire , Brute } We tend to prefix variables and methods with underscores to indicate that you shouldn't use them unless you REALLY know what you are doing and understand the implications, like Spawn._ServerFireClientServerSpawnHooks . Any TODO comments added in a PR should be accompanied by a corresponding issue in the issue tracker. A TODO comment means that there's something we need to remember to do, so we need to put it in the issue tracker to make sure we remember. Script folders should have no more than 10 scripts in a given folder. Reorganize, refactor, or add subfolders as needed to avoid folders getting too large. Local variables should be declared near where they are used, not at the beginning of their containing block. public float LongMethod () { //Don't declare it here, it's not used until later! //float distance; ... do a bunch of stuff ... ... do a bunch of stuff ... ... do a bunch of stuff ... //declare it here instead! float distance = CalculateDistance (); bool isInRange = distance > MAX_RANGE ; } When checking if something is null, use something == null rather than !something - it's easier for newer devs to understand. When checking if a boolean is false, use someBool == false rather than !someBool - sometimes it's easy to miss that exclamation point. Format code according to our standard formatting style. Your IDE will be able to apply some of these automatically by reading this from our .editorconfig file. For reference (or in case .editorconfig can't support these), here's the style conventions: Indent using tabs rather than spaces. When checking in code, try to ensure it uses Unix-style (LF) line endings. If you're on OSX or Linux, you don't need to do anything. If you are on Windows, ensure that you have configured git to check out Windows style but commit Unix-style line endings using the command git config --global core.autocrlf true or configuring this using your git GUI of choice. Avoid long lines. Break up lines of code that are longer than 120 characters. Alternatively, try to refactor the statement so it doesn't need to be so long! //too long! float distance = Vector3 . Distance ( Weapon . Owner . transform , PlayerManager . LocalPlayer . gameObject . transform ) + blah blah blah . //better! float distance = Vector3 . Distance ( Weapon . Owner . transform , PlayerManager . LocalPlayer . gameObject . transform ) + blah blah blah . // best! Refactor into a private method float distance = DistanceToLocalPlayer ( Weapon ) + blah blah blah Curly braces should always be on a line by themselves: if ( condition ) { .... } else { .... }","title":"Code Style"},{"location":"contribution-guides/Development-Standards-Guide/#component-and-scriptable-object-design","text":"If a field should be assignable in editor, make it private and add the [SerializeField] attribute and a [Tooltip(\"<description>\")] . If other classes must be able to read the field, use a getter-only auto property. This improves the encapsulation of your class, preventing other components from potentially breaking your class. Don't trust that others will know they aren't supposed to modify your field! : public class Health : MonoBehavior { [Tooltip(\"initial HP of this character)] [SerializeField] private float initialHP ; ///<summary> ///The initial HP of this character. ///</summary> public float InitialHP => initialHP ; } If you are SURE that you want the field to be modifiable by other classes, you can turn the getter into a property so you can add logic to validate / react to when the value is changed by other classes. You should usually not have a public field without any setter logic , as in most cases your component will need to perform some logic when the value is changed. If you really don't need any setter logic, it's okay to just leave it as a public field without a property. As always, make sure to document the effect of getting / setting. public class Health : MonoBehavior { [SerializeField] private float initialHP ; ///<summary> ///The initial HP of this character. Setting this ///will cause the character's HP to be higher upon respawn. ///</summary> public float InitialHP { get => initialHP ; set { //custom setter logic here initialHP = value ; } } } Public methods which only function correctly on the server must be prefixed with \"Server\" (or at least include Server somewhere in the name). It makes the name longer but it saves developers the trouble of wondering whether it's okay to call the method from the clientside, which can prevent quite nasty bugs. Do not rely on the [Server] attribute, since it's only available on NetworkBehavior components and is not visible in autocomplete. It's less vital but still recommended to follow this convention on private methods.","title":"Component and Scriptable Object Design"},{"location":"contribution-guides/Development-Standards-Guide/#code-design","text":"Follow the philosophy \"tell, don't ask\". TELL a class to do something rather than ASKING it for some data and operating on that data. Treat a class as a folder for grouping together data and the logic that operates on that data. //bad - ASKing for health, modifying the health outside of the Player class var health = player . Health ; health = player . Invincible ? health : health - weapon . damage ; Player . Health = health ; //good - TELL the Player to handle an attack made against them player . Attack ( weapon ); Avoid many levels of nested indentation, almost certainly no more than 7, preferably no more than 3. You can solve this by taking deeply-nested logic and putting it into a descriptively-named private method. //bad if ( test1 ) { if ( test2 ) { if ( test3 ) { if ( test4 ) { ... } } } } //better if ( test1 ) { if ( test2 ) { AdditionalLogic (); } } private void AdditionalLogic () { if ( test3 ) { if ( test4 ) { ... } } } Try to keep individual .cs files small. Shoot for less than 500 actual lines of code (ignoring comments / blank lines). You can use refactoring, design patterns, and other techniques to try to make them small by splitting logic up into other .cs files / classes. When deciding what type to use, strings should be used only as a last resort. Prefer other types, such as enums, numeric types, custom classes, etc...if they are more appropriate. Most string or numeric literals should be constants. Don't define constants that have the same value in multiple places. There should only ever be one place you need to change if you ever need to change a constant's value.","title":"Code Design"},{"location":"contribution-guides/Development-Standards-Guide/#writing-efficent-and-maintainble-code","text":"Unitystation is a gigantic and ambitious project that holds a lot of content and systems that can get tangled together, to avoid things tangling each other; we highly recommend that you write your code in a modular way that's easy for developers to maintain and and expand upon. Unity has a great talk on how to do just that in this video: How to adopt a modular code workflow for your team | Unite 2022 Below are good practices and explainations on what to do, so you can avoid having your code refactored/reworked 5 months later and make the lives of other contributors much easier.","title":"Writing efficent and maintainble code"},{"location":"contribution-guides/Development-Standards-Guide/#0-in-code-documentation-and-clarity","text":"You can avoid confusing others (and even yourself) by naming your functions and variables in a clear and descriptive way. //bad code private void DoThing(bool b) { state = b; } //good code private void UpdateState(bool newState) { state = newState; } Avoid using extremely shortened names whenever possible. //bad name. var DIS = GetComponent<DynamicInventorySystem>(); //good name. var inventory = GetComponent<DynamicInventorySystem>(); Explain things like long LINQ expressions, uncommon C# syntax and RegEx. LINQ and Regex are extremely useful but they can slow down everyone sometimes whenever they have to work on/with it. Having comments in code that explains what it does can save a developer minutes (if not hours) of their life to be productive elsewhere. Reminder, just because your code might seem obvious to you; doesn't mean that it's obvious to everyone else. // Linq expression that handles grabbing multiple names from a prefab. // it grabs all prefabs in documents then loops through all prefabs and grabs all searchable names. // if the searchable name contains a substring that the user is searching it will return it. var docs = (from doc in documents from prefabNames in doc.SearchableName where prefabNames.Contains(standardizedSearch) select doc).ToList(); } Make use of the Unitystation developer docs and document features and systems there. It's widely agreed everywhere that excessive commenting inside of code can make it look ugly. As a result, we move all or in-depth explanations of how things work to the developer docs. Whenever you finish working on a new feature or system, always try your best to write/update a page that explains what your changes does in detail. Make proprer use of Logger It's easy to debug problems when the game tells us that there is one. As a result, we use Logger ; a logging system that allows us to store records of how the game has been behaving/misbehaving while it's running. Logger should only be used to report unintended behaviors, errors and backend system messages. Never spam logger and remove any debugging messages you have left once you're done using it to print testing values/results in the console. To make our lives easier as well, add the class/gameObject name and function in the log message so it's easier to tell ourselves what went wrong from a surface. Note: Avoid using unity's Debug class for logging as it doesn't store logs where we need them to be. //bad use of logger. Logger.Log(\"something happened\"); //good use of logger. Logger.Log(\"[Manager/OnRoundEnd/Cleanup] - Manager cleaned references succesfully.\", Category.DebugConsole); Logger.LogError($\"[Item/ServerPerformInteraction] - Tried applying item on {gameObject.name} but it was missing X!\", Category.Interactions); Logger.LogWarning(\"[Object/OnEnable] - Integer values appear to be too high, unintended behavior may occur.\", Category.Atmospherics);","title":"0. In-code documentation and clarity"},{"location":"contribution-guides/Development-Standards-Guide/#1-writing-modular-code-with-minimal-dependencies","text":"Video games are event driven, you should use the UpdateManager as sparingly as possible and when it actually makes sense to constantly update a state of an object every frame. Make use of Action<> and UnityEvent<> whenever you want to tell an object to do something based on a change or function being called on something else. For more info about UnityEvents check: The Offical Unity Docs Events can be used to reduce the likelyhood of bugs and NREs occuring and makes our code much more maintainable and easy to expand upon due to how they're designed. With events, components don't have to constantly reference each other and only require a subscription to relevent functions that get invoked when things happen in the game. //example of bad code class Health : Monobehavior { public bool StateChanged; public int currentHealth = 5; void stateChange(int damageTaken){ currentHealth -= damageTaken; if(currentHealth >= 0) return; StateChanged = true; Inventory.DropAll(); //How do we know that we have an inventory at all? } } class DeathUI : Monobehavior { public Health health; //<- possibily null void Awake(){ UpdateManager.Add(FIXED_UPDATE, myFunc); } void myFunc(){ if(health.StateChanged == false) return; DoThing(); } } class PlayerInventory : Inventory{ public void DropAll(); } //example of good code class Health : Monobehavior { public int CurrentHealth {private set; get;} = 5; public Action OnDeath = new Action(); public void TakeDamage(int damageTaken) { currentHealth -= damageTaken; if(currentHealth >= 0) return; OnDeath?.Invoke(); } } class DeathUI : Monobehavior { void OnEnable() { if(gameObject.TryGetComponent<Health>(out var playerHealth) == false) { // Always leave warnings and errors whenever possible instead of silently not reporting unintended behaviors. Logger.LogWarning(\"[DeathUI/OnEnable] - No health found on this gameObject! DeathUI hasn't subscribed to any events when it got enabled!\"); return; } // Subscribes to the OnDeath event which will trigger when this object's health reaches 0 or below. playerHealth.OnDeath += myFunc; } void myFunc() { DoThing(); } } class PlayerInventory : Inventory { //same thing as in DeathUI, just subscribe to the OnDeath event. } Note: Events can leak! Always remember to unsubscribe your events on OnDisable() . Minimise inheritance, Embrace Interfaces. Interface in C# is a blueprint of a class. It is like abstract class because all the methods which are declared inside the interface are abstract methods. It cannot be instantiated, but it can hold optional default implamentations. It is used to achieve multiple inheritance which can't be achieved by class. Interfaces allows to share behaviour with classes in a horizontal manner, contrary to inheritance where the sharing is vertical (from parent to children). In horizontal, there is no need for a parental relationship between the classes. CodeMonkey has a great video on how to utilise interfaces for a modular workflow: Modular Character System in Unity That being said, Inheritance is not something to be afraid of. Inheritance makes sense to be used while in the right context, which is mostly going to be in ScriptableObjects and scanerios where you want to work with common data that will be shared around. So, use inheritance for data driven scenarios while keep systems and functionality bound to C# Interfaces. Reduce duplicate code. If you've seen something that has been done more than twice in the project, write a common class or class extension that allows us to reduce the likelyhood of having to maintain duplicate code that all do the same thing in multiple areas. // bad code. class ClassA : MonoBehavior { public void DoX_InTransform(); } class ClassB : MonoBehavior { private void DoX_InTransform(); } class ClassC : MonoBehavior { public void DoX_InTransform(); } // good code. public static class TransformExtensions { //can be called anywhere when they access Transform. public static void DoX(this Transform t, float value) { //Common task here. } }","title":"1. Writing modular code with minimal dependencies"},{"location":"contribution-guides/Development-Standards-Guide/#2-performance-gotchas","text":"Unity still uses Mono, which means we do not get the performance benefits of .NET 6 and 7. As a result, minimise the use of things like LINQ unless you know what you're doing. As a general rule of thumb, avoid doing any performance intensive tasks or calculations on the game server. Your code may only take up 0.5% of CPU time but when 100 systems do this, it becomes inefficent and a glaring issue that someone has to deal with in the future. Avoid using the UpdateManager whenever possible and bind yourself to an event driven archticture/design for your code. Not only is it good for code quality; But it's also good for performance when your code is designed in a way that expects functions to be called every once and a while rather than every tick/frame. GetComponent<> , GetComponentInChildren() and TryGetComponent<>() are largely inefficent and can be incredibly slow. Use CommonComponents whenever possible or cache references to components. //How to cache references. [SerializeField] private SpriteHandler itemSprite; void Awake() { if(itemSprite == null) itemSprite = GetComponentInChildren<SpriteHandler>(); } Unity Coroutines are great for moving tasks that require things to happen over time from the Update() loop into an asynchronous workflow that allows you to spread, pause and kill tasks freely over multiple frames. However, do be aware that it's a double edged sword as IEnumerator does allocate memory whenever StartCoroutine invokes a coroutine and you can only invoke them from inside Monobehaviors. Use them wisely. TLDR: Coroutines trades CPU performance for memory \"It\u2019s best practice to condense a series of operations down to the fewest number of individual coroutines possible. Nested coroutines are useful for code clarity and maintenance, but they impose a higher memory overhead because the coroutine tracks objects.\" - Unity Docs. Use Time-Splitting whenever your iterators/loops are attempting to go through a large amount of objects/tasks. //How to time split. var currentIndex = 0; var maximumIndexesPerFrame = 20; foreach(var item in LargeList) { if(currentIndex >= maximumIndexesPerFrame) { //Causes the IEnumerator to be paused until the next frame. yield return WaitFor.EndOfFrame(); currentIndex = 0; } item.DoPossibilyHeavyTask(); currentIndex += 1; } If you're creating a custom data type, use struct instead of objects (aka class ). Structs allocate less memory and are a better choice when your data does not require to be changed overtime or require bundled functions that self manage that data. Turn off raycast masks in UI whenever you're not using them! Not only does it prevent bugs where mouse inputs may appeared blocked for no reason; but they also tell Unity to not waste time updating UI elements when there are no mouse interactions made for that element. Prioritize using Vector3.Distance() rather than raycasts whenever you do not require checking for physical properties in the game world, as functions like Physics2D.SphereOverlap() and MatrixManager.Linecast() are generally slow and allocate a lot of memory. Always use Stringbuilder for String concatenation operations as it's much faster than manually editing the string variable directly. TryCatch has a very small performance hit on the game. But it's generally recommended that you avoid using TryCatch all together especially on any function that runs on the UpdateManager and even more-so if it's on the game server; but if you do need it and have a good reason for its use case, always remember to never leave your catch methods empty and log your expectations. //bad TryCatch code. try { gameObject.pickupable.GetBestHandOrSlotFor(this); } catch { } //good TryCatch code. try { // Maximise the usecase of trycatch and report extra errors that may or may not happen. if(gameObject.pickupable == null) { throw new ArgumentNullException(paramName: nameof(s), message: \"this gameObject has no pickupable components!\"); } gameObject.pickupable.GetBestHandOrSlotFor(this); } catch (Exception e) { // Never leave your catch block empty, always report that something has went wrong here. Logger.LogError($\"[ClassName/Function] - An error occured when trying to get the best slot for this item. \\n {e}\"); }","title":"2. Performance gotchas!"},{"location":"contribution-guides/Starting-contribution/","text":"Starting Contribution \u00b6 This is a step by step guide for people who want to contribute but have no idea how to get started. If all you want is to mess around with the source code, you can skip all the forking and cloning and download it directly here . If you get lost at any point in this guide, don't be afraid to ask in our Discord . There are tons of friendly dudes and dudettes who will answer all your questions. First thing first \u00b6 You will need these to start your journey: Unity Hub Manages your Unity installations. It will install the proper Unity version for you, so you don't really need to worry about that. (Double check the project's readme to ensure you have the right version when facing any technical issues with unity) A GitHub account . You'll also need to download Git , this is different from GitHub and will allow unity to download its dependencies. An SSD drive is highly recommended to store project files on \u2013 this will greatly affect first import time. Setting up your dev environment \u00b6 If you already know what you're doing, go to our GitHub and fork. Otherwise, look at this picture, from now on this will be the contribution cycle . This is how our workflow will look at the end of the tutorial. What's that? You have no idea what any of that means? Worry not, my fellow contributor! I will guide you step by step. First, you did your GitHub account account as suggested, right? Good. We will now visit the Unitystation Official Repository in GitHub and click this little button located at the top right corner of the page: As the hint suggests, this will create your very own copy of Unitystation under your account. This copy is yours and you can do whatever you want with it, but in order to contribute, you will need to comply with some good practices I'll tell you in a second. Good, now we just need GIT. You don't know what a GIT is? Well, GIT is a Version Control Software designed to deal with the problem of having multiple people modifying the same files at the same time. In other words, we need it. If we don't use it, the project would descend into chaos. At this point, you have a very important decision to make. It is like the type of Pok\u00e9mon you choose to start your adventure... You want GIT with GUI or CLI ? I will describe the starting steps for both now, so you can make your mind. (OSX and Linux come with GIT CLI installed!) Cloning from your GitHub \u00b6 You are here : After Forking from Unitystation official repo ( upstream ), we need to clone from our fork so we get the files into your computer ( Local repo ). GitHub Desktop Git Bash Navigate to the folder where you want to save the files git clone https://github.com/YourUser/YourRepo.git Adding the official repo as a remote \u00b6 Are you done downloading? Awesome! Now your local repo is automagically soul-linked with your remote repo in GitHub (remember we call this origin ). We're going to also link the official repo and name it upstream GitHub Desktop Git Bash This is automagically done Navigate to the folder where your local repo is git remote add upstream https://github.com/unitystation/unitystation.git Now to make sure everything is in order, we do git remote -v and it should show both repos, yours in origin and official in upstream downloading required dependencies \u00b6 First of all, you need to download Git from this link https://git-scm.com/ , then after that's finished installing, restart your computer then you can continue with setting up the project in unity Opening the project in Unity \u00b6 We start by opening Unity Hub and adding the recently downloaded project to the projects list. Good. So now if you don't have the correct Unity version or any at all, you will see this little warning icon All you need to do is to try to open the project anyways and you will get this prompt Yeah, you just install it. It will ask you if you want to add some addons, but we don't need any of those. Just install! Is it done installing? Wonderful, now we need to open the project. Keep in mind the first time you open it, it might take some time to finish importing stuff and generating files. Once that is ready, we can do our first playtest! Go to File and Open Scene then find the Lobby scene in Assets/Scenes folder. Then you can press the Play button on the Game tab to start the game in the editor. Yup, that's it for testing the source code, but you want to contribute, don't you? Keep reading so you know a little more about our workflow. Final step in your setup! \u00b6 Let's close Unity Editor for now. After our import/test play you will notice it generated some files. Said files should not be committed when you request your changes to be integrated into the game. Let's go and discard them... GitHub Desktop Git Bash Go to the changes tab. In my case, I have 2 changes Now right-click in the amount of changes and discard all git status will show you all the unstaged changes you currently have. git checkout . and git clean -f to get rid of all of them. You will be doing this a lot so make sure to learn it! Now that our develop branch is completely clean we will create a new branch from it. Try to always have a feature branch you can play with and keep develop pristine. What's a branch? Well, let's say it is like having a multiverse in your folder. In branch A you have a file called \"greeting.txt\" and its content is \"hello world\", while in branch B you have the same file but now its content is \"hello universe\". You can see how this is useful for us, so we have a version of the game that is common to everyone and you have your own version with the feature you're adding. We can later merge both branches and GIT will try its best to do it smoothly. So how do I create a new branch? GitHub Desktop Git Bash Click the current branch button All that's missing is to publish the new branch so your remote in GitHub ( origin ) is up to date git branch mybranch Where \"mybranch\" is the name you chose for your branch (be more creative than this, please). Then we do git checkout mybranch to change the current branch to mybranch instead of develop Finally we publish our new branch doing git push Here we're done setting your thing up. You're free to go now and modify the code using your favourite IDE or maybe map using nothing but the Unity Editor. What follows in this guide is how to get your changes into the game. Contribute to the official repo \u00b6 Committing and pushing your changes \u00b6 You are here: I strongly suggest you handle your changes in your IDE or GitHub Desktop. Remember to only commit those files you intended to change and their respective meta files if there is any. In the case of GitHub Desktop, all you got to do is to select the files you wish to commit and click the commit button Now all that is missing is publishing your commits to your remote ( origin ) GitHub Desktop Git Bash git push origin Making a PR \u00b6 A P ull R equest is the only way to get your changes into the official version of the game. You do a PR by committing your changes and pushing them to your remote repo ( origin ). Then, visit the Unitystation Official Repository in GitHub and click this green button: You will see a page where you can name your PR and fill a little form with the relevant information. Your PR will be tested and reviewed and then it could be approved to be merged into the game! Please ensure you are familiar with our development standards before submitting your PR. Updating your repo \u00b6 This is a chaotic project and stuff happens every day so it is very important that you keep your repo up-to-date, especially when mapping. GitHub Desktop Git Bash Click the current branch tab In the list find upstream/develop git fetch --all git merge upstream/develop You did it, you completed the tutorial! Now go back to the first time I showed you the Contribution cycle picture and see how you understand it a little better now! Here is a little resume of what we just saw: Set up Fork from the official repo (upstream) Clone from your remote repo (origin) to your local Create a feature branch Working \u200b 0. Update your repo from the official (upstream) Start working in your feature Commit to your local repo Push from your local to your remote (origin) Make a PR Now what? \u00b6 Well, feeling confused after messing around with the scenes and all? well, it's now time to actually learn unity! Reading other Unitystation wikis \u00b6 Take a look at other wiki pages we have In particular, please ensure you are familiar with our development standards before submitting your PR. Learning unity \u00b6 There is a huge amount of resources around for learning Unity, and for the more experienced in the code area, it'll be a piece of cake! Official Unity tutorials All people new to unity start here, it'll teach you basics like the UI, the script and scene editors, and all sorts of things. Official Unity manual The manual is very useful, even for the more experienced, always keep it close. Downloading a code editor \u00b6 There is a lot you can accomplish through editors available from Unity, but if you plan on contributing seriously to the code/scripts, you'll do better if you have a development environment set-up. Editors that you might like to use: Visual Studio Code JetBrains Rider Visual Studio 2015 or newer Atom Vim Regardless of which editor you choose, you'll want to install any relevant extensions from your editor's Marketplace for unity C# projects, including the \"C# powered by OmniSharp\" plugin if your IDE has one. Don't forget to enable Roslyn Analyzers (static code analysis) if they are supported, and enable \"Format on Save\" in your Settings so your editor will automatically fix indentations and whitespace issues for you. When opening the Unitystation project using your code editor, open the \"UnityProject\" subfolder as your editor's workspace, instead of the root \"unitystation\" folder that contains the entire repo. Make sure to link your code editor to Unity by going Edit > Preferences > External Tools . Also generate the csproject files as well for Embedded packages, Local packages, Registry packages and Built-in packages, this helps a lot. Getting help \u00b6 There is no shame in asking questions. Unitystation discord Anyone would be glad to answer your questions, just ask!","title":"Starting Contribution"},{"location":"contribution-guides/Starting-contribution/#starting-contribution","text":"This is a step by step guide for people who want to contribute but have no idea how to get started. If all you want is to mess around with the source code, you can skip all the forking and cloning and download it directly here . If you get lost at any point in this guide, don't be afraid to ask in our Discord . There are tons of friendly dudes and dudettes who will answer all your questions.","title":"Starting Contribution"},{"location":"contribution-guides/Starting-contribution/#first-thing-first","text":"You will need these to start your journey: Unity Hub Manages your Unity installations. It will install the proper Unity version for you, so you don't really need to worry about that. (Double check the project's readme to ensure you have the right version when facing any technical issues with unity) A GitHub account . You'll also need to download Git , this is different from GitHub and will allow unity to download its dependencies. An SSD drive is highly recommended to store project files on \u2013 this will greatly affect first import time.","title":"First thing first"},{"location":"contribution-guides/Starting-contribution/#setting-up-your-dev-environment","text":"If you already know what you're doing, go to our GitHub and fork. Otherwise, look at this picture, from now on this will be the contribution cycle . This is how our workflow will look at the end of the tutorial. What's that? You have no idea what any of that means? Worry not, my fellow contributor! I will guide you step by step. First, you did your GitHub account account as suggested, right? Good. We will now visit the Unitystation Official Repository in GitHub and click this little button located at the top right corner of the page: As the hint suggests, this will create your very own copy of Unitystation under your account. This copy is yours and you can do whatever you want with it, but in order to contribute, you will need to comply with some good practices I'll tell you in a second. Good, now we just need GIT. You don't know what a GIT is? Well, GIT is a Version Control Software designed to deal with the problem of having multiple people modifying the same files at the same time. In other words, we need it. If we don't use it, the project would descend into chaos. At this point, you have a very important decision to make. It is like the type of Pok\u00e9mon you choose to start your adventure... You want GIT with GUI or CLI ? I will describe the starting steps for both now, so you can make your mind. (OSX and Linux come with GIT CLI installed!)","title":"Setting up your dev environment"},{"location":"contribution-guides/Starting-contribution/#cloning-from-your-github","text":"You are here : After Forking from Unitystation official repo ( upstream ), we need to clone from our fork so we get the files into your computer ( Local repo ). GitHub Desktop Git Bash Navigate to the folder where you want to save the files git clone https://github.com/YourUser/YourRepo.git","title":"Cloning from your GitHub"},{"location":"contribution-guides/Starting-contribution/#adding-the-official-repo-as-a-remote","text":"Are you done downloading? Awesome! Now your local repo is automagically soul-linked with your remote repo in GitHub (remember we call this origin ). We're going to also link the official repo and name it upstream GitHub Desktop Git Bash This is automagically done Navigate to the folder where your local repo is git remote add upstream https://github.com/unitystation/unitystation.git Now to make sure everything is in order, we do git remote -v and it should show both repos, yours in origin and official in upstream","title":"Adding the official repo as a remote"},{"location":"contribution-guides/Starting-contribution/#downloading-required-dependencies","text":"First of all, you need to download Git from this link https://git-scm.com/ , then after that's finished installing, restart your computer then you can continue with setting up the project in unity","title":"downloading required dependencies"},{"location":"contribution-guides/Starting-contribution/#opening-the-project-in-unity","text":"We start by opening Unity Hub and adding the recently downloaded project to the projects list. Good. So now if you don't have the correct Unity version or any at all, you will see this little warning icon All you need to do is to try to open the project anyways and you will get this prompt Yeah, you just install it. It will ask you if you want to add some addons, but we don't need any of those. Just install! Is it done installing? Wonderful, now we need to open the project. Keep in mind the first time you open it, it might take some time to finish importing stuff and generating files. Once that is ready, we can do our first playtest! Go to File and Open Scene then find the Lobby scene in Assets/Scenes folder. Then you can press the Play button on the Game tab to start the game in the editor. Yup, that's it for testing the source code, but you want to contribute, don't you? Keep reading so you know a little more about our workflow.","title":"Opening the project in Unity"},{"location":"contribution-guides/Starting-contribution/#final-step-in-your-setup","text":"Let's close Unity Editor for now. After our import/test play you will notice it generated some files. Said files should not be committed when you request your changes to be integrated into the game. Let's go and discard them... GitHub Desktop Git Bash Go to the changes tab. In my case, I have 2 changes Now right-click in the amount of changes and discard all git status will show you all the unstaged changes you currently have. git checkout . and git clean -f to get rid of all of them. You will be doing this a lot so make sure to learn it! Now that our develop branch is completely clean we will create a new branch from it. Try to always have a feature branch you can play with and keep develop pristine. What's a branch? Well, let's say it is like having a multiverse in your folder. In branch A you have a file called \"greeting.txt\" and its content is \"hello world\", while in branch B you have the same file but now its content is \"hello universe\". You can see how this is useful for us, so we have a version of the game that is common to everyone and you have your own version with the feature you're adding. We can later merge both branches and GIT will try its best to do it smoothly. So how do I create a new branch? GitHub Desktop Git Bash Click the current branch button All that's missing is to publish the new branch so your remote in GitHub ( origin ) is up to date git branch mybranch Where \"mybranch\" is the name you chose for your branch (be more creative than this, please). Then we do git checkout mybranch to change the current branch to mybranch instead of develop Finally we publish our new branch doing git push Here we're done setting your thing up. You're free to go now and modify the code using your favourite IDE or maybe map using nothing but the Unity Editor. What follows in this guide is how to get your changes into the game.","title":"Final step in your setup!"},{"location":"contribution-guides/Starting-contribution/#contribute-to-the-official-repo","text":"","title":"Contribute to the official repo"},{"location":"contribution-guides/Starting-contribution/#committing-and-pushing-your-changes","text":"You are here: I strongly suggest you handle your changes in your IDE or GitHub Desktop. Remember to only commit those files you intended to change and their respective meta files if there is any. In the case of GitHub Desktop, all you got to do is to select the files you wish to commit and click the commit button Now all that is missing is publishing your commits to your remote ( origin ) GitHub Desktop Git Bash git push origin","title":"Committing and pushing your changes"},{"location":"contribution-guides/Starting-contribution/#making-a-pr","text":"A P ull R equest is the only way to get your changes into the official version of the game. You do a PR by committing your changes and pushing them to your remote repo ( origin ). Then, visit the Unitystation Official Repository in GitHub and click this green button: You will see a page where you can name your PR and fill a little form with the relevant information. Your PR will be tested and reviewed and then it could be approved to be merged into the game! Please ensure you are familiar with our development standards before submitting your PR.","title":"Making a PR"},{"location":"contribution-guides/Starting-contribution/#updating-your-repo","text":"This is a chaotic project and stuff happens every day so it is very important that you keep your repo up-to-date, especially when mapping. GitHub Desktop Git Bash Click the current branch tab In the list find upstream/develop git fetch --all git merge upstream/develop You did it, you completed the tutorial! Now go back to the first time I showed you the Contribution cycle picture and see how you understand it a little better now! Here is a little resume of what we just saw: Set up Fork from the official repo (upstream) Clone from your remote repo (origin) to your local Create a feature branch Working \u200b 0. Update your repo from the official (upstream) Start working in your feature Commit to your local repo Push from your local to your remote (origin) Make a PR","title":"Updating your repo"},{"location":"contribution-guides/Starting-contribution/#now-what","text":"Well, feeling confused after messing around with the scenes and all? well, it's now time to actually learn unity!","title":"Now what?"},{"location":"contribution-guides/Starting-contribution/#reading-other-unitystation-wikis","text":"Take a look at other wiki pages we have In particular, please ensure you are familiar with our development standards before submitting your PR.","title":"Reading other Unitystation wikis"},{"location":"contribution-guides/Starting-contribution/#learning-unity","text":"There is a huge amount of resources around for learning Unity, and for the more experienced in the code area, it'll be a piece of cake! Official Unity tutorials All people new to unity start here, it'll teach you basics like the UI, the script and scene editors, and all sorts of things. Official Unity manual The manual is very useful, even for the more experienced, always keep it close.","title":"Learning unity"},{"location":"contribution-guides/Starting-contribution/#downloading-a-code-editor","text":"There is a lot you can accomplish through editors available from Unity, but if you plan on contributing seriously to the code/scripts, you'll do better if you have a development environment set-up. Editors that you might like to use: Visual Studio Code JetBrains Rider Visual Studio 2015 or newer Atom Vim Regardless of which editor you choose, you'll want to install any relevant extensions from your editor's Marketplace for unity C# projects, including the \"C# powered by OmniSharp\" plugin if your IDE has one. Don't forget to enable Roslyn Analyzers (static code analysis) if they are supported, and enable \"Format on Save\" in your Settings so your editor will automatically fix indentations and whitespace issues for you. When opening the Unitystation project using your code editor, open the \"UnityProject\" subfolder as your editor's workspace, instead of the root \"unitystation\" folder that contains the entire repo. Make sure to link your code editor to Unity by going Edit > Preferences > External Tools . Also generate the csproject files as well for Embedded packages, Local packages, Registry packages and Built-in packages, this helps a lot.","title":"Downloading a code editor"},{"location":"contribution-guides/Starting-contribution/#getting-help","text":"There is no shame in asking questions. Unitystation discord Anyone would be glad to answer your questions, just ask!","title":"Getting help"},{"location":"development/Addressables/","text":"Overview of Addressable Sounds \u00b6 To save on the file download for the client, sounds for UnityStation have been moved to a separate Unity project within the existing Github repo. This is made possible by utilising Unity\u2019s addressable library which you can read more about here (https://docs.unity3d.com/Manual/com.unity.addressables.html) This project ( SoundAndMusic ) allows you to assign a sound file to a field of a particular component by making a corresponding prefab which is then referenced inside the usual Unity Project. When you build the SoundAndMusic, the project will produce two files, a hash file and a json file with data. Uploading these to a CDN allows the main game to read the catalogue that you uploaded and recreates the files on your computer when you open up an executable. How to Make a New Sound \u00b6 Add a new Unity Project by going into UnityHub and clicking \u201cAdd\u201d. Navigate to the UnityProject -> AddressablePackingProjects -> SoundAndMusic . Once the SoundAndMusic Project is open, put your audio file into the appropriate \u201cAudio\u201d subfolder and create a prefab inside the \u201cPrefab\u201d folder with the same name. Your new sound prefab will not be included in the Addressable build in the main project unless you build a new one. To make a new build follow these steps. \u200b 1. Click Window on the top bar, select Asset Management -> Addressable \u200b 2. Go Build -> Clean Build -> All. This will remove the old build from the ServerData Folder. \u200b 3. Click Build -> New Build -> Default Build Script After doing this and closing the SoundAndMusic Project, the new Build is ready to imported. When you next open UnityProject, you will now be able to add in your new prefab. You will be able to make any object play the sound effect by ensuring that the following line is within the particular script of a component you want to play the sound. cs [SerializeField] private AddressableAudioSource clickSound = null; Or if you want to play from a list of sounds, declare instead cs \u2018\u2019\u2019 List<AddressableAudioSource>\u2019\u2019\u2019. Once declared you can either play the sound by calling it in the script using the cs PlayNetworkedAtPos() function or in the editor type out the name of the sound you want to play in the relevant component like so: NOTE!!! AutoCreatePrefab In the addressable Packing project Can mess up pre-existing keys if used, since it takes the name of the audio Clip instead of the prefab, potentially resulting in a different key for the Sound That's it!","title":"Overview of Addressable Sounds"},{"location":"development/Addressables/#overview-of-addressable-sounds","text":"To save on the file download for the client, sounds for UnityStation have been moved to a separate Unity project within the existing Github repo. This is made possible by utilising Unity\u2019s addressable library which you can read more about here (https://docs.unity3d.com/Manual/com.unity.addressables.html) This project ( SoundAndMusic ) allows you to assign a sound file to a field of a particular component by making a corresponding prefab which is then referenced inside the usual Unity Project. When you build the SoundAndMusic, the project will produce two files, a hash file and a json file with data. Uploading these to a CDN allows the main game to read the catalogue that you uploaded and recreates the files on your computer when you open up an executable.","title":"Overview of Addressable Sounds"},{"location":"development/Addressables/#how-to-make-a-new-sound","text":"Add a new Unity Project by going into UnityHub and clicking \u201cAdd\u201d. Navigate to the UnityProject -> AddressablePackingProjects -> SoundAndMusic . Once the SoundAndMusic Project is open, put your audio file into the appropriate \u201cAudio\u201d subfolder and create a prefab inside the \u201cPrefab\u201d folder with the same name. Your new sound prefab will not be included in the Addressable build in the main project unless you build a new one. To make a new build follow these steps. \u200b 1. Click Window on the top bar, select Asset Management -> Addressable \u200b 2. Go Build -> Clean Build -> All. This will remove the old build from the ServerData Folder. \u200b 3. Click Build -> New Build -> Default Build Script After doing this and closing the SoundAndMusic Project, the new Build is ready to imported. When you next open UnityProject, you will now be able to add in your new prefab. You will be able to make any object play the sound effect by ensuring that the following line is within the particular script of a component you want to play the sound. cs [SerializeField] private AddressableAudioSource clickSound = null; Or if you want to play from a list of sounds, declare instead cs \u2018\u2019\u2019 List<AddressableAudioSource>\u2019\u2019\u2019. Once declared you can either play the sound by calling it in the script using the cs PlayNetworkedAtPos() function or in the editor type out the name of the sound you want to play in the relevant component like so: NOTE!!! AutoCreatePrefab In the addressable Packing project Can mess up pre-existing keys if used, since it takes the name of the audio Clip instead of the prefab, potentially resulting in a different key for the Sound That's it!","title":"How to Make a New Sound"},{"location":"development/Component-Development-Checklist/","text":"Component Development Checklist \u00b6 Summarizes the things to remember when creating a new component or trying to fix a broken one: Did you follow our Development Standards ? Does the component properly handle the object lifecycle? See Proper Spawning and Despawning (Object Lifecycle) Does your component function correctly even when its object is in inventory? See Inventory System . If using SyncVars, are they being used properly?","title":"Component Development Checklist"},{"location":"development/Component-Development-Checklist/#component-development-checklist","text":"Summarizes the things to remember when creating a new component or trying to fix a broken one: Did you follow our Development Standards ? Does the component properly handle the object lifecycle? See Proper Spawning and Despawning (Object Lifecycle) Does your component function correctly even when its object is in inventory? See Inventory System . If using SyncVars, are they being used properly?","title":"Component Development Checklist"},{"location":"development/Crafting-System/","text":"Crafting System \u00b6 This page will help you to create/remove recipes/categories. Any detailed information about the system available in the system's documentation (in the code) or Unity Editor's tooltips. But you can ask any question about the system in Discord - just ping Lizurt#4269. How to... \u00b6 How to create a new crafting recipe \u00b6 Open the Unity Editor Follow the path: /Assets/ScriptableObjects/Crafting/Recipes/ Find a necessarry category to put a new recipe into. RMB -> Create -> ScriptableObjects -> Crafting -> CraftingRecipe Give the new recipe a name. Press the \"Add to the singleton if necessary\" button. Edit your new recipe freely(tooltips will help you). Add the opportunity for a player to learn this recipe. You can add the recipe to the default known recipes list in the PlayerCrafting component of the Player_V4 prefab. You can add the recipe to a recipe book. How to delete a crafting recipe \u00b6 Open the Unity Editor Follow the path: /Assets/ScriptableObjects/Crafting/Recipes/ Find a necessarry crafting recipe. Open the recipe. Make sure to remove this recipe from any ways to learn this recipe. You can skip this step - unit tests will help you to find missing asset references. You can check Player's PlayerCrafting component. You can check recipe books. Press the \"Prepare for deletion\" button. Now you can safely delete this recipe. For example, RMB on the crafting recipe -> Delete How to create a new crafting category \u00b6 Open /UnityProject/Assets/Scripts/Systems/CraftingV2/RecipeCategory.cs Add a new category enum. Open the Unity Editor. Open the path: /Assets/ScriptableObjects/Crafting/Categories/ RMB -> Create -> ScriptableObjects -> Crafting -> CategoryAndIcon Choose RecipeCategory (the enum that was added at step #2). Choose CategoryIcon (usually they're located in /Assets/Recources/UI/CraftingCategoryIcons/). Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CategoryButtons/ Press RMB on the _BaseCategoryButton -> Create -> Prefab variant. Choose CategoryAndIcon that was created at the step #5. Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CraftingMenu.prefab Add your new category button to the CategoryButtonsPrefabs list (in the CraftingMenu script). How to delete a crafting category \u00b6 Open the Unity Editor. Make sure that there are no recipes that use this recipe category. Usually these recipes are located in the /Assets/ScriptableObjects/Crafting/Recipes/ yourcategory Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CraftingMenu.prefab Remove the category from CategoryButtonsPrefabs list (in the CraftingMenu script). Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CategoryButtons/ Find a necessary category button (look at the CategoryAndIcon field in the CategoryButtonScript component). Delete the category button. Follow the path: /Assets/ScriptableObjects/Crafting/Categories/ Find a necessary CategoryAndIcon (look at the RecipeCategory field). Delete the necessary CategoryAndIcon. Follow the path: /Assets/Scripts/Systems/CraftingV2/RecipeCategory.cs Remove the necessary recipe category enum value. How to create a new recipe book. \u00b6 Open the Unity Editor. Follow the path: /Assets/Prefabs/Items/Bureaucracy/RecipeBook/ RMB on the _Base_RecipeBook -> Create -> Prefab variant. Add recipes to the ContainsRecipes list of the RecipeBook component. Optionally, add remarks, edit book's settings. Optionally, add the book on a map. FAQ \u00b6 The singleton has nulls or some recipes in the singleton have a wrong index. What should I do? \u00b6 Don't worry, you don't have to manually fix the singleton or a recipes' index. Open the Unity Editor. Open the CraftingRecipeSingleton. Press the button \"Remove nulls and fix recipes' indexes\" below. Reagents don't work as ingredients. What should I do? \u00b6 Perhaps the ChemistryReagentsSO singleton has reagents with a wrong index. You also probably can notice an error in the console that says something about it. Open the Unity Editor. Open the ChemistryReagentsSO singleton. Press the button \"Fix reagents' indexes\" below.","title":"Crafting System"},{"location":"development/Crafting-System/#crafting-system","text":"This page will help you to create/remove recipes/categories. Any detailed information about the system available in the system's documentation (in the code) or Unity Editor's tooltips. But you can ask any question about the system in Discord - just ping Lizurt#4269.","title":"Crafting System"},{"location":"development/Crafting-System/#how-to","text":"","title":"How to..."},{"location":"development/Crafting-System/#how-to-create-a-new-crafting-recipe","text":"Open the Unity Editor Follow the path: /Assets/ScriptableObjects/Crafting/Recipes/ Find a necessarry category to put a new recipe into. RMB -> Create -> ScriptableObjects -> Crafting -> CraftingRecipe Give the new recipe a name. Press the \"Add to the singleton if necessary\" button. Edit your new recipe freely(tooltips will help you). Add the opportunity for a player to learn this recipe. You can add the recipe to the default known recipes list in the PlayerCrafting component of the Player_V4 prefab. You can add the recipe to a recipe book.","title":"How to create a new crafting recipe"},{"location":"development/Crafting-System/#how-to-delete-a-crafting-recipe","text":"Open the Unity Editor Follow the path: /Assets/ScriptableObjects/Crafting/Recipes/ Find a necessarry crafting recipe. Open the recipe. Make sure to remove this recipe from any ways to learn this recipe. You can skip this step - unit tests will help you to find missing asset references. You can check Player's PlayerCrafting component. You can check recipe books. Press the \"Prepare for deletion\" button. Now you can safely delete this recipe. For example, RMB on the crafting recipe -> Delete","title":"How to delete a crafting recipe"},{"location":"development/Crafting-System/#how-to-create-a-new-crafting-category","text":"Open /UnityProject/Assets/Scripts/Systems/CraftingV2/RecipeCategory.cs Add a new category enum. Open the Unity Editor. Open the path: /Assets/ScriptableObjects/Crafting/Categories/ RMB -> Create -> ScriptableObjects -> Crafting -> CategoryAndIcon Choose RecipeCategory (the enum that was added at step #2). Choose CategoryIcon (usually they're located in /Assets/Recources/UI/CraftingCategoryIcons/). Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CategoryButtons/ Press RMB on the _BaseCategoryButton -> Create -> Prefab variant. Choose CategoryAndIcon that was created at the step #5. Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CraftingMenu.prefab Add your new category button to the CategoryButtonsPrefabs list (in the CraftingMenu script).","title":"How to create a new crafting category"},{"location":"development/Crafting-System/#how-to-delete-a-crafting-category","text":"Open the Unity Editor. Make sure that there are no recipes that use this recipe category. Usually these recipes are located in the /Assets/ScriptableObjects/Crafting/Recipes/ yourcategory Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CraftingMenu.prefab Remove the category from CategoryButtonsPrefabs list (in the CraftingMenu script). Follow the path: /Assets/Prefabs/UI/Tabs/Recources/Crafting/CategoryButtons/ Find a necessary category button (look at the CategoryAndIcon field in the CategoryButtonScript component). Delete the category button. Follow the path: /Assets/ScriptableObjects/Crafting/Categories/ Find a necessary CategoryAndIcon (look at the RecipeCategory field). Delete the necessary CategoryAndIcon. Follow the path: /Assets/Scripts/Systems/CraftingV2/RecipeCategory.cs Remove the necessary recipe category enum value.","title":"How to delete a crafting category"},{"location":"development/Crafting-System/#how-to-create-a-new-recipe-book","text":"Open the Unity Editor. Follow the path: /Assets/Prefabs/Items/Bureaucracy/RecipeBook/ RMB on the _Base_RecipeBook -> Create -> Prefab variant. Add recipes to the ContainsRecipes list of the RecipeBook component. Optionally, add remarks, edit book's settings. Optionally, add the book on a map.","title":"How to create a new recipe book."},{"location":"development/Crafting-System/#faq","text":"","title":"FAQ"},{"location":"development/Crafting-System/#the-singleton-has-nulls-or-some-recipes-in-the-singleton-have-a-wrong-index-what-should-i-do","text":"Don't worry, you don't have to manually fix the singleton or a recipes' index. Open the Unity Editor. Open the CraftingRecipeSingleton. Press the button \"Remove nulls and fix recipes' indexes\" below.","title":"The singleton has nulls or some recipes in the singleton have a wrong index. What should I do?"},{"location":"development/Crafting-System/#reagents-dont-work-as-ingredients-what-should-i-do","text":"Perhaps the ChemistryReagentsSO singleton has reagents with a wrong index. You also probably can notice an error in the console that says something about it. Open the Unity Editor. Open the ChemistryReagentsSO singleton. Press the button \"Fix reagents' indexes\" below.","title":"Reagents don't work as ingredients. What should I do?"},{"location":"development/Creating-Items-and-Objects/","text":"Creating Items and Objects \u00b6 Want to create a new item or object? Read on to find out how. Cheat Sheet \u00b6 Determine the best parent prefab for your object and create a prefab variant of it. See Picking the Best Parent Prefab Find a good place to put it in the folder structure. Fill in its ItemAttributes and Integrity settings. If creating clothing, create the cloth data asset and select it in the Clothing component. If creating a non-clothing item, set up the inhand sprites in the SpriteDataHandler component. In the hierarchy for the prefab, select the Sprite child object and set the Sprite Renderer sprite to an icon representing the object. Make sure the SpriteRenderer's sorting layer and order in layer are correct. Ensure the object's physics layer is correct. The child Sprite's physics layer can be left at default (but NOT the SpriteRenderer sorting layer). Edit the fields on the other components as necessary. Develop new components or modify the code for existing ones as needed. See Component Development Checklist Test! Don't forget to test the following common sources of issues: Test in multiplayer with at least 1 client and 1 server, trying to use the object as client and as server player. Test using Respawn Test with round restarts. Test on moving / rotating / rotated-before-joining shuttles. Items and Objects \u00b6 We usually call things \"items\" if they can be picked up, and \"objects\" if they can't. Prefabs, Prefab Variants, and you \u00b6 Prefabs are the Unity way of creating templates of objects that will be re-used several times in a scene or across several scenes, such as scenery, items or NPC's. Almost all prefabs in unitystation are (or eventually will be) prefab variants , which means they get their default settings / behavior from a parent prefab and have some of their own modifications on top of that. If you are familiar with DM, these work pretty much the same way as DM inheritance does. Any time the prefab variant's parents are changed, the variant will automatically update with those changes unless it has overridden the particular change with its own setting. Prefab variants are ESSENTIAL to unitystation because there are lots of objects and items in the game. If we had to edit each one individually every time there was a change to the way certain \"kinds\" of objects should function, it would be a huge time sink. They also naturally fit into the same structure as the DM inheritance in tgstation. For example, in the past we have had to make changes to how lockers work, which required manually going in and modifying the 30+ different locker prefabs that had been created. If we had instead set up lockers to be prefab variants of a common \"Locker\" parent, we would only have to modify the parent prefab and all of the 30+ variants would automatically receive these new changes. This can get very tedious and demotivating, so let's try to make sure we never have to do these sorts of things ever again. To create a prefab, you first need to determine the best parent prefab to use. You shouldn't create a parentless prefab unless you really know what you're doing. Picking the Best Parent Prefab \u00b6 This is a bit of an art. The goal here is to pick a parent that Has the stuff your prefab needs already, no more and no less. Logically makes sense as a child, so if the parent's configuration is updated you would want your prefab to gain those updates as well. Tips for how to find the best parent prefab: Try to match the hier structure in the tgstation DM codebase. Each node in the hier string should roughly match up with a node in the prefab variant hierarchy. For example, plasteel tiles have a hier of /obj/item/stack/tile/plasteel, so the best place in the prefab variant hierarchy for this object would be something like Item.prefab > Stackable.prefab > Tile.prefab > Plasteel.prefab. Find an existing prefab that is similar to what you want to create, then... Go to the top of the prefab to see its parent. If the parent makes sense for your prefab, you can create your prefab as a variant of the parent or simply duplicate the similar prefab and rename the duplicate. If the parent doesn't make sense as a parent for your prefab, continue up the hierarchy, check its parent, its parent's parent, etc...until you find a good fit. If your prefab is actually a special case of this existing prefab, use this existing prefab as the parent! If unsure, the safest option is to use one of the base prefabs: One of the \"Clothing\" prefabs, such as Beltwear, Earwear, Eyewear, etc... if your prefab will be something wearable. Item if your prefab can be picked up Object if your prefab can't be picked up It's usually best to err on the side of having a more \"basic\" parent. Don't choose a parent just because it has what you want. Keep in mind, if someone changes the parent, those changes will be applied to your variant ! However, if you create a lot of prefabs under a top-level parent (like Item), it can make certain changes very tedious because none of them share any configuration ! Therefore it's best to try to structure your prefabs so that similar prefabs have the same parent. If you find yourself in a situation where you need to edit a lot of prefabs all together, you should consider restructuring the prefabs to share a common parent or creating a shared configuration in the form of a ScriptableObject (advanced topic, not covered here) . If you want to learn more about ScriptableObjects, here's the video that got us all excited about them . For example, I want to create a new belt. I found the \"Toolbelt\", see that its parent is \"Belt\", so I create a variant of that as demonstrated below. Here's a different example. I want to create a Janitor Belt that is populated with a clown horn. I found the \"Janitor Belt\", and I know I want mine to be exactly the same as this but with some initial items rather than nothing, so I'll create a variant of the Toolbelt as shown below. Where to Put Your New Prefab \u00b6 Use your best judgement, but in general your new prefab should usually go in the same folder as the other prefab variants of its parent. Your prefab will need to be somewhere under a folder called \"Prefab\", otherwise it won't be spawnable in game. Clothing \u00b6 If your item is something that can be worn, it needs to have sprites defined for how it looks on the player. You do this by creating a clothing data asset. You can set this up like so: Find the corresponding sprite sheet for your item under Textures/clothing. Right click > Create > Scriptable Objects > HeadsetData (for headsets), BeltData (for belts), ContainerData (for backpacks), or ClothData (for everything else). Fill in the fields under Base: Equipped - sprite sheet for how it looks when worn In Hands Left - sprite sheet for how it looks when in left hand In Hands Right - sprite sheet for how it looks when in right hand Item Icon - icon for this item when it's in inventory or dropped in the world. In your prefab's Clothing component, select this asset you just created. It's usually recommended to create a subfolder to hold your clothing asset and its associated sprites. Make sure to move the corresponding json file for the sprite sheet along with the sprite sheet itself. For reference, see any of the assets created under Textures/clothing, such as Textures/clothing/head/beret/beret.asset Non-clothing Hand Sprites \u00b6 If you're creating an item that isn't clothing, you still need to define what it looks like when in hand. You can leave this blank, but we strongly encourage you to set this up as it will still need to be done eventually. To do this, go to the SpriteDataHandler component, expand Sprite List, set element 0 to the left hand sprite sheet and element 1 to the right hand sprite sheet and press SetUpSheet button . For reference, see another prefab which already does this, such as the ID card prefab (search \"ID t:Prefab\"). Layers \u00b6 There are 2 kinds of layers - physics layers (used to determine what should collide with each other) and sorting layers (used to determine what should be drawn on top). Order in layer is a tiebreaker for things in the same sorting layer. When creating a new object, you must ensure the prefab's root object has the correct physics layer (top right in the Inspector) based on what that object is. If you know of an object which functions similarly, simply use the same physics layer as it. Otherwise, refer to the physics layer reference here. Additionally, you must ensure the Sprite's SpriteRenderer has the correct sorting layer and order in layer . Sorting layer should generally match the kind of object it is (check other similar objects if you aren't sure), and order in layer should just be an arbitrary value that doesn't match any other objects' order in layer within that sorting layer (otherwise the order will be arbitrary and the objects might flicker between each other). In the future we might make it automatic via a script, so just do your best to pick a random number for order in layer. Working with Components \u00b6 Components define how the prefab will behave. We have a lot of them! If one doesn't suit your needs, you can develop new functionality in it or even develop your own This section discusses some commonly used components to give you an idea of how to configure them and how components work in general. If you aren't sure what a field does, mouse over its name to view its tooltip (if it has one). We try to be consistent about adding tooltips, but sometimes you might need to open up the component script or ask on Discord to better understand it. We are constantly working to make our components and prefabs more user-friendly! ItemAttributes \u00b6 This defines the basic characteristics of an item (though it is also used on some objects at the moment). The component exposes the following fields, they're mostly self explanatory: * Item Description: A string describing the item. * Item Name: The name of the item. * Size: The size of the item. * Initial Traits: Read about Traits * Damage and throw stats, affect throw speed, range and damage in various scenarios Integrity \u00b6 This defines an object's response to damage. Some fields: * Armor - an object's protection against different types of damage. Works the same as the DM codebase. * Resistances - an object's resistances or weaknesses to certain things. Works the same as ResistanceFlags in the DM codebase. * Heat Resistance - below this temperature object will take no damage from heat exposure. ItemStorage \u00b6 This allows an object to store items. It defines what slots the storage has, what is allowed to fit, and what initial contents it spawns with. See the Inventory System documentation for details. Pickupable \u00b6 The Pickupable component allows an item to be picked up. Contains some additional server-side functionality for predicting the success or failure of an attempt to grab the item. Untouchables \u00b6 Some components should almost never be messed with! You will find these on almost all parent prefabs so you should never have to think about them. Network Identity \u00b6 Don't touch this! This is an essential component for working with Mirror Networking It ensures that the GameObject has a unique identity (called the Network Instance Id) and is synced across clients and servers, and as such most GameObject used in UnityStation will need a Network Identity component. The Network Identity component only has two toggleable properties: Server Only and Local Player Authority. References: * https://docs.unity3d.com/Manual/UNet.html * https://docs.unity3d.com/Manual/class-NetworkIdentity.html * https://docs.unity3d.com/Manual/UNetConcepts.html * https://docs.unity3d.com/Manual/UNetAuthority.html * https://docs.unity3d.com/Manual/UNetUsingHLAPI.html Custom Net Transform \u00b6 Don't touch this! This allows items to be moved in various ways, such as being pushed, appear and disappear. References: * https://docs.unity3d.com/Manual/class-NetworkBehaviour.html * https://docs.unity3d.com/ScriptReference/Networking.NetworkBehaviour.html Putting your object in the game \u00b6 The easiest way to make your object show up is to create it using the Dev Spawner in game (top right, Dev, Dev Spawner, search for your prefab by name). You can also map your object into the scene. This requires adding it to the tile palette Once you've done that, you can map it into the scene . A note about changing a prefab \u00b6 Prefabs in the scene (prefab instances) will be independent. This means that if you make any changes to it within the scene, no other prefab will be changed. However, you might want to apply a change to all prefabs in your scene. To assist you, the inspector will show an additional three buttons at the top of the inspector when you inspect a prefab: select, revert and apply. 1. Select will select the prefab asset in your assets. 2. Revert will revert any changes to that of the prefab in your assets. 3. Apply will apply any changes to that prefab to all prefabs of the same type. Any changes made to the asset prefab will also apply to all prefabs instantiated from it. References: * https://docs.unity3d.com/Manual/Prefabs.html * https://docs.unity3d.com/Manual/InstantiatingPrefabs.html * https://unity3d.com/learn/tutorials/topics/interface-essentials/prefabs-concept-usage Testing \u00b6 Spawn your item and play around with it as client and server. Don't forget to test the following common sources of issues: * Test in multiplayer with at least 1 client and 1 server, trying to use the object as client and as server player. * Test using Respawn * Test with round restarts. * Test on moving / rotating / rotated-before-joining shuttles.","title":"Creating Items and Objects"},{"location":"development/Creating-Items-and-Objects/#creating-items-and-objects","text":"Want to create a new item or object? Read on to find out how.","title":"Creating Items and Objects"},{"location":"development/Creating-Items-and-Objects/#cheat-sheet","text":"Determine the best parent prefab for your object and create a prefab variant of it. See Picking the Best Parent Prefab Find a good place to put it in the folder structure. Fill in its ItemAttributes and Integrity settings. If creating clothing, create the cloth data asset and select it in the Clothing component. If creating a non-clothing item, set up the inhand sprites in the SpriteDataHandler component. In the hierarchy for the prefab, select the Sprite child object and set the Sprite Renderer sprite to an icon representing the object. Make sure the SpriteRenderer's sorting layer and order in layer are correct. Ensure the object's physics layer is correct. The child Sprite's physics layer can be left at default (but NOT the SpriteRenderer sorting layer). Edit the fields on the other components as necessary. Develop new components or modify the code for existing ones as needed. See Component Development Checklist Test! Don't forget to test the following common sources of issues: Test in multiplayer with at least 1 client and 1 server, trying to use the object as client and as server player. Test using Respawn Test with round restarts. Test on moving / rotating / rotated-before-joining shuttles.","title":"Cheat Sheet"},{"location":"development/Creating-Items-and-Objects/#items-and-objects","text":"We usually call things \"items\" if they can be picked up, and \"objects\" if they can't.","title":"Items and Objects"},{"location":"development/Creating-Items-and-Objects/#prefabs-prefab-variants-and-you","text":"Prefabs are the Unity way of creating templates of objects that will be re-used several times in a scene or across several scenes, such as scenery, items or NPC's. Almost all prefabs in unitystation are (or eventually will be) prefab variants , which means they get their default settings / behavior from a parent prefab and have some of their own modifications on top of that. If you are familiar with DM, these work pretty much the same way as DM inheritance does. Any time the prefab variant's parents are changed, the variant will automatically update with those changes unless it has overridden the particular change with its own setting. Prefab variants are ESSENTIAL to unitystation because there are lots of objects and items in the game. If we had to edit each one individually every time there was a change to the way certain \"kinds\" of objects should function, it would be a huge time sink. They also naturally fit into the same structure as the DM inheritance in tgstation. For example, in the past we have had to make changes to how lockers work, which required manually going in and modifying the 30+ different locker prefabs that had been created. If we had instead set up lockers to be prefab variants of a common \"Locker\" parent, we would only have to modify the parent prefab and all of the 30+ variants would automatically receive these new changes. This can get very tedious and demotivating, so let's try to make sure we never have to do these sorts of things ever again. To create a prefab, you first need to determine the best parent prefab to use. You shouldn't create a parentless prefab unless you really know what you're doing.","title":"Prefabs, Prefab Variants, and you"},{"location":"development/Creating-Items-and-Objects/#picking-the-best-parent-prefab","text":"This is a bit of an art. The goal here is to pick a parent that Has the stuff your prefab needs already, no more and no less. Logically makes sense as a child, so if the parent's configuration is updated you would want your prefab to gain those updates as well. Tips for how to find the best parent prefab: Try to match the hier structure in the tgstation DM codebase. Each node in the hier string should roughly match up with a node in the prefab variant hierarchy. For example, plasteel tiles have a hier of /obj/item/stack/tile/plasteel, so the best place in the prefab variant hierarchy for this object would be something like Item.prefab > Stackable.prefab > Tile.prefab > Plasteel.prefab. Find an existing prefab that is similar to what you want to create, then... Go to the top of the prefab to see its parent. If the parent makes sense for your prefab, you can create your prefab as a variant of the parent or simply duplicate the similar prefab and rename the duplicate. If the parent doesn't make sense as a parent for your prefab, continue up the hierarchy, check its parent, its parent's parent, etc...until you find a good fit. If your prefab is actually a special case of this existing prefab, use this existing prefab as the parent! If unsure, the safest option is to use one of the base prefabs: One of the \"Clothing\" prefabs, such as Beltwear, Earwear, Eyewear, etc... if your prefab will be something wearable. Item if your prefab can be picked up Object if your prefab can't be picked up It's usually best to err on the side of having a more \"basic\" parent. Don't choose a parent just because it has what you want. Keep in mind, if someone changes the parent, those changes will be applied to your variant ! However, if you create a lot of prefabs under a top-level parent (like Item), it can make certain changes very tedious because none of them share any configuration ! Therefore it's best to try to structure your prefabs so that similar prefabs have the same parent. If you find yourself in a situation where you need to edit a lot of prefabs all together, you should consider restructuring the prefabs to share a common parent or creating a shared configuration in the form of a ScriptableObject (advanced topic, not covered here) . If you want to learn more about ScriptableObjects, here's the video that got us all excited about them . For example, I want to create a new belt. I found the \"Toolbelt\", see that its parent is \"Belt\", so I create a variant of that as demonstrated below. Here's a different example. I want to create a Janitor Belt that is populated with a clown horn. I found the \"Janitor Belt\", and I know I want mine to be exactly the same as this but with some initial items rather than nothing, so I'll create a variant of the Toolbelt as shown below.","title":"Picking the Best Parent Prefab"},{"location":"development/Creating-Items-and-Objects/#where-to-put-your-new-prefab","text":"Use your best judgement, but in general your new prefab should usually go in the same folder as the other prefab variants of its parent. Your prefab will need to be somewhere under a folder called \"Prefab\", otherwise it won't be spawnable in game.","title":"Where to Put Your New Prefab"},{"location":"development/Creating-Items-and-Objects/#clothing","text":"If your item is something that can be worn, it needs to have sprites defined for how it looks on the player. You do this by creating a clothing data asset. You can set this up like so: Find the corresponding sprite sheet for your item under Textures/clothing. Right click > Create > Scriptable Objects > HeadsetData (for headsets), BeltData (for belts), ContainerData (for backpacks), or ClothData (for everything else). Fill in the fields under Base: Equipped - sprite sheet for how it looks when worn In Hands Left - sprite sheet for how it looks when in left hand In Hands Right - sprite sheet for how it looks when in right hand Item Icon - icon for this item when it's in inventory or dropped in the world. In your prefab's Clothing component, select this asset you just created. It's usually recommended to create a subfolder to hold your clothing asset and its associated sprites. Make sure to move the corresponding json file for the sprite sheet along with the sprite sheet itself. For reference, see any of the assets created under Textures/clothing, such as Textures/clothing/head/beret/beret.asset","title":"Clothing"},{"location":"development/Creating-Items-and-Objects/#non-clothing-hand-sprites","text":"If you're creating an item that isn't clothing, you still need to define what it looks like when in hand. You can leave this blank, but we strongly encourage you to set this up as it will still need to be done eventually. To do this, go to the SpriteDataHandler component, expand Sprite List, set element 0 to the left hand sprite sheet and element 1 to the right hand sprite sheet and press SetUpSheet button . For reference, see another prefab which already does this, such as the ID card prefab (search \"ID t:Prefab\").","title":"Non-clothing Hand Sprites"},{"location":"development/Creating-Items-and-Objects/#layers","text":"There are 2 kinds of layers - physics layers (used to determine what should collide with each other) and sorting layers (used to determine what should be drawn on top). Order in layer is a tiebreaker for things in the same sorting layer. When creating a new object, you must ensure the prefab's root object has the correct physics layer (top right in the Inspector) based on what that object is. If you know of an object which functions similarly, simply use the same physics layer as it. Otherwise, refer to the physics layer reference here. Additionally, you must ensure the Sprite's SpriteRenderer has the correct sorting layer and order in layer . Sorting layer should generally match the kind of object it is (check other similar objects if you aren't sure), and order in layer should just be an arbitrary value that doesn't match any other objects' order in layer within that sorting layer (otherwise the order will be arbitrary and the objects might flicker between each other). In the future we might make it automatic via a script, so just do your best to pick a random number for order in layer.","title":"Layers"},{"location":"development/Creating-Items-and-Objects/#working-with-components","text":"Components define how the prefab will behave. We have a lot of them! If one doesn't suit your needs, you can develop new functionality in it or even develop your own This section discusses some commonly used components to give you an idea of how to configure them and how components work in general. If you aren't sure what a field does, mouse over its name to view its tooltip (if it has one). We try to be consistent about adding tooltips, but sometimes you might need to open up the component script or ask on Discord to better understand it. We are constantly working to make our components and prefabs more user-friendly!","title":"Working with Components"},{"location":"development/Creating-Items-and-Objects/#itemattributes","text":"This defines the basic characteristics of an item (though it is also used on some objects at the moment). The component exposes the following fields, they're mostly self explanatory: * Item Description: A string describing the item. * Item Name: The name of the item. * Size: The size of the item. * Initial Traits: Read about Traits * Damage and throw stats, affect throw speed, range and damage in various scenarios","title":"ItemAttributes"},{"location":"development/Creating-Items-and-Objects/#integrity","text":"This defines an object's response to damage. Some fields: * Armor - an object's protection against different types of damage. Works the same as the DM codebase. * Resistances - an object's resistances or weaknesses to certain things. Works the same as ResistanceFlags in the DM codebase. * Heat Resistance - below this temperature object will take no damage from heat exposure.","title":"Integrity"},{"location":"development/Creating-Items-and-Objects/#itemstorage","text":"This allows an object to store items. It defines what slots the storage has, what is allowed to fit, and what initial contents it spawns with. See the Inventory System documentation for details.","title":"ItemStorage"},{"location":"development/Creating-Items-and-Objects/#pickupable","text":"The Pickupable component allows an item to be picked up. Contains some additional server-side functionality for predicting the success or failure of an attempt to grab the item.","title":"Pickupable"},{"location":"development/Creating-Items-and-Objects/#untouchables","text":"Some components should almost never be messed with! You will find these on almost all parent prefabs so you should never have to think about them.","title":"Untouchables"},{"location":"development/Creating-Items-and-Objects/#network-identity","text":"Don't touch this! This is an essential component for working with Mirror Networking It ensures that the GameObject has a unique identity (called the Network Instance Id) and is synced across clients and servers, and as such most GameObject used in UnityStation will need a Network Identity component. The Network Identity component only has two toggleable properties: Server Only and Local Player Authority. References: * https://docs.unity3d.com/Manual/UNet.html * https://docs.unity3d.com/Manual/class-NetworkIdentity.html * https://docs.unity3d.com/Manual/UNetConcepts.html * https://docs.unity3d.com/Manual/UNetAuthority.html * https://docs.unity3d.com/Manual/UNetUsingHLAPI.html","title":"Network Identity"},{"location":"development/Creating-Items-and-Objects/#custom-net-transform","text":"Don't touch this! This allows items to be moved in various ways, such as being pushed, appear and disappear. References: * https://docs.unity3d.com/Manual/class-NetworkBehaviour.html * https://docs.unity3d.com/ScriptReference/Networking.NetworkBehaviour.html","title":"Custom Net Transform"},{"location":"development/Creating-Items-and-Objects/#putting-your-object-in-the-game","text":"The easiest way to make your object show up is to create it using the Dev Spawner in game (top right, Dev, Dev Spawner, search for your prefab by name). You can also map your object into the scene. This requires adding it to the tile palette Once you've done that, you can map it into the scene .","title":"Putting your object in the game"},{"location":"development/Creating-Items-and-Objects/#a-note-about-changing-a-prefab","text":"Prefabs in the scene (prefab instances) will be independent. This means that if you make any changes to it within the scene, no other prefab will be changed. However, you might want to apply a change to all prefabs in your scene. To assist you, the inspector will show an additional three buttons at the top of the inspector when you inspect a prefab: select, revert and apply. 1. Select will select the prefab asset in your assets. 2. Revert will revert any changes to that of the prefab in your assets. 3. Apply will apply any changes to that prefab to all prefabs of the same type. Any changes made to the asset prefab will also apply to all prefabs instantiated from it. References: * https://docs.unity3d.com/Manual/Prefabs.html * https://docs.unity3d.com/Manual/InstantiatingPrefabs.html * https://unity3d.com/learn/tutorials/topics/interface-essentials/prefabs-concept-usage","title":"A note about changing a prefab"},{"location":"development/Creating-Items-and-Objects/#testing","text":"Spawn your item and play around with it as client and server. Don't forget to test the following common sources of issues: * Test in multiplayer with at least 1 client and 1 server, trying to use the object as client and as server player. * Test using Respawn * Test with round restarts. * Test on moving / rotating / rotated-before-joining shuttles.","title":"Testing"},{"location":"development/Creating-and-Using-Tile-Palettes/","text":"Creating and Using Tile Pallettes \u00b6 This guide will focus on creating and adding tile assets to tile palettes and using the LevelBrush to modify/create a tilemap. Creating a Tile Asset with Prefab \u00b6 To create a new tile asset that can be used within a tile palette we must first copy/create a tile asset. It is okay to copy a pre-existing one as all tile assets are tied to the same script. For this guide we will create a duplicate of the AirLock tile asset. * To start, copy one of the tile assets in the Unity station\\unitystation-develop\\UnityProject\\Assets\\Tilemaps\\Tiles\\Doors folder: Next we go into Unity and select the proper prefab on the new tile asset: The tile asset has now been fully created and is usable with tile palettes. As long as this method is used a preview sprite is automatically created. Adding Tile Assets to Tile Palette \u00b6 In order to use the LevelBrush with new tiles it is essential to add the tile to the appropriate tile palette. * Go to Window > Tile Palette : You should see a window similar to this one: Click Canisters and Tanks and select the appropriate tile palette. For the next step we will use Doors : For this step the AirLock tile has been removed. We can add it back by selecting the arrow in the toolbar, then clicking Edit , then selecting the empty tile space and finally selecting the AirLock tile in the Inspector: Remember to deselect Edit once the tile has been added to ensure the palette is finalized. Note: If you get this error: Unsupported texture format - needs to be ARGB32, RGBA32, RGB24, Alpha8 or one of float formats then follow these steps: \u00b6 Delete the asset Find the sprite sheets that your prefab uses in the Project Files and select them to access the Import Settings Make sure Read / Write is enabled and scroll to the bottom and turn off compression (usually it is set to normal so set it to none) Apply and then retry the process Painting Using a Tile Palette \u00b6 Painting tiles using a palette is relatively easy due to the LevelBrush. * Go to Window > Tile Palette : You should see a window similar to this one: Click Canisters and Tanks and select the appropriate tile palette. For the next step we will use Floors : Now all you have to do is select the paintbrush in the toolbar as well as the tile you wish to paint with and draw on the tilemap:","title":"Creating and Using Tile Pallettes"},{"location":"development/Creating-and-Using-Tile-Palettes/#creating-and-using-tile-pallettes","text":"This guide will focus on creating and adding tile assets to tile palettes and using the LevelBrush to modify/create a tilemap.","title":"Creating and Using Tile Pallettes"},{"location":"development/Creating-and-Using-Tile-Palettes/#creating-a-tile-asset-with-prefab","text":"To create a new tile asset that can be used within a tile palette we must first copy/create a tile asset. It is okay to copy a pre-existing one as all tile assets are tied to the same script. For this guide we will create a duplicate of the AirLock tile asset. * To start, copy one of the tile assets in the Unity station\\unitystation-develop\\UnityProject\\Assets\\Tilemaps\\Tiles\\Doors folder: Next we go into Unity and select the proper prefab on the new tile asset: The tile asset has now been fully created and is usable with tile palettes. As long as this method is used a preview sprite is automatically created.","title":"Creating a Tile Asset with Prefab"},{"location":"development/Creating-and-Using-Tile-Palettes/#adding-tile-assets-to-tile-palette","text":"In order to use the LevelBrush with new tiles it is essential to add the tile to the appropriate tile palette. * Go to Window > Tile Palette : You should see a window similar to this one: Click Canisters and Tanks and select the appropriate tile palette. For the next step we will use Doors : For this step the AirLock tile has been removed. We can add it back by selecting the arrow in the toolbar, then clicking Edit , then selecting the empty tile space and finally selecting the AirLock tile in the Inspector: Remember to deselect Edit once the tile has been added to ensure the palette is finalized.","title":"Adding Tile Assets to Tile Palette"},{"location":"development/Creating-and-Using-Tile-Palettes/#note-if-you-get-this-error-unsupported-texture-format-needs-to-be-argb32-rgba32-rgb24-alpha8-or-one-of-float-formats-then-follow-these-steps","text":"Delete the asset Find the sprite sheets that your prefab uses in the Project Files and select them to access the Import Settings Make sure Read / Write is enabled and scroll to the bottom and turn off compression (usually it is set to normal so set it to none) Apply and then retry the process","title":"Note: If you get this error: Unsupported texture format - needs to be ARGB32, RGBA32, RGB24, Alpha8 or one of float formats then follow these steps:"},{"location":"development/Creating-and-Using-Tile-Palettes/#painting-using-a-tile-palette","text":"Painting tiles using a palette is relatively easy due to the LevelBrush. * Go to Window > Tile Palette : You should see a window similar to this one: Click Canisters and Tanks and select the appropriate tile palette. For the next step we will use Floors : Now all you have to do is select the paintbrush in the toolbar as well as the tile you wish to paint with and draw on the tilemap:","title":"Painting Using a Tile Palette"},{"location":"development/Development-Gotchas-and-Common-Mistakes/","text":"Development Gotchas and Common Mistakes \u00b6 Lists of things that we expect in your PRs, and common mistakes / things to look out for when developing and testing. PR Acceptance \u00b6 Code should follow our Development Standards Code should compile without new errors or warnings. PR should be tested in editor (most PRs should be tested hosting in editor and joining in a standalone build). Any new or changed components should follow the Component Development Checklist Any new objects / items follow the Creating Items and Objects Guide (especially concerning the use of prefab variants) Common Issues \u00b6 Your changes break... when there's 2 clients (rather than just 1 host player and 1 client). Testing with a local headless server can make this more feasible if your computer can't handle running 3 full instances of the game when the round restarts (try Networking > Restart Round to quickly restart) on moving matrices or when matrices rotate when crossing matrices or engaging with the feature across matrices You forgot to think about how an object should work when it is in inventory. You depended on Awake() being called before mirror hooks (SyncVar hooks, OnStartClient, OnStartServer), even though Mirror doesn't guarantee that (this often is the source of NREs). See SyncVar Best Practices You didn't use syncvars as per our recommendations. See SyncVar Best Practices Debugging \u00b6 If you're getting an error spammed in the logs, make sure to check the point where the error spamming begins to see if there's some other error that is triggering the spammed error. Oftentimes the root cause of a spammed error is some other error that only happened once.","title":"Development Gotchas and Common Mistakes"},{"location":"development/Development-Gotchas-and-Common-Mistakes/#development-gotchas-and-common-mistakes","text":"Lists of things that we expect in your PRs, and common mistakes / things to look out for when developing and testing.","title":"Development Gotchas and Common Mistakes"},{"location":"development/Development-Gotchas-and-Common-Mistakes/#pr-acceptance","text":"Code should follow our Development Standards Code should compile without new errors or warnings. PR should be tested in editor (most PRs should be tested hosting in editor and joining in a standalone build). Any new or changed components should follow the Component Development Checklist Any new objects / items follow the Creating Items and Objects Guide (especially concerning the use of prefab variants)","title":"PR Acceptance"},{"location":"development/Development-Gotchas-and-Common-Mistakes/#common-issues","text":"Your changes break... when there's 2 clients (rather than just 1 host player and 1 client). Testing with a local headless server can make this more feasible if your computer can't handle running 3 full instances of the game when the round restarts (try Networking > Restart Round to quickly restart) on moving matrices or when matrices rotate when crossing matrices or engaging with the feature across matrices You forgot to think about how an object should work when it is in inventory. You depended on Awake() being called before mirror hooks (SyncVar hooks, OnStartClient, OnStartServer), even though Mirror doesn't guarantee that (this often is the source of NREs). See SyncVar Best Practices You didn't use syncvars as per our recommendations. See SyncVar Best Practices","title":"Common Issues"},{"location":"development/Development-Gotchas-and-Common-Mistakes/#debugging","text":"If you're getting an error spammed in the logs, make sure to check the point where the error spamming begins to see if there's some other error that is triggering the spammed error. Oftentimes the root cause of a spammed error is some other error that only happened once.","title":"Debugging"},{"location":"development/Development-Protips/","text":"Development Protips \u00b6 Various tips to help speed up development and share random knowledge that doesn't deserve its own page. Feel free to edit! General \u00b6 Familiarize yourself with our Development Gotchas Faster Building and Testing \u00b6 Only include the smallest station in the build / rotation. Including all maps will needlessly increase build / start times. In Lobby scene, edit NetworkManager , change Online Scene to PogStation (smallest map at the moment). Edit Assets/StreamingAssets/maps.json , removing all but PogStation from lowPopMaps When you build, uncheck all but StartUp, Lobby, and PogStation Don't commit these changes.","title":"Development Protips"},{"location":"development/Development-Protips/#development-protips","text":"Various tips to help speed up development and share random knowledge that doesn't deserve its own page. Feel free to edit!","title":"Development Protips"},{"location":"development/Development-Protips/#general","text":"Familiarize yourself with our Development Gotchas","title":"General"},{"location":"development/Development-Protips/#faster-building-and-testing","text":"Only include the smallest station in the build / rotation. Including all maps will needlessly increase build / start times. In Lobby scene, edit NetworkManager , change Online Scene to PogStation (smallest map at the moment). Edit Assets/StreamingAssets/maps.json , removing all but PogStation from lowPopMaps When you build, uncheck all but StartUp, Lobby, and PogStation Don't commit these changes.","title":"Faster Building and Testing"},{"location":"development/Directory-Structure/","text":"Directory Structure \u00b6 All main project files are contained in the /Assets folder. The structure can be viewed below: Current structure \u00b6 General \u00b6 Folder Description ../Tools/ All non-unity tools, such as coding style presets ../Docs/ All Github-rendered documentation except for the licence ../Travis/ All config files for our CI Travis Unity \u00b6 All Unity related files are contained in the /UnityProject folder. Folder Description /Assets/Animations Contains most of the animations used in-game /Assets/Data /Assets/Interface /Assets/Light2D Contains the Light2D plugin /Assets/Materials /Assets/ Plugin-Name Contains all assets and scripts from a certain plugin /Assets/Prefabs Contains prefabs for most things except for Objects /Assets/Resources Contains a lot of files that need to be loaded during the game /Assets/scenes Contains the different scenes (every scene is a separate folder at the moment) /Assets/Scripts Contains most of the scripts used in-game /Assets/Scripts/Editor Contains most of the scripts used in the editor /Assets/Scripts/Tilemaps Contains all Scripts for TMS /Assets/shaders /Assets/Sounds Contains most of the in-game sounds /Assets/Textures Contains a lot of sprites /Assets/UI Contains UI related content /Assets/Tilemaps Contains most things directly related to the TileMapSystem (TMS) */Resources/ This is a Resources folder, all content is acted upon as if it was in /Assets/Resources Todo \u00b6 The following things should be changed to get a more clear directory structure. plugins Folder Description /Assets/ Plugin-Name Contains all assets and scripts from a certain plugin /Assets/Scripts/ Plugin-Name Contains all Scripts from a certain plugin /Assets/Scripts/ Plugin-Name /Editor Contains all editor Scripts from a certain plugin Resources We should create a script to recursively load all resources from /Assets/Resources/ Sub-Folder for ex. RecursiveResourceLoad(Subfolder, Filename) This would enable us to put all resources in a subfolder under /Assets/Resources One Folder To Find Them, And In-Game Load them Eventually, even plugin related resources could be moved here, but that may require editing the scripts first, which may or may not be a good thing. Prefabs Almost all prefabs are networked and should/will need to be in a resource folder eventually. When a good standardised script is created to recursively load resources from a /Resources/Sub-Directory, we can move most, if not all, prefabs over to the resources directory","title":"Directory Structure"},{"location":"development/Directory-Structure/#directory-structure","text":"All main project files are contained in the /Assets folder. The structure can be viewed below:","title":"Directory Structure"},{"location":"development/Directory-Structure/#current-structure","text":"","title":"Current structure"},{"location":"development/Directory-Structure/#general","text":"Folder Description ../Tools/ All non-unity tools, such as coding style presets ../Docs/ All Github-rendered documentation except for the licence ../Travis/ All config files for our CI Travis","title":"General"},{"location":"development/Directory-Structure/#unity","text":"All Unity related files are contained in the /UnityProject folder. Folder Description /Assets/Animations Contains most of the animations used in-game /Assets/Data /Assets/Interface /Assets/Light2D Contains the Light2D plugin /Assets/Materials /Assets/ Plugin-Name Contains all assets and scripts from a certain plugin /Assets/Prefabs Contains prefabs for most things except for Objects /Assets/Resources Contains a lot of files that need to be loaded during the game /Assets/scenes Contains the different scenes (every scene is a separate folder at the moment) /Assets/Scripts Contains most of the scripts used in-game /Assets/Scripts/Editor Contains most of the scripts used in the editor /Assets/Scripts/Tilemaps Contains all Scripts for TMS /Assets/shaders /Assets/Sounds Contains most of the in-game sounds /Assets/Textures Contains a lot of sprites /Assets/UI Contains UI related content /Assets/Tilemaps Contains most things directly related to the TileMapSystem (TMS) */Resources/ This is a Resources folder, all content is acted upon as if it was in /Assets/Resources","title":"Unity"},{"location":"development/Directory-Structure/#todo","text":"The following things should be changed to get a more clear directory structure. plugins Folder Description /Assets/ Plugin-Name Contains all assets and scripts from a certain plugin /Assets/Scripts/ Plugin-Name Contains all Scripts from a certain plugin /Assets/Scripts/ Plugin-Name /Editor Contains all editor Scripts from a certain plugin Resources We should create a script to recursively load all resources from /Assets/Resources/ Sub-Folder for ex. RecursiveResourceLoad(Subfolder, Filename) This would enable us to put all resources in a subfolder under /Assets/Resources One Folder To Find Them, And In-Game Load them Eventually, even plugin related resources could be moved here, but that may require editing the scripts first, which may or may not be a good thing. Prefabs Almost all prefabs are networked and should/will need to be in a resource folder eventually. When a good standardised script is created to recursively load resources from a /Resources/Sub-Directory, we can move most, if not all, prefabs over to the resources directory","title":"Todo"},{"location":"development/Electricity-Development/","text":"Electricity Development \u00b6 The Idea: \u00b6 To simulate a simple version of real world circuits. We are assuming that 1 wire actually equals a 2 core wire and everything attached to the circuit is always wired in parallel. Also we need to avoid keeping lists of equipment, just like in the real world, the accumulative resistance of a circuit should apply its load on any power source at the point of connection. Direction of flow: \u00b6 The StructuredWired prefab and the IOElectricity interface accounts for a direction start and end indicator but electricity flows in both directions on unitystation(because we assume everything is wired in parallel). This will simplify the circuits. The IOElectricity Interface: \u00b6 The IOElectricity Interface can be added to any object that needs to be wired into a circuit. The wires (in WireConnect.cs ) search for all IOElectricity interfaces in the matrix on neighboring tiles and also on their tile position. The two connection points are then extracted and compared against the connection points of the wire doing the searching and if two connection points match up then the adjacent tile is added to a connected list on that wire, thus completing a connection. The method that does the searching can be seen here . And you can see how a connection is validated in the ConnectionMap.cs helper. To pass electricity call the ElectricityInput method with the current tick number (tick rate has not been set up yet and flow is just manually triggered by a context menu. More on that soon) IOElectricity.cs: \u00b6 using Electricity; using UnityEngine; /// <summary> /// For any object that can conduct electricity /// Handles the input/output path /// </summary> public interface IElectricityIO { /// <summary> /// The input path to the object/wire /// </summary> void ElectricityInput(int currentTick); /// <summary> /// The output path of the object/wire that is passing electricity through it /// </summary> void ElectricityOutput(int currentTick); /// <summary> /// Returns a struct with both connection points as members /// the connpoint connection positions are represented using 4 bits to indicate N S E W - 1 2 4 8 /// Corners can also be used i.e.: 5 = NE (1 + 4) = 0101 /// This is the edge of the location where the input connection enters the turf /// Use 0 for Machines or grills that can conduct electricity from being placed ontop of any wire configuration /// </summary> ConnPoint GetConnPoints(); //Return the GameObject that this interface is on GameObject GameObject(); } To see it in action: \u00b6 Checkout the electricity/dev branch Open the electricty_dev scene n Assets/Scenes/ Press play and spawn as any role In the Scene Window find the test area and zoom in to focus on the circuit: Find a StructuredWire in the hierarchy (anyone will do as electricity will flow in both directions): With one of the StructuredWire's selected go to the Inspector and find the WireConnect component and right click it then select GenerateTestCurrent option Now you should see all of the Yellow Sphere Gizmos show up which means that electricity has passed through that wire successfully: TODOS: \u00b6 Connect the test machines to the circuit (SMES, APC and Field Gen) using the IOElectricity Interface Calculate the total resistance of the circuit along with voltage and current Generate the electricity from the SMES Monitor the properties of the circuit","title":"Electricity Development"},{"location":"development/Electricity-Development/#electricity-development","text":"","title":"Electricity Development"},{"location":"development/Electricity-Development/#the-idea","text":"To simulate a simple version of real world circuits. We are assuming that 1 wire actually equals a 2 core wire and everything attached to the circuit is always wired in parallel. Also we need to avoid keeping lists of equipment, just like in the real world, the accumulative resistance of a circuit should apply its load on any power source at the point of connection.","title":"The Idea:"},{"location":"development/Electricity-Development/#direction-of-flow","text":"The StructuredWired prefab and the IOElectricity interface accounts for a direction start and end indicator but electricity flows in both directions on unitystation(because we assume everything is wired in parallel). This will simplify the circuits.","title":"Direction of flow:"},{"location":"development/Electricity-Development/#the-ioelectricity-interface","text":"The IOElectricity Interface can be added to any object that needs to be wired into a circuit. The wires (in WireConnect.cs ) search for all IOElectricity interfaces in the matrix on neighboring tiles and also on their tile position. The two connection points are then extracted and compared against the connection points of the wire doing the searching and if two connection points match up then the adjacent tile is added to a connected list on that wire, thus completing a connection. The method that does the searching can be seen here . And you can see how a connection is validated in the ConnectionMap.cs helper. To pass electricity call the ElectricityInput method with the current tick number (tick rate has not been set up yet and flow is just manually triggered by a context menu. More on that soon)","title":"The IOElectricity Interface:"},{"location":"development/Electricity-Development/#ioelectricitycs","text":"using Electricity; using UnityEngine; /// <summary> /// For any object that can conduct electricity /// Handles the input/output path /// </summary> public interface IElectricityIO { /// <summary> /// The input path to the object/wire /// </summary> void ElectricityInput(int currentTick); /// <summary> /// The output path of the object/wire that is passing electricity through it /// </summary> void ElectricityOutput(int currentTick); /// <summary> /// Returns a struct with both connection points as members /// the connpoint connection positions are represented using 4 bits to indicate N S E W - 1 2 4 8 /// Corners can also be used i.e.: 5 = NE (1 + 4) = 0101 /// This is the edge of the location where the input connection enters the turf /// Use 0 for Machines or grills that can conduct electricity from being placed ontop of any wire configuration /// </summary> ConnPoint GetConnPoints(); //Return the GameObject that this interface is on GameObject GameObject(); }","title":"IOElectricity.cs:"},{"location":"development/Electricity-Development/#to-see-it-in-action","text":"Checkout the electricity/dev branch Open the electricty_dev scene n Assets/Scenes/ Press play and spawn as any role In the Scene Window find the test area and zoom in to focus on the circuit: Find a StructuredWire in the hierarchy (anyone will do as electricity will flow in both directions): With one of the StructuredWire's selected go to the Inspector and find the WireConnect component and right click it then select GenerateTestCurrent option Now you should see all of the Yellow Sphere Gizmos show up which means that electricity has passed through that wire successfully:","title":"To see it in action:"},{"location":"development/Electricity-Development/#todos","text":"Connect the test machines to the circuit (SMES, APC and Field Gen) using the IOElectricity Interface Calculate the total resistance of the circuit along with voltage and current Generate the electricity from the SMES Monitor the properties of the circuit","title":"TODOS:"},{"location":"development/Emotes/","text":"EmoteSO, and how to work with it. \u00b6 Emotes add some mechanical depth into Unitystation's roleplaying aspects, not only do they describe actions that characters take; but they also can automate redundant behaviors for both players and developers. Emotes can be triggered by developers manually via code, or by players using the /me or * prefixes in chat, or by pressing \\ on your keyboard to access the quick emotes menu. Creating your first Emote \u00b6 There are three base emotes to choose from to create your emotes. EmoteSO (Basic) Gendered EmoteSO (Emote Sounds based on character identity) Species Specific Emote (Emotes that only trigger for specific species) To make things simple for ourselves, we'll start of by making a basic emote that will play a sound clip when triggered, and display flavour text. Emotes can be easily created by right clicking on the asset browser inside Unity, then searching for the type of Emote you'd like to create. After you've chosen the basic emote option, you'll be prompted to name your EmoteSO; we'll be naming it \"Merp\" for now. Note: Always create and place your scriptable objects in their correct folder. Check the Assets/ScriptableObjects/Emotes folder for examples on how to properly store SOs based on their types. After you've successfully created your emote, you will be able to see this in the inspector: Let's go through what each property does. Emote Name : This property can be treated as the ID of the Emote, and is what the EmoteActionManager to find and trigger emotes in various different scenarios. Mirror does not allow EmoteSOs to be networked in functions or syncvars, so we use the Emote Name to request emotes to be triggered over the network. Emote Icon : Used inside menus like the quick emote menu [ \\ ]. Requires Hands : If this emote requires hands, it will automatically fail if the creature's hands are found to be bound by handcuffs or similar items. It will also fail if the create has no hands at all. Allow Emote While In Crit : If the player reaches a critical condition (is dying), and this property is marked as false; The emote will automatically fail. However, if left enabled, it will trigger the Crit View Text instead. Is Audible Emote : Does this Emote emit sounds? If yes, any sounds inside Default Sounds will be played at random. View Text : This is the text that is displayed for others. Note that the view text will always start with your character's name before anything inputted inside this property. You Text : This is the text that is only viewable for your character when this emote is triggered. If left empty, the character will see the view text that others receive. Fail Text : Triggers when one of the emote's requirements are not met. For example, having bound hands while Requires Hands is active. Can only be seen by the character that is attempting to trigger this emote. Crit View Text : Special text for when the character is in critical condition, and Allow Emote While In Crit is active. Sounds Are Typed : Property that enables Emotes to check for the character's species, gender and pronouns. Does NOT work on the default EmoteSO, requires GenderedEmote or SpeciesSpecificEmote . Sounds must be defined manually for each species and gender/body type, default sounds are automatically ignored, even if no sounds are defined for a specific species/body type. Pitch Range : The random pitch range used for audio to add some variety on how emotes sound, the lower the X value is; the deeper the sound will become and vice versa with the Y. Allowed Player Types : Disallows special players from executing emotes when they're not supposed to. (Like Ghosts, AI, etc). Behaviors : Used to add extra functionality to emotes when successfully triggering. For our merp emote, we're going to simply fill in some basic text and a sound to play when we trigger the emote. And we're done. If you're triggering the emote from the server, and do not want to this emote to be viewable by other players. You can just simply cache a reference to this emote in one of your components and trigger it by doing EmoteActionManager.DoEmote(cachedEmote, targetPlayer) . However, in most cases, you will need to either allow clients to call these emotes, or you will need a way to quickly call an emote from the EmoteActionManager without having a direct access to it. We use EmoteListSO to keep track of all non-hidden emotes in the project, which can also be used by players to trigger emotes manually. To add your emote, simply find EmoteListSO under Assets/ScriptableObjects/Emotes , and add your new emote in there. Once it's in the list, you can now trigger the emote via code manually by going EmoteActionManager.DoEmote(\"merp\", targetPlayer) . You can now go in-game and test this emote. This covers all the basics for creating Emotes for unitystation. Advanced Behaviors for Emotes \u00b6 Emotes do not just play sounds and display text, they can also have extended behaviors associated with them that can help add extra mechanical flavour to roleplaying for players; while allowing developers to make their functionalities more re-usable. Emotes use a design pattern that containerizes all behaviors into their own classes that inherit from the IEmoteBehavior interface. This interface is automatically detected inside Unity under the behaviors sections in emotes, so you don't need to worry about writing anything extra or worry about any manual steps to add these behaviors onto emotes. You only have to focus on writing your behaviors then you can easily add them later with a simple click. To demonstrate how easy it is to create behaviors for emotes, We'll be creating a simple behavior for a Fart emote that releases gasses under the player when they trigger it. First, create a new script inside Assets/Scripts/ScriptableObjects/RP/EmoteBehaviors . We'll call this script \"ReleaseGasOnEmote\". Inside this new script/class, we'll extend it using the IEmoteBehavior interface. namespace ScriptableObjects.RP.EmoteBehaviors { public class ReleaseGasOnEmote : IEmoteBehavior { public GasSO GasSo; public float moles = 5; public float energy = 1000; public void Behave(GameObject actor) { GasMix.GetEnvironmentalGasMixForObject(actor.GetUniversalObjectPhysics()).AddGas(GasSo, moles, energy); } } } Once you're done, save and recompile the project; then the behavior can be added into any emote you want: It's that simple. You can adjust the values to your liking, and someone later on can reuse this same behavior for something like a burp emote that releases a different gas. For a more advanced/complex look into how emotes are utilized, check out how emotes are used for vomit and gasping interactions. Note: Never inherit from EmoteSO, always extend it via IEmoteBehavior .","title":"EmoteSO, and how to work with it."},{"location":"development/Emotes/#emoteso-and-how-to-work-with-it","text":"Emotes add some mechanical depth into Unitystation's roleplaying aspects, not only do they describe actions that characters take; but they also can automate redundant behaviors for both players and developers. Emotes can be triggered by developers manually via code, or by players using the /me or * prefixes in chat, or by pressing \\ on your keyboard to access the quick emotes menu.","title":"EmoteSO, and how to work with it."},{"location":"development/Emotes/#creating-your-first-emote","text":"There are three base emotes to choose from to create your emotes. EmoteSO (Basic) Gendered EmoteSO (Emote Sounds based on character identity) Species Specific Emote (Emotes that only trigger for specific species) To make things simple for ourselves, we'll start of by making a basic emote that will play a sound clip when triggered, and display flavour text. Emotes can be easily created by right clicking on the asset browser inside Unity, then searching for the type of Emote you'd like to create. After you've chosen the basic emote option, you'll be prompted to name your EmoteSO; we'll be naming it \"Merp\" for now. Note: Always create and place your scriptable objects in their correct folder. Check the Assets/ScriptableObjects/Emotes folder for examples on how to properly store SOs based on their types. After you've successfully created your emote, you will be able to see this in the inspector: Let's go through what each property does. Emote Name : This property can be treated as the ID of the Emote, and is what the EmoteActionManager to find and trigger emotes in various different scenarios. Mirror does not allow EmoteSOs to be networked in functions or syncvars, so we use the Emote Name to request emotes to be triggered over the network. Emote Icon : Used inside menus like the quick emote menu [ \\ ]. Requires Hands : If this emote requires hands, it will automatically fail if the creature's hands are found to be bound by handcuffs or similar items. It will also fail if the create has no hands at all. Allow Emote While In Crit : If the player reaches a critical condition (is dying), and this property is marked as false; The emote will automatically fail. However, if left enabled, it will trigger the Crit View Text instead. Is Audible Emote : Does this Emote emit sounds? If yes, any sounds inside Default Sounds will be played at random. View Text : This is the text that is displayed for others. Note that the view text will always start with your character's name before anything inputted inside this property. You Text : This is the text that is only viewable for your character when this emote is triggered. If left empty, the character will see the view text that others receive. Fail Text : Triggers when one of the emote's requirements are not met. For example, having bound hands while Requires Hands is active. Can only be seen by the character that is attempting to trigger this emote. Crit View Text : Special text for when the character is in critical condition, and Allow Emote While In Crit is active. Sounds Are Typed : Property that enables Emotes to check for the character's species, gender and pronouns. Does NOT work on the default EmoteSO, requires GenderedEmote or SpeciesSpecificEmote . Sounds must be defined manually for each species and gender/body type, default sounds are automatically ignored, even if no sounds are defined for a specific species/body type. Pitch Range : The random pitch range used for audio to add some variety on how emotes sound, the lower the X value is; the deeper the sound will become and vice versa with the Y. Allowed Player Types : Disallows special players from executing emotes when they're not supposed to. (Like Ghosts, AI, etc). Behaviors : Used to add extra functionality to emotes when successfully triggering. For our merp emote, we're going to simply fill in some basic text and a sound to play when we trigger the emote. And we're done. If you're triggering the emote from the server, and do not want to this emote to be viewable by other players. You can just simply cache a reference to this emote in one of your components and trigger it by doing EmoteActionManager.DoEmote(cachedEmote, targetPlayer) . However, in most cases, you will need to either allow clients to call these emotes, or you will need a way to quickly call an emote from the EmoteActionManager without having a direct access to it. We use EmoteListSO to keep track of all non-hidden emotes in the project, which can also be used by players to trigger emotes manually. To add your emote, simply find EmoteListSO under Assets/ScriptableObjects/Emotes , and add your new emote in there. Once it's in the list, you can now trigger the emote via code manually by going EmoteActionManager.DoEmote(\"merp\", targetPlayer) . You can now go in-game and test this emote. This covers all the basics for creating Emotes for unitystation.","title":"Creating your first Emote"},{"location":"development/Emotes/#advanced-behaviors-for-emotes","text":"Emotes do not just play sounds and display text, they can also have extended behaviors associated with them that can help add extra mechanical flavour to roleplaying for players; while allowing developers to make their functionalities more re-usable. Emotes use a design pattern that containerizes all behaviors into their own classes that inherit from the IEmoteBehavior interface. This interface is automatically detected inside Unity under the behaviors sections in emotes, so you don't need to worry about writing anything extra or worry about any manual steps to add these behaviors onto emotes. You only have to focus on writing your behaviors then you can easily add them later with a simple click. To demonstrate how easy it is to create behaviors for emotes, We'll be creating a simple behavior for a Fart emote that releases gasses under the player when they trigger it. First, create a new script inside Assets/Scripts/ScriptableObjects/RP/EmoteBehaviors . We'll call this script \"ReleaseGasOnEmote\". Inside this new script/class, we'll extend it using the IEmoteBehavior interface. namespace ScriptableObjects.RP.EmoteBehaviors { public class ReleaseGasOnEmote : IEmoteBehavior { public GasSO GasSo; public float moles = 5; public float energy = 1000; public void Behave(GameObject actor) { GasMix.GetEnvironmentalGasMixForObject(actor.GetUniversalObjectPhysics()).AddGas(GasSo, moles, energy); } } } Once you're done, save and recompile the project; then the behavior can be added into any emote you want: It's that simple. You can adjust the values to your liking, and someone later on can reuse this same behavior for something like a burp emote that releases a different gas. For a more advanced/complex look into how emotes are utilized, check out how emotes are used for vomit and gasping interactions. Note: Never inherit from EmoteSO, always extend it via IEmoteBehavior .","title":"Advanced Behaviors for Emotes"},{"location":"development/Helpful-Functions-Cheatsheet/","text":"Helpful Functions \u00b6 This is a complicated codebase and it can be difficult for developers to how to check something or get a reference to what they need. This is a cheat sheet of common functions to help you quickly find what you need so you don't waste a lot of time looking or reimplementing something that already exists. This is not intended to be a complete list of functions, but just the most commonly used ones. Please expand it or modify it as you see fit. Logging \u00b6 To write to the debug log: Logger.Log(string msg, Enum Category) To set the log level for different categories, go to unitystation/UnityProject/Assets/Scripts/Debug/Logger.cs, and modify private static readonly Dictionary<Category, Level> LogOverrides = new Dictionary<Category, Level>{ [Category.Unknown] = Level.Info, [Category.Movement] = Level.Error, [Category.Health] = Level.Trace, to your liking. Player \u00b6 Get player info by gameObject (serverside only) ConnectedPlayer player = PlayerList.Instance.Get(gameObject); if (player != ConnectedPlayer.Invalid) { //Do your thing. If gameObject is not found in PlayerList, ConnectedPlayer.Invalid is returned } Check if player has spawned bool playerSpawned = (PlayerManager.LocalPlayer != null); Check if local player is dead PlayerManager.LocalPlayerScript.playerHealth.IsDead Check if local player is in critical health PlayerManager.LocalPlayerScript.playerHealth.IsCrit functions related to items the player has equipped PlayerManager.Equipment Functions related to player taking actions with the server PlayerManager.LocalPlayerScript.NetworkActions Networking \u00b6 Check if this is the server, but only inside a NetworkBehaviour if(isServer) Check if this is the server CustomNetworkManager.Instance._isServer == false Matrix \u00b6 Get the room number of a tile (only enclosed spaces will be defined as a room. RoomNumber will = -1 if it is not a room) MatrixManager.GetMetaDataAt(Vector3Int.RoundToInt(world_position)).RoomNumber Other Useful Scripts \u00b6 The Assets\\Scripts\\Util folder also contains a bunch of useful scripts to help deal with common problems. Have a look through there and you might find something useful!","title":"Helpful Functions"},{"location":"development/Helpful-Functions-Cheatsheet/#helpful-functions","text":"This is a complicated codebase and it can be difficult for developers to how to check something or get a reference to what they need. This is a cheat sheet of common functions to help you quickly find what you need so you don't waste a lot of time looking or reimplementing something that already exists. This is not intended to be a complete list of functions, but just the most commonly used ones. Please expand it or modify it as you see fit.","title":"Helpful Functions"},{"location":"development/Helpful-Functions-Cheatsheet/#logging","text":"To write to the debug log: Logger.Log(string msg, Enum Category) To set the log level for different categories, go to unitystation/UnityProject/Assets/Scripts/Debug/Logger.cs, and modify private static readonly Dictionary<Category, Level> LogOverrides = new Dictionary<Category, Level>{ [Category.Unknown] = Level.Info, [Category.Movement] = Level.Error, [Category.Health] = Level.Trace, to your liking.","title":"Logging"},{"location":"development/Helpful-Functions-Cheatsheet/#player","text":"Get player info by gameObject (serverside only) ConnectedPlayer player = PlayerList.Instance.Get(gameObject); if (player != ConnectedPlayer.Invalid) { //Do your thing. If gameObject is not found in PlayerList, ConnectedPlayer.Invalid is returned } Check if player has spawned bool playerSpawned = (PlayerManager.LocalPlayer != null); Check if local player is dead PlayerManager.LocalPlayerScript.playerHealth.IsDead Check if local player is in critical health PlayerManager.LocalPlayerScript.playerHealth.IsCrit functions related to items the player has equipped PlayerManager.Equipment Functions related to player taking actions with the server PlayerManager.LocalPlayerScript.NetworkActions","title":"Player"},{"location":"development/Helpful-Functions-Cheatsheet/#networking","text":"Check if this is the server, but only inside a NetworkBehaviour if(isServer) Check if this is the server CustomNetworkManager.Instance._isServer == false","title":"Networking"},{"location":"development/Helpful-Functions-Cheatsheet/#matrix","text":"Get the room number of a tile (only enclosed spaces will be defined as a room. RoomNumber will = -1 if it is not a room) MatrixManager.GetMetaDataAt(Vector3Int.RoundToInt(world_position)).RoomNumber","title":"Matrix"},{"location":"development/Helpful-Functions-Cheatsheet/#other-useful-scripts","text":"The Assets\\Scripts\\Util folder also contains a bunch of useful scripts to help deal with common problems. Have a look through there and you might find something useful!","title":"Other Useful Scripts"},{"location":"development/Hosting-a-Server/","text":"Hosting a Server \u00b6 This documents how to run a server, either by hosting + playing or by running headlessly (no GUI). Listen server (play and host) \u00b6 You can host a game (so-called listen server) by checking the box when starting a game, which allows you to host + play. If you're using Unity Hub, go to Installations and launch game executable from there. Headless server (host on a dedicated machine) \u00b6 If you want to dedicate a machine for server hosting you can make game run in \"headless\" mode, meaning it runs without a UI. This mode is sometimes required for reproducing complex issues. For a headless server, there are a few options: 1. Run game executable from the command line: Unitystation-Server -batchmode -nographics -logfile log1.txt 2. If you're testing from Unity Editor: Check the \"Test Server\" box in Managers > GameData in the lobby scene before running (make sure to leave this unchecked in the client build though). You should be able to join using a client once it's started, you won't get any GUI. This is supposed to simulate running a headless server but we aren't 100% confident on it yet. We refer to it as \"fake headless\" Hosting on Google Cloud \u00b6 If you want to host from a remote server, you can do it via a Google Cloud Compute Engine instance. First of all, create an account or login to an existing one and start using your free 300 dollars credit. Go to Compute Engine section from the left navbar and start a project. Then, inside that project, create an instance. We recommend using Ubuntu 18.04 as the boot disk, and 10 GBs of space should be enough. If your server will host 20 or less players, you should choose first generation N1 for Machine Configuration because it costs less, but server will work slower. After your instance is created, search External IPs from the top and go there. Select Static and give it a name. Then, select Firewall from the left bar. This is where we will portforward. Add a new firewall rule and apply the settings below: You also need to do it for egress, so repeat the steps and change the ingress to egress. Now that you have a static ip and open ports, go here and check the ports 7777 and 5555. If the ports are open, you almost did it. Now, return to your Cloud Engine Instances page and click the SSH button. This will connect you to your server via command-line. If you can enter inputs(Try writing \"ls\" for example), copy and paste this code: sudo apt update && wget -O installserver.sh https://unitystationfile.b-cdn.net/installserver.sh && sudo chmod +x installserver.sh && sudo bash installserver.sh After saying yes to every prompt, you will see the setup screen. Fill it as you like. Congratulations! Your server is good to go. Just copy your static ip and connect to it.","title":"Hosting a Server"},{"location":"development/Hosting-a-Server/#hosting-a-server","text":"This documents how to run a server, either by hosting + playing or by running headlessly (no GUI).","title":"Hosting a Server"},{"location":"development/Hosting-a-Server/#listen-server-play-and-host","text":"You can host a game (so-called listen server) by checking the box when starting a game, which allows you to host + play. If you're using Unity Hub, go to Installations and launch game executable from there.","title":"Listen server (play and host)"},{"location":"development/Hosting-a-Server/#headless-server-host-on-a-dedicated-machine","text":"If you want to dedicate a machine for server hosting you can make game run in \"headless\" mode, meaning it runs without a UI. This mode is sometimes required for reproducing complex issues. For a headless server, there are a few options: 1. Run game executable from the command line: Unitystation-Server -batchmode -nographics -logfile log1.txt 2. If you're testing from Unity Editor: Check the \"Test Server\" box in Managers > GameData in the lobby scene before running (make sure to leave this unchecked in the client build though). You should be able to join using a client once it's started, you won't get any GUI. This is supposed to simulate running a headless server but we aren't 100% confident on it yet. We refer to it as \"fake headless\"","title":"Headless server (host on a dedicated machine)"},{"location":"development/Hosting-a-Server/#hosting-on-google-cloud","text":"If you want to host from a remote server, you can do it via a Google Cloud Compute Engine instance. First of all, create an account or login to an existing one and start using your free 300 dollars credit. Go to Compute Engine section from the left navbar and start a project. Then, inside that project, create an instance. We recommend using Ubuntu 18.04 as the boot disk, and 10 GBs of space should be enough. If your server will host 20 or less players, you should choose first generation N1 for Machine Configuration because it costs less, but server will work slower. After your instance is created, search External IPs from the top and go there. Select Static and give it a name. Then, select Firewall from the left bar. This is where we will portforward. Add a new firewall rule and apply the settings below: You also need to do it for egress, so repeat the steps and change the ingress to egress. Now that you have a static ip and open ports, go here and check the ports 7777 and 5555. If the ports are open, you almost did it. Now, return to your Cloud Engine Instances page and click the SSH button. This will connect you to your server via command-line. If you can enter inputs(Try writing \"ls\" for example), copy and paste this code: sudo apt update && wget -O installserver.sh https://unitystationfile.b-cdn.net/installserver.sh && sudo chmod +x installserver.sh && sudo bash installserver.sh After saying yes to every prompt, you will see the setup screen. Fill it as you like. Congratulations! Your server is good to go. Just copy your static ip and connect to it.","title":"Hosting on Google Cloud"},{"location":"development/How-To-User-Interface/","text":"How To Create a User Interface \u00b6 Getting Started \u00b6 In order to create a User Interface for UnityStation, first open the Unity Editor. You will need to save at least one of each file types, the UI Prefab, the GUI script and the backend script. Each type file needs to be saved in a different place. If there is more then one file of the same type, please create a subfolder to group them together. Note that some of the UI Prefabs are located in UnityProject\\Assets\\Resources\\UI\\GUI, they will be moved from this location in the future, do not try to add UI Prefabs here unless you really have to. Feel free to copy and use the resources in this folder for your UI if you need a placeholder. UI Prefab files \u00b6 Overview \u00b6 These files are stored in UnityProject\\Assets\\Prefabs\\UI and is what the player will see. There are currently three folders, ingame (contains all the incidental UI HUD details, inventory slots etc.), RightClick (contains all the assets for the right click item select menu) and Tabs (This is the one you will want to put your UI menu into). Tips \u00b6 Make sure to tick to disable auto save when you open this prefab to modify the placement of elements, otherwise Unity will attempt to save the layout everytime you touch an element on this prefab. When building your UI in the editor, it is good to group each menu of the UI into a NetPageSwitcher, you don't have to have one. It is possible to nest NetPageSwitchers if a menu requires submenus. GUI Scripts \u00b6 Overview \u00b6 These files are stored in UnityProject\\Assets\\Scripts\\UI this file is what runs the UI's code, there are four folders, Core (contains the scripts which makes the UI possible), Items (contains the UI for items that a player can interact with, such as the PDA, Scroll, SpellBook etc.), Objects (contains the UI which is displayed on Consoles and Vendors, divided up into the relevant department - e.g. Security folder contains the SecurityRecordsConsole subfolder, which in turn has the GUI_SecuirtyRecords.cs and other related GUI scripts) and Systems (contains admin panels, character character screen, lobby screen, etc.) Tips \u00b6 Copy an existing UI script and attach to your copied Tab object via the inspector, shown on the right below in the PDA screenshot. Make sure to clearly and distinctly label all objects in your TabNAME, particularly NetPages to avoid confusion and they are the child of ScreenMask - this object hides the pages so only one can show at a time. IsPopOut \u00b6 This next section will explain the GUI script, going from the top of the GUI script component in the inspector. IsPopOut checkbox if ticked, will not be anchored to the top right menu, instead it will be a standalone menu occupying the centre of your screen. Type \u00b6 Type is important as this enumerical used to bring up the UI from the object/item/system etc. Add your new UI's name and number into the list inside NetTab.cs and select it in your GUI script. NetObjects \u00b6 Make sure you reference the necessary objects from the hierarchy into your GUI_NAME script so they can be called ( red box ). If you want your UI to change it's appearance depending on a player/item attribute it is best to store them as separate 2D Textures so they can be tailored ( yellow box ). Doing this allows you to reference them in your code and be able to manipulate them using your backend script. One of the most important functions to include in your GUI_Script is an UpdateDisplay() function, this function should update the UI by calling SetValueServer for all necessary UI elements. For regular menus switching can be handled by attaching the to a NetButton, however .SetActivePage() function will allow you to switch between your submenus in your code so long as you make a variable stating it is a NestedSwitcher . Your class from the backend script should also be stored as a variable inside GUI_NAME as well so you can call it. Backend \u00b6 Overview \u00b6 These files are stored in UnityProject\\Assets\\Scripts this file contains any backend code that does not directly dictate what the UI does, but manages all other components. Place these scripts inside the corresponding folder so it matches where you put the GUI Script, so Scripts\\Core for Scripts\\UI\\Core and so on. The player-to-item or player-to-object interaction step is not handled in the manager script as it is treated as external to the UI. Create the script inside either Core, Items, Objects, etc. in UnityProject\\Assets\\Scripts , call a public GUI class inside it if modifications through items to the object are required, block out all unnecessary trait with the WillInteract function, etc.. Attach this component to the object on that will be on the map. Tips \u00b6 To be expanded. Include AddListener() and explain that all Server, Validations and Inventory functions should appear here. Adding #region will help a lot in remembering what section does what. NetUI Elements \u00b6 This subsection will be describing NetUI elements and how to use them. Important stuff \u00b6 NetTab stores all NetUIElement at the start in the dictionary; because of that, we can use netTab[\"elementName\"] to get reference to elements. However, it gives us a restriction - all NetUIElement must have unique names in current tab. If you have two NetLabel named \"text\" as children of NetTab gameobject - you will get duplicate dictionary key error. NetUIElement has two methods for setting value - Value and SetValue . The only difference is that SetValue calls net update immediately. If you don't understand how to use a particular component - check examples to see how they are used in existing UI. If you still can't understand something - be sure to ask on Discord. NetworkTabTrigger \u00b6 NetworkTabTrigger is a class that allows you to open UI window on player Interaction. The class is abstract, so you will have to inherit it. Usage: Put an inherited NetworkTabTrigger component on item in scene that will open your UI. Set NetTabType in inspector so it opens correct window on interaction. Examples: Just check classes that inherit NetworkTabTrigger - APCInteract , CargoConsole , NukeInteract , etc. NetLabel \u00b6 NetLabel is used to sync Text component between clients. Usage: Add NetLabel to gameobject with Text component. When you need to change the text, server should run netLabel.SetValue = \"message\"; . This will update text component on all clients. Examples: NetLabel is very simple and straight forward, but if you need to see examples of usage - check out GUI_APC or GUI_Spawner . NetColorChanger \u00b6 NetColorChanger syncs color of any Graphic element (i.e Image ). Takes color hex value as a string. Usage: Add NetColorChanger to gameobject with Graphic component. When you need to change color, server should run netColorChanger.SetValue = \"ffffff\"; where ffffff is new hex color. Examples: Current GUI_APC makes heavy usage of that component, GUI_CargoPageStatus contains NetColorChanger as well. NetButton \u00b6 NetButton is a component that lets the client call a function on the server when interacting with the Button component locally. Usage: Add NetButton to gameobject with Button component. Change button's OnClick() to NetButton.ExecuteClient . Change netButton's ServerMethod() to method you wish to call as a server. In the end, it should look like that: Examples: TabCargo prefab has lots of buttons with NetButton component. Note : NetToggle is setup and works exactly like this. NetPages \u00b6 NetPages is a concept of making UI in several pages instead of one ( cargo console ). It is done by switching on/off gameobjects that represent sub-page in one window. The structure looks like this: Where current tab's gameobject will be enabled and all others disabled. Usage: Structure your gameobjects like on screenshot above. NetTab is your main window with NetTab component. Put NetPageSwitcher on NetPages gameobject. Here you can set pages and default one, if you dont set them - it will be done at the Init() Put NetPage component on all of your subpages. You can inherit this class if you wish to make some page-specific code. To switch between pages, you will need to call SetActivePage(NetPage) , NextPage() or PreviousPage() methods of your NetPageSwitcher Examples: GUI_Spawner and GUI_Cargo both use NetPages. Dynamic Lists \u00b6 Dynamics lists are net synced lists of gameobjects. For now, there are two types of dynamic lists - ItemList which stores prefabs (not actual instances) and SpawnedObjectList that contains objects that are spawned ingame. Usage: Add SpawnedObjectList to gameobject that will act as a holder to list elements. Set its EntryPrefab in the editor. If you won't set it, it will try to Resource.Load gameobject with name %NetTabType%Entry (i.e. CargoEntry). Use AddObjects(List<GameObject>) to populate the list with items you need. If you need to access entry, you can do TypeYouNeed entry = myDynamicList.Entries[i] as TypeYouNeed Examples: GUI_Spawner which uses ItemList . Cargo uses inherited class - GUI_CargoItemList . You can see usages of it in GUI_CargoPageSupplies and GUI_CargoPageCart .","title":"How To Create a User Interface"},{"location":"development/How-To-User-Interface/#how-to-create-a-user-interface","text":"","title":"How To Create a User Interface"},{"location":"development/How-To-User-Interface/#getting-started","text":"In order to create a User Interface for UnityStation, first open the Unity Editor. You will need to save at least one of each file types, the UI Prefab, the GUI script and the backend script. Each type file needs to be saved in a different place. If there is more then one file of the same type, please create a subfolder to group them together. Note that some of the UI Prefabs are located in UnityProject\\Assets\\Resources\\UI\\GUI, they will be moved from this location in the future, do not try to add UI Prefabs here unless you really have to. Feel free to copy and use the resources in this folder for your UI if you need a placeholder.","title":"Getting Started"},{"location":"development/How-To-User-Interface/#ui-prefab-files","text":"","title":"UI Prefab files"},{"location":"development/How-To-User-Interface/#overview","text":"These files are stored in UnityProject\\Assets\\Prefabs\\UI and is what the player will see. There are currently three folders, ingame (contains all the incidental UI HUD details, inventory slots etc.), RightClick (contains all the assets for the right click item select menu) and Tabs (This is the one you will want to put your UI menu into).","title":"Overview"},{"location":"development/How-To-User-Interface/#tips","text":"Make sure to tick to disable auto save when you open this prefab to modify the placement of elements, otherwise Unity will attempt to save the layout everytime you touch an element on this prefab. When building your UI in the editor, it is good to group each menu of the UI into a NetPageSwitcher, you don't have to have one. It is possible to nest NetPageSwitchers if a menu requires submenus.","title":"Tips"},{"location":"development/How-To-User-Interface/#gui-scripts","text":"","title":"GUI Scripts"},{"location":"development/How-To-User-Interface/#overview_1","text":"These files are stored in UnityProject\\Assets\\Scripts\\UI this file is what runs the UI's code, there are four folders, Core (contains the scripts which makes the UI possible), Items (contains the UI for items that a player can interact with, such as the PDA, Scroll, SpellBook etc.), Objects (contains the UI which is displayed on Consoles and Vendors, divided up into the relevant department - e.g. Security folder contains the SecurityRecordsConsole subfolder, which in turn has the GUI_SecuirtyRecords.cs and other related GUI scripts) and Systems (contains admin panels, character character screen, lobby screen, etc.)","title":"Overview"},{"location":"development/How-To-User-Interface/#tips_1","text":"Copy an existing UI script and attach to your copied Tab object via the inspector, shown on the right below in the PDA screenshot. Make sure to clearly and distinctly label all objects in your TabNAME, particularly NetPages to avoid confusion and they are the child of ScreenMask - this object hides the pages so only one can show at a time.","title":"Tips"},{"location":"development/How-To-User-Interface/#ispopout","text":"This next section will explain the GUI script, going from the top of the GUI script component in the inspector. IsPopOut checkbox if ticked, will not be anchored to the top right menu, instead it will be a standalone menu occupying the centre of your screen.","title":"IsPopOut"},{"location":"development/How-To-User-Interface/#type","text":"Type is important as this enumerical used to bring up the UI from the object/item/system etc. Add your new UI's name and number into the list inside NetTab.cs and select it in your GUI script.","title":"Type"},{"location":"development/How-To-User-Interface/#netobjects","text":"Make sure you reference the necessary objects from the hierarchy into your GUI_NAME script so they can be called ( red box ). If you want your UI to change it's appearance depending on a player/item attribute it is best to store them as separate 2D Textures so they can be tailored ( yellow box ). Doing this allows you to reference them in your code and be able to manipulate them using your backend script. One of the most important functions to include in your GUI_Script is an UpdateDisplay() function, this function should update the UI by calling SetValueServer for all necessary UI elements. For regular menus switching can be handled by attaching the to a NetButton, however .SetActivePage() function will allow you to switch between your submenus in your code so long as you make a variable stating it is a NestedSwitcher . Your class from the backend script should also be stored as a variable inside GUI_NAME as well so you can call it.","title":"NetObjects"},{"location":"development/How-To-User-Interface/#backend","text":"","title":"Backend"},{"location":"development/How-To-User-Interface/#overview_2","text":"These files are stored in UnityProject\\Assets\\Scripts this file contains any backend code that does not directly dictate what the UI does, but manages all other components. Place these scripts inside the corresponding folder so it matches where you put the GUI Script, so Scripts\\Core for Scripts\\UI\\Core and so on. The player-to-item or player-to-object interaction step is not handled in the manager script as it is treated as external to the UI. Create the script inside either Core, Items, Objects, etc. in UnityProject\\Assets\\Scripts , call a public GUI class inside it if modifications through items to the object are required, block out all unnecessary trait with the WillInteract function, etc.. Attach this component to the object on that will be on the map.","title":"Overview"},{"location":"development/How-To-User-Interface/#tips_2","text":"To be expanded. Include AddListener() and explain that all Server, Validations and Inventory functions should appear here. Adding #region will help a lot in remembering what section does what.","title":"Tips"},{"location":"development/How-To-User-Interface/#netui-elements","text":"This subsection will be describing NetUI elements and how to use them.","title":"NetUI Elements"},{"location":"development/How-To-User-Interface/#important-stuff","text":"NetTab stores all NetUIElement at the start in the dictionary; because of that, we can use netTab[\"elementName\"] to get reference to elements. However, it gives us a restriction - all NetUIElement must have unique names in current tab. If you have two NetLabel named \"text\" as children of NetTab gameobject - you will get duplicate dictionary key error. NetUIElement has two methods for setting value - Value and SetValue . The only difference is that SetValue calls net update immediately. If you don't understand how to use a particular component - check examples to see how they are used in existing UI. If you still can't understand something - be sure to ask on Discord.","title":"Important stuff"},{"location":"development/How-To-User-Interface/#networktabtrigger","text":"NetworkTabTrigger is a class that allows you to open UI window on player Interaction. The class is abstract, so you will have to inherit it. Usage: Put an inherited NetworkTabTrigger component on item in scene that will open your UI. Set NetTabType in inspector so it opens correct window on interaction. Examples: Just check classes that inherit NetworkTabTrigger - APCInteract , CargoConsole , NukeInteract , etc.","title":"NetworkTabTrigger"},{"location":"development/How-To-User-Interface/#netlabel","text":"NetLabel is used to sync Text component between clients. Usage: Add NetLabel to gameobject with Text component. When you need to change the text, server should run netLabel.SetValue = \"message\"; . This will update text component on all clients. Examples: NetLabel is very simple and straight forward, but if you need to see examples of usage - check out GUI_APC or GUI_Spawner .","title":"NetLabel"},{"location":"development/How-To-User-Interface/#netcolorchanger","text":"NetColorChanger syncs color of any Graphic element (i.e Image ). Takes color hex value as a string. Usage: Add NetColorChanger to gameobject with Graphic component. When you need to change color, server should run netColorChanger.SetValue = \"ffffff\"; where ffffff is new hex color. Examples: Current GUI_APC makes heavy usage of that component, GUI_CargoPageStatus contains NetColorChanger as well.","title":"NetColorChanger"},{"location":"development/How-To-User-Interface/#netbutton","text":"NetButton is a component that lets the client call a function on the server when interacting with the Button component locally. Usage: Add NetButton to gameobject with Button component. Change button's OnClick() to NetButton.ExecuteClient . Change netButton's ServerMethod() to method you wish to call as a server. In the end, it should look like that: Examples: TabCargo prefab has lots of buttons with NetButton component. Note : NetToggle is setup and works exactly like this.","title":"NetButton"},{"location":"development/How-To-User-Interface/#netpages","text":"NetPages is a concept of making UI in several pages instead of one ( cargo console ). It is done by switching on/off gameobjects that represent sub-page in one window. The structure looks like this: Where current tab's gameobject will be enabled and all others disabled. Usage: Structure your gameobjects like on screenshot above. NetTab is your main window with NetTab component. Put NetPageSwitcher on NetPages gameobject. Here you can set pages and default one, if you dont set them - it will be done at the Init() Put NetPage component on all of your subpages. You can inherit this class if you wish to make some page-specific code. To switch between pages, you will need to call SetActivePage(NetPage) , NextPage() or PreviousPage() methods of your NetPageSwitcher Examples: GUI_Spawner and GUI_Cargo both use NetPages.","title":"NetPages"},{"location":"development/How-To-User-Interface/#dynamic-lists","text":"Dynamics lists are net synced lists of gameobjects. For now, there are two types of dynamic lists - ItemList which stores prefabs (not actual instances) and SpawnedObjectList that contains objects that are spawned ingame. Usage: Add SpawnedObjectList to gameobject that will act as a holder to list elements. Set its EntryPrefab in the editor. If you won't set it, it will try to Resource.Load gameobject with name %NetTabType%Entry (i.e. CargoEntry). Use AddObjects(List<GameObject>) to populate the list with items you need. If you need to access entry, you can do TypeYouNeed entry = myDynamicList.Entries[i] as TypeYouNeed Examples: GUI_Spawner which uses ItemList . Cargo uses inherited class - GUI_CargoItemList . You can see usages of it in GUI_CargoPageSupplies and GUI_CargoPageCart .","title":"Dynamic Lists"},{"location":"development/How-to-Map/","text":"How to Map \u00b6 This page explains the details of how to do mapping within unitystation. All mapping is done in Unity. Setting Up Your Workspace \u00b6 You should have the following windows open. To open a window, to the Window tab at the top of Unity. Window > General > Scene Window > General > Project Window > General > Hierarchy Window > General > Inspector Window > Sidebar Window > Mapping/ \ud80c\udce1\ud80c\udce1 Map Loader Saver Selector \ud80c\udce1\ud80c\udce1 Introduction to Maps \u00b6 so First of all in the project window/view go to Assets/Scenes/DevScenes/EmptyMap.unity or just search for EmptyMap this should open an empty scene, On the Map Loader Saver Selector select which map you would like to load, Wait a while it initialises and loads the map, Was it so did you can see the hierarchy of the Of all the different shuttles on the map, Commonly referred to as a matrix, The hierarchy is made of Main object, two children, the first one that stores the layers that stores each tile type and The object layer that all the objects live underneath And the other object handles any networked information you want about the Matrix Getting Started \u00b6 The processing of mapping depending on what type of scene you are mapping. In UnityStation, scenes are divided into the following scriptable objects: Main Stations \u2013 where all the crew spawns at the start of the round Away Sites \u2013 on the MainStation there is a portal which connects to one of these scenes which the player then jumps through when the connection is established in the middle of the round. Additional Scenes \u2013 the scenes which the antagonists start on. Here is a handy diagram which you can use if you want to add a new antagonist or job and ensure that it updates across all the scenes. Test Runner \u00b6 Can be accessed by ctrl + shift + T or Window > General > Test runner Performs a variety of tests to check for Null references and other things. These tests are also used when you send a Pull Request. To run these tests, click Run All and then leave it for a while, it is not a quick process (use this opportunity to get something to eat/drink or some other professional/recreational activity of your choice). Errors will be denoted by a red cross, click on the individual test which has a red cross and read the error that appears in the bottom box to fix up the Scene. Be sure to click Rerun Failed to see if you now pass these tests. Tile Palette \u00b6 Accessed by Window > 2D > Tile Palette The Tile Palette tab lets you place walls, floors, tables etc. into the Scene tab Make sure to select the right Active Tilemap in the Tile Palette when editing Keep in mind when editing a Tile Palette that tiles are added to the palettes as they are created. To create a new Tile follow this example: Choose a tile from /Tilemaps/Tiles Drag a tile to a palette Matrix Check \u00b6 Accessed by Window > Matrix Check This tool allows you to check out atmospherics details when you run the executable in the editor (temperature, pressure, etc. on each tile). Good for making sure you haven\u2019t left a gap somewhere, make sure that you have __Gizmos__ enabled . LogLevels \u00b6 Accessed by logger > adjust log Levels Monitors certain variables when you are in play mode editor, displays them in the Console tab if they aren't set to Off . Useful for debugging your map. Creating a MainStation Map \u00b6 Part 1 - Populating Underfloor And Electrical Items \u00b6 Tip Before you hook up your lights and light switches, be sure to read the Map Tips at the bottom to familiarise and it make it easier for yourself. Electrical \u00b6 Make a json File in Assets/StreamingAssets/Maps/MainStations You may need to right click on one of the files and so on Explorer to make the json file or you can just copy One of the Other maps Open up EmptyMap Scene Load up one of the stations you want to copy stuff from, Delete all the objects and go through and right click each tile map you want to clear and click reset Next you will want to designate where the departments should go and how big they should be. Move the spawn points to generally mark out the areas so you can keep track of where everything is going. How you approach the rest is up to you, Part 2 and 3 below is a suggested method for you to use if you wish. Consider then mapping in all the power cables, atmos pipes and disposal pipes. This is all the important life support stuff that makes the station function. This step can be done at any time, however, a lot of LighTubeFixtures , * LightBulbFixtures , AirVents , Scrubbers , Pumps , Mixers , GasConnectors , Filters , * UnaryVents , Metres and DisposalBins** prefabs are required for the station to run. See Part 2 step 2 for details on how to add existing prefabs onto a map. For the meanwhile why your mapping you can save to the scene directly and when you want to save it properly click save in the Map Loader Saver Selector You may need to open and close it again if your file isn't visible note To play in your scene, Simply check the checkmark next to the map on the Map Loader Saver Selector Window and Press play Assets/Prefabs/Items/ItemMatrixSystems/AI_ShouldNavigateAround.prefab That needs to be added to your matrix that you want AI shuttles to navigate around UnityStation\u2019s Electrical Wiring differs from base SS13. Follow the guide below to make sure you correctly hook everything up. Make sure to always put a machine connector (white square in diagram) on the lower voltage side of the device. If you are still stuck, consult the wiring on SquareStation map and inspect the relevant prefabs. Tip It is strongly encouraged to avoid mapping underfloor utilities (wires, atmos / disposal pipes) under walls, windows. doing this will allow players who are playing the engineer role the ability to debug the wire pathways to find a fault without ever having to deconstruct a wall or window in the way. If it is unavoidable, that's ok, but don't make a habit of it. Atmospherics \u00b6 The atmos pipes are colour coded to help keep track of a specific function, use the following convention: Silver/Purple Pipes \u2013 These pipes are the internal pipes for the department which connect up to GasConnectors, these connectors allow an atmos tech to pump gas into/out of a gas canister into the pipes. Light Blue \u2013 These pipes connect up the canisters of nitrogen and oxygen that everyone will be breathing. They replace the yellow pipes for the air canister and connect directly to the blue pipes. Blue \u2013 Exports Gas out into the Station to the AirVents Red \u2013 Imports Gas back into the Atmospherics Department from the Scrubbers Green \u2013 Connects to Red Pipes has Filter prefabs littered through is section to filter out each gas to its specific canister chamber Orange/Yellow \u2013 Connects to pumps to pump out gas from a particular gas chamber, yellow pipes connect up to the end of the Green and Blue pipes The atmos prefabs have been laid out so you do not need to tinker too much with them, be sure to select the right one for the job. Here is a general guide to explain what prefab does what. GasFlowMeter to be attached to pipes inside the atmos department, GasFlowMeterAtmosWasteLoop to attach to red pipes outside of the atmos department and GasFlowMeterDistrubutionLoop to attach to blue pipes outside of the atmos department GasFilter(GAS-NAME) and GasFilter(GAS-NAME)Flipped are filter prefabs which sit on an empty tile connected to tiled pipes. They filter a particular gas out, usually into a designated atmos room. GasMixerAirMixer , GasMixerOff , GasMixerOffFlipped , GasMixerOn , GasMixerOnFlipped are mixer prefabs which mixes two gases together in a particular proportion. The \"Air\" that the crew breathes on the station has been deliberately set in the AirMixer, make sure you use that one in the department. GasPumpOn , GasPumpOff are the pump prefabs which are set to be on and off when the round starts. ACUs (air alarms) allow atmospheric technicians to control the local room's atmopshere, but they're useful to everyone as it allows you to quickly gauge a room's atmospheric state. ACUs should be as similarly common as APCs. Consider placing these in high-traffic areas where they're easily observed. Any connected ACU device (scrubbers, vents) can act as a sensor for the ACU, optionally including the tile in front of the unit itself. If the ACU is not directly in the room that it monitors, such as SM core, server room or (at least temporarily, until we have atmospheric tank control consoles) atmospheric tanks, then be sure to turn off Acu Samples Air in the AirController component so as not to skew the monitoring. There are several AirController presets designed for particular rooms in mind, like cold rooms, server rooms etc - be sure to take a look for special usages. Disposals \u00b6 The Disposal System is straightforward to map in if do the following steps. Be sure to connect the ConveyorSwitch prefab to the relevant ConveyorBelt prefabs. Mark where you want your DisposalBins by click-and-dragging the prefab onto the scene, ensure that all bins are on the object layer when you are done placing them. Designate the Mail Room in Cargo. Then add in a DisposalOutlet prefab connected a couple of ConveyorBelt prefabs leading to a DisposalInlet prefab. Designate the Disposals Room , this room needs to be on the outer most part of the station to eject trash into space. In this Room you need a DisposalOutlet prefab connected up to a couple of ConveyorBelt prefabs leading to an opening in the wall to space, but stop one tile short. A BlastDoor prefab will over the opening and will have a TinyFan underneath. A MassDriver prefab will go inbetween the ConveyorBelt and the BlastDoor, it is responsible for launching the trash. Link up a ButtonDoor to operate the BlastDoor and a ButtonMassDriver to operate the MassDriver. Open Tile Palette > Disposals and place one receiving pipe (the tile with the circle) underneath all the DisposalBins/DisposalInlets/DisposalOutlets, then map all the pipes taking care to orient all the pipes towards the Mail Room's DisposalOutlet. Then connect the Mail Room's DisposalInlet to the Disposals Room's DisposalOutlet. Part 2 - Placing Walls and Prefabs \u00b6 To help with completing Part 3, click and drag all prefabs onto the scene, select them all in the Hierarchy and drag them into the Matrix\u2019s Object layer when you feel you are finished. Add in the Walls to designate the rooms, relevant floor tiles and tables to populate the rooms. Remember that floor tiles are not present in maintenance areas, unless it is in a room coming from a corridor. To place objects into a scene search in the File manager with the prefab filter on, then click and drag the prefab onto the scene. All objects you place will need to go on the Station Matrix\u2019s Object layer in the Hierarchy. (To avoid having to click and drag the list of prefabs into the object layer, highlight all the objects, click cut and then right click on the Object Layer and select Paste as Child ). IMPORTANT: make sure you keep consistent unique number or attach an \u201c_name\u201d (e.g. APC_Kitchen), this will help a lot when you need to add in references to other prefabs, as you can tell them apart. Part 3 - Adding and linking in all the other Prefabs \u00b6 Add in all the other prefabs. Don\u2019t worry if you aren\u2019t getting the x,y co-ordinates close to the centre of a grid square, the Custom Net Transform always has Snap To Grid enabled, so it will have perfect co-ordinates in-game. If you like, you can also use the Mapping > Snap to Grid All Applicable Objects tool to ensure this before runtime. As you progress placing the objects down onto the matrix, make sure you modify the relevant fields on the prefabs so that they can be referred to by the other relevant prefabs. You can use the Tools/Mapping/Device Linker tool to assist in linking certain objects together, like APC devices to APCs. Each device can also be linked via the controls on the relevant component. For example, on APCPoweredDevice . You can see that the selected Fire Alarm is connected to the APC and to three firelocks, the quantum pad is not connected to an APC and the console is not connected to some sort of device - these two need attention. The best way to see what prefabs relate to what is to open an existing map and turn on gizmos. Make sure all of the gizmos are turned on and if a line exists between the prefab and another, then a relationship exists. As there are a multitude of components that can exist on a prefab, it is best to read through them to understand what they are doing and what they need, some have tooltips to help. Always remember you can look at existing maps to see how the prefabs are connected. All Shuttles need plasma thrusters and a console to be palatable , you need to hook up pipes to each plasma thrusters well + a connector to connect the plasma tank Use the Tools > Mapping > Name Validator tool to ensure certain objects have appropriate names. Asteroids and Ruins \u00b6 Asteroids and ruins are different obstacles Shaft Miners, Curators or Assistants can stumble upon on their travels. Asteroids primarily serve as Ore Deposits for Shaft Miners, sometimes they also have exotic plants or mobs to fight as well. Ruins are derelict stations or shuttles for the players to explore. Copy an existing asteroid or ruin scene inside the AsteroidScenes Scene Folder to get started, make sure you define the location of your scene to somewhere well away from (0,0) otherwise it will spawn inside the station. and Include the corresponding stuff in Assets/Prefabs/Items/ItemMatrixSystems/ Most importantly make sure to add the asteroid system as an object It also contains stuff like such as AI navigate around so the escape shuttle doesn't drive itself into the asteroid And there's other stuff for setting the default gas mix Asteroid Tips \u00b6 If you want your asteroid to have exotic plant life, put in the random dirt pile prefab. The Potential Wild Plants list can be adjusted so whatever plant you want can spawn there. If you want your asteroid to have mobs for players to encounter, use the RandomItemPool prefab and in the Random Item Spot component increase the Pool List and select either CarpSpawner, Alien egg etc. from the list. 2%XenoEgg or the NPCs can also survive on an Asteroid too. If you don't want your mobs to fly off your asteroid, make sure to enclose them in rock. Ruin Tips \u00b6 You can wire up your ruin electrically as much as you want, make sure to use the damaged tiles and cracked windows in the Tile Palette to give it a really rundown feel. You may want to include some lore about why this ruin exists, if you put in a Paper prefab into the scene and select its Paper Component you can fill out its text field to your heart's content. A list of all available tags to stylise it can be found here ( Rich Text | Unity UI | 1.0.0 (unity3d.com) . Shuttles \u00b6 One thing to keep in mind is that it can be a bit fiddly with AI Movement, on determining which ways the front, a good rule of thumb is that if there's no rotations applied to the shuttle the front should be facing up To extend the shuttle matrix out select the correct matrix in the Tile Palette Window and paint some tiles, as long as you have gizmos turned on, you should see the bounds snap to accommodate the new tiles. Again, the shuttle matrix does not have a directional component, so you will need to make sure you orientate your shuttle correctly. A shuttle should have the following prefabs to make it function: Shuttle Console , usually located at the front of the shuttle to pilot the matrix CanisterPlasma and a Wrench to provide the fuel and means to secure it Canister connector which the canister will need to be wrenched down onto to power the shuttle Plasma thrusters in all four cardinal directions and set as so Pipes connecting the canister connected to the thrusters which the canister will need to be wrenched down onto to power the shuttle Shuttle Chairs for pilot and passengers, as well as Lighttubes and Doors for Stuff like the escape shuttle and cargo shuttle you have to specify the path when approaching the station with buoys That specify the chain of entering and entering out again, The first in the chain needs to be referenced by for the cargo shuttle the cargo shuttle computer and escape shuttle escape shuttle consul, Advice do not have the approach path directly into the station without many buoys, Since the server can have a lag spike and the shuttle can overshoot Crashing into the station, so ideally the cargo or sceptical should align itself alongside, so it overshoots It doesn't damage anything, If it Has to approach where it would overshoot and damage stuff, add a buoy A tile apart maybe 5 tiles away from the target point to make sure it comes in gently The Cargo shuttle must not have any live animals on board and have shutters which link to a door button in the Cargo Loading Bay. The Escape Shuttle must always have the following extra prefabs: An EscapeShuttleConsole for the antag objectives involving hijacking it At least three different areas, general access, command access and security access for prisoners Mapping Guidelines and Pointers \u00b6 so, Objects can be rotated however if they have the rotatable component it is best to use that instead since that handles game logic better e.g sprites getting changed when pushed around Various objects which already have directional facing logic, such as wallmounts and chairs, can have their direction set by adjusting Directional's Initial Direction field. Map Tips \u00b6 Here are some general tips to help you get when mapping in UnityStation: Do not attempt to try and finish your map from scratch in one sitting, it is better if you break it down into sections. If you find yourself unable to place tiles from the Tile Palette and are receiving a ton of warnings, it may be because you are missing a layer in the matrix. Duplicate an existing layer in the matrix and perform the necessary changes before trying to place anymore tiles. Attaching an APC can be quite tedious, but can be made a lot easier if you place the APC first, relabel it and then attach the APCPoweredDevice by moving it close to the APC and hitting the Auto Connect Button. If you have a lot of APCPowered Objects you need to connect, On each APC powered device there should be a button to find the nearest apc, make shorter term gizmos to see the full information it can display Make sure for jobs that will have 2 or more signing up to them that you have placed multiple spawn points in the department \u2013 this ensures that players do not spawn ontop of each other. To do this, copy an existing spawn point , alter its position and spawn name. So you can see what you are placing tile-wise on a particular layer, you can select obstructing layers to hide in the Hierarchy. You then can press the crossed-out eye above the scene view window to toggle the layers\u2019 visibility. Walk around as an assistant in Play Mode to see what you can and can't access. This is important as a large majority of first time players will be this and will go wherever they can. If you are ever stuck mapping in UnityStation first try looking at how the current maps work, what components make up an object. If all else fails, please message the mapper channel on Discord. Wallmounts \u00b6 Wallmounts always appear upright, but you need to indicate which side of the wall they are on (they should only be visible from one side of a wall). To do this, simply set the Directional component's Initial Direction to the direction it should be facing. Enabling Gizmos for WallmountBehaviours will show helper arrows so that you wouldn't need to guess their direction: Pull Request a New Map Scene to the Repo \u00b6 Once you have finished mapping a scene and it\u2019s time to PR, follow the instructions below so it gets submitted first time without needed rework. If you are working on an existing map, you only need to commit and PR the .json file. Make a new branch by opening GitHub Desktop and pressing Ctrl + Shift + N and typing the name of your map. Make sure to bring your changes over from develop if you have already started making progress on a new Scene. Run the Unit tests. These can be accessed in editor by going into the sidebar menu or selecting the U logo on the right bar. If the scene you have created is a Main Station, add its path (You can copy it in the map Saver window) into to the map.json file. This file keeps track of what maps to randomly select from given the server population (low, medium, high pop). Next you will need to add the created scene into a Scriptable Object List. Search in the editor for the following. If it is a Station where the crew will spawn in, add it into the Main Station List SO If the scene is a scene which connects to the Station Gateway, add it into the Away World List SO If the scene is an asteroid (contains ores to mine), add it into the Asteroid List SO If the scene is an antag spawn area or some other scene that doesn\u2019t fit into the ones above, add it into the _ _Additional Scene List SO__ Checklist \u00b6 Make sure you go through the checklist below to check you have gotten the following on the map. Players will have a hard time using your map if it doesn't have these items! In the Captain's Room, there should be a Nuke Disk, Nuke Pointer and a Captain's Spare ID Make sure that Security has Cell Timers and Secure Windoors to hold prisoners in the brig cells Fire alarms have been connected to the FireDoors AirVents and Scrubbers are rotated correctly to match the particular pipe outlets from adjacent tiles RCS thrusters are present on shuttle matrixes, test each shuttle in play mode to make sure they follow the directions like the WASD keys. Multiple spawn points exist for the same job and that all jobs have a sensible spawn point Check that Canisters in Atmos that are part of the pipes are open (Tick Valve is Initially Open inside the Canister Script) Ensure that no obvious extrusions will destroy or block the cargo and evac shuttle Directional Signs to help players navigate to each department (Prefabs are called SignDirectional) If it's a MainStation, include a picture of your map for the wiki Commit MainStation.unity, MainStation.unity.meta, MainStation.lighting, MainStation.lighting.meta, maps.json, EditorBuildSettings.asset and the SO List (e.g. Main Station List SO ). This is not an exhaustive list, so a general rule of thumb is to only commit files you touched. Pull Requests for Tile Palette Changes \u00b6 Almost never would you need to actually PR a palette change, if you do please make sure NOT to include anything other than the palette file and its .meta file.","title":"How to Map"},{"location":"development/How-to-Map/#how-to-map","text":"This page explains the details of how to do mapping within unitystation. All mapping is done in Unity.","title":"How to Map"},{"location":"development/How-to-Map/#setting-up-your-workspace","text":"You should have the following windows open. To open a window, to the Window tab at the top of Unity. Window > General > Scene Window > General > Project Window > General > Hierarchy Window > General > Inspector Window > Sidebar Window > Mapping/ \ud80c\udce1\ud80c\udce1 Map Loader Saver Selector \ud80c\udce1\ud80c\udce1","title":"Setting Up Your Workspace"},{"location":"development/How-to-Map/#introduction-to-maps","text":"so First of all in the project window/view go to Assets/Scenes/DevScenes/EmptyMap.unity or just search for EmptyMap this should open an empty scene, On the Map Loader Saver Selector select which map you would like to load, Wait a while it initialises and loads the map, Was it so did you can see the hierarchy of the Of all the different shuttles on the map, Commonly referred to as a matrix, The hierarchy is made of Main object, two children, the first one that stores the layers that stores each tile type and The object layer that all the objects live underneath And the other object handles any networked information you want about the Matrix","title":"Introduction to Maps"},{"location":"development/How-to-Map/#getting-started","text":"The processing of mapping depending on what type of scene you are mapping. In UnityStation, scenes are divided into the following scriptable objects: Main Stations \u2013 where all the crew spawns at the start of the round Away Sites \u2013 on the MainStation there is a portal which connects to one of these scenes which the player then jumps through when the connection is established in the middle of the round. Additional Scenes \u2013 the scenes which the antagonists start on. Here is a handy diagram which you can use if you want to add a new antagonist or job and ensure that it updates across all the scenes.","title":"Getting Started"},{"location":"development/How-to-Map/#test-runner","text":"Can be accessed by ctrl + shift + T or Window > General > Test runner Performs a variety of tests to check for Null references and other things. These tests are also used when you send a Pull Request. To run these tests, click Run All and then leave it for a while, it is not a quick process (use this opportunity to get something to eat/drink or some other professional/recreational activity of your choice). Errors will be denoted by a red cross, click on the individual test which has a red cross and read the error that appears in the bottom box to fix up the Scene. Be sure to click Rerun Failed to see if you now pass these tests.","title":"Test Runner"},{"location":"development/How-to-Map/#tile-palette","text":"Accessed by Window > 2D > Tile Palette The Tile Palette tab lets you place walls, floors, tables etc. into the Scene tab Make sure to select the right Active Tilemap in the Tile Palette when editing Keep in mind when editing a Tile Palette that tiles are added to the palettes as they are created. To create a new Tile follow this example: Choose a tile from /Tilemaps/Tiles Drag a tile to a palette","title":"Tile Palette"},{"location":"development/How-to-Map/#matrix-check","text":"Accessed by Window > Matrix Check This tool allows you to check out atmospherics details when you run the executable in the editor (temperature, pressure, etc. on each tile). Good for making sure you haven\u2019t left a gap somewhere, make sure that you have __Gizmos__ enabled .","title":"Matrix Check"},{"location":"development/How-to-Map/#loglevels","text":"Accessed by logger > adjust log Levels Monitors certain variables when you are in play mode editor, displays them in the Console tab if they aren't set to Off . Useful for debugging your map.","title":"LogLevels"},{"location":"development/How-to-Map/#creating-a-mainstation-map","text":"","title":"Creating a MainStation Map"},{"location":"development/How-to-Map/#part-1-populating-underfloor-and-electrical-items","text":"Tip Before you hook up your lights and light switches, be sure to read the Map Tips at the bottom to familiarise and it make it easier for yourself.","title":"Part 1 - Populating Underfloor And Electrical Items"},{"location":"development/How-to-Map/#electrical","text":"Make a json File in Assets/StreamingAssets/Maps/MainStations You may need to right click on one of the files and so on Explorer to make the json file or you can just copy One of the Other maps Open up EmptyMap Scene Load up one of the stations you want to copy stuff from, Delete all the objects and go through and right click each tile map you want to clear and click reset Next you will want to designate where the departments should go and how big they should be. Move the spawn points to generally mark out the areas so you can keep track of where everything is going. How you approach the rest is up to you, Part 2 and 3 below is a suggested method for you to use if you wish. Consider then mapping in all the power cables, atmos pipes and disposal pipes. This is all the important life support stuff that makes the station function. This step can be done at any time, however, a lot of LighTubeFixtures , * LightBulbFixtures , AirVents , Scrubbers , Pumps , Mixers , GasConnectors , Filters , * UnaryVents , Metres and DisposalBins** prefabs are required for the station to run. See Part 2 step 2 for details on how to add existing prefabs onto a map. For the meanwhile why your mapping you can save to the scene directly and when you want to save it properly click save in the Map Loader Saver Selector You may need to open and close it again if your file isn't visible note To play in your scene, Simply check the checkmark next to the map on the Map Loader Saver Selector Window and Press play Assets/Prefabs/Items/ItemMatrixSystems/AI_ShouldNavigateAround.prefab That needs to be added to your matrix that you want AI shuttles to navigate around UnityStation\u2019s Electrical Wiring differs from base SS13. Follow the guide below to make sure you correctly hook everything up. Make sure to always put a machine connector (white square in diagram) on the lower voltage side of the device. If you are still stuck, consult the wiring on SquareStation map and inspect the relevant prefabs. Tip It is strongly encouraged to avoid mapping underfloor utilities (wires, atmos / disposal pipes) under walls, windows. doing this will allow players who are playing the engineer role the ability to debug the wire pathways to find a fault without ever having to deconstruct a wall or window in the way. If it is unavoidable, that's ok, but don't make a habit of it.","title":"Electrical"},{"location":"development/How-to-Map/#atmospherics","text":"The atmos pipes are colour coded to help keep track of a specific function, use the following convention: Silver/Purple Pipes \u2013 These pipes are the internal pipes for the department which connect up to GasConnectors, these connectors allow an atmos tech to pump gas into/out of a gas canister into the pipes. Light Blue \u2013 These pipes connect up the canisters of nitrogen and oxygen that everyone will be breathing. They replace the yellow pipes for the air canister and connect directly to the blue pipes. Blue \u2013 Exports Gas out into the Station to the AirVents Red \u2013 Imports Gas back into the Atmospherics Department from the Scrubbers Green \u2013 Connects to Red Pipes has Filter prefabs littered through is section to filter out each gas to its specific canister chamber Orange/Yellow \u2013 Connects to pumps to pump out gas from a particular gas chamber, yellow pipes connect up to the end of the Green and Blue pipes The atmos prefabs have been laid out so you do not need to tinker too much with them, be sure to select the right one for the job. Here is a general guide to explain what prefab does what. GasFlowMeter to be attached to pipes inside the atmos department, GasFlowMeterAtmosWasteLoop to attach to red pipes outside of the atmos department and GasFlowMeterDistrubutionLoop to attach to blue pipes outside of the atmos department GasFilter(GAS-NAME) and GasFilter(GAS-NAME)Flipped are filter prefabs which sit on an empty tile connected to tiled pipes. They filter a particular gas out, usually into a designated atmos room. GasMixerAirMixer , GasMixerOff , GasMixerOffFlipped , GasMixerOn , GasMixerOnFlipped are mixer prefabs which mixes two gases together in a particular proportion. The \"Air\" that the crew breathes on the station has been deliberately set in the AirMixer, make sure you use that one in the department. GasPumpOn , GasPumpOff are the pump prefabs which are set to be on and off when the round starts. ACUs (air alarms) allow atmospheric technicians to control the local room's atmopshere, but they're useful to everyone as it allows you to quickly gauge a room's atmospheric state. ACUs should be as similarly common as APCs. Consider placing these in high-traffic areas where they're easily observed. Any connected ACU device (scrubbers, vents) can act as a sensor for the ACU, optionally including the tile in front of the unit itself. If the ACU is not directly in the room that it monitors, such as SM core, server room or (at least temporarily, until we have atmospheric tank control consoles) atmospheric tanks, then be sure to turn off Acu Samples Air in the AirController component so as not to skew the monitoring. There are several AirController presets designed for particular rooms in mind, like cold rooms, server rooms etc - be sure to take a look for special usages.","title":"Atmospherics"},{"location":"development/How-to-Map/#disposals","text":"The Disposal System is straightforward to map in if do the following steps. Be sure to connect the ConveyorSwitch prefab to the relevant ConveyorBelt prefabs. Mark where you want your DisposalBins by click-and-dragging the prefab onto the scene, ensure that all bins are on the object layer when you are done placing them. Designate the Mail Room in Cargo. Then add in a DisposalOutlet prefab connected a couple of ConveyorBelt prefabs leading to a DisposalInlet prefab. Designate the Disposals Room , this room needs to be on the outer most part of the station to eject trash into space. In this Room you need a DisposalOutlet prefab connected up to a couple of ConveyorBelt prefabs leading to an opening in the wall to space, but stop one tile short. A BlastDoor prefab will over the opening and will have a TinyFan underneath. A MassDriver prefab will go inbetween the ConveyorBelt and the BlastDoor, it is responsible for launching the trash. Link up a ButtonDoor to operate the BlastDoor and a ButtonMassDriver to operate the MassDriver. Open Tile Palette > Disposals and place one receiving pipe (the tile with the circle) underneath all the DisposalBins/DisposalInlets/DisposalOutlets, then map all the pipes taking care to orient all the pipes towards the Mail Room's DisposalOutlet. Then connect the Mail Room's DisposalInlet to the Disposals Room's DisposalOutlet.","title":"Disposals"},{"location":"development/How-to-Map/#part-2-placing-walls-and-prefabs","text":"To help with completing Part 3, click and drag all prefabs onto the scene, select them all in the Hierarchy and drag them into the Matrix\u2019s Object layer when you feel you are finished. Add in the Walls to designate the rooms, relevant floor tiles and tables to populate the rooms. Remember that floor tiles are not present in maintenance areas, unless it is in a room coming from a corridor. To place objects into a scene search in the File manager with the prefab filter on, then click and drag the prefab onto the scene. All objects you place will need to go on the Station Matrix\u2019s Object layer in the Hierarchy. (To avoid having to click and drag the list of prefabs into the object layer, highlight all the objects, click cut and then right click on the Object Layer and select Paste as Child ). IMPORTANT: make sure you keep consistent unique number or attach an \u201c_name\u201d (e.g. APC_Kitchen), this will help a lot when you need to add in references to other prefabs, as you can tell them apart.","title":"Part 2 - Placing Walls and Prefabs"},{"location":"development/How-to-Map/#part-3-adding-and-linking-in-all-the-other-prefabs","text":"Add in all the other prefabs. Don\u2019t worry if you aren\u2019t getting the x,y co-ordinates close to the centre of a grid square, the Custom Net Transform always has Snap To Grid enabled, so it will have perfect co-ordinates in-game. If you like, you can also use the Mapping > Snap to Grid All Applicable Objects tool to ensure this before runtime. As you progress placing the objects down onto the matrix, make sure you modify the relevant fields on the prefabs so that they can be referred to by the other relevant prefabs. You can use the Tools/Mapping/Device Linker tool to assist in linking certain objects together, like APC devices to APCs. Each device can also be linked via the controls on the relevant component. For example, on APCPoweredDevice . You can see that the selected Fire Alarm is connected to the APC and to three firelocks, the quantum pad is not connected to an APC and the console is not connected to some sort of device - these two need attention. The best way to see what prefabs relate to what is to open an existing map and turn on gizmos. Make sure all of the gizmos are turned on and if a line exists between the prefab and another, then a relationship exists. As there are a multitude of components that can exist on a prefab, it is best to read through them to understand what they are doing and what they need, some have tooltips to help. Always remember you can look at existing maps to see how the prefabs are connected. All Shuttles need plasma thrusters and a console to be palatable , you need to hook up pipes to each plasma thrusters well + a connector to connect the plasma tank Use the Tools > Mapping > Name Validator tool to ensure certain objects have appropriate names.","title":"Part 3 - Adding and linking in all the other Prefabs"},{"location":"development/How-to-Map/#asteroids-and-ruins","text":"Asteroids and ruins are different obstacles Shaft Miners, Curators or Assistants can stumble upon on their travels. Asteroids primarily serve as Ore Deposits for Shaft Miners, sometimes they also have exotic plants or mobs to fight as well. Ruins are derelict stations or shuttles for the players to explore. Copy an existing asteroid or ruin scene inside the AsteroidScenes Scene Folder to get started, make sure you define the location of your scene to somewhere well away from (0,0) otherwise it will spawn inside the station. and Include the corresponding stuff in Assets/Prefabs/Items/ItemMatrixSystems/ Most importantly make sure to add the asteroid system as an object It also contains stuff like such as AI navigate around so the escape shuttle doesn't drive itself into the asteroid And there's other stuff for setting the default gas mix","title":"Asteroids and Ruins"},{"location":"development/How-to-Map/#asteroid-tips","text":"If you want your asteroid to have exotic plant life, put in the random dirt pile prefab. The Potential Wild Plants list can be adjusted so whatever plant you want can spawn there. If you want your asteroid to have mobs for players to encounter, use the RandomItemPool prefab and in the Random Item Spot component increase the Pool List and select either CarpSpawner, Alien egg etc. from the list. 2%XenoEgg or the NPCs can also survive on an Asteroid too. If you don't want your mobs to fly off your asteroid, make sure to enclose them in rock.","title":"Asteroid Tips"},{"location":"development/How-to-Map/#ruin-tips","text":"You can wire up your ruin electrically as much as you want, make sure to use the damaged tiles and cracked windows in the Tile Palette to give it a really rundown feel. You may want to include some lore about why this ruin exists, if you put in a Paper prefab into the scene and select its Paper Component you can fill out its text field to your heart's content. A list of all available tags to stylise it can be found here ( Rich Text | Unity UI | 1.0.0 (unity3d.com) .","title":"Ruin Tips"},{"location":"development/How-to-Map/#shuttles","text":"One thing to keep in mind is that it can be a bit fiddly with AI Movement, on determining which ways the front, a good rule of thumb is that if there's no rotations applied to the shuttle the front should be facing up To extend the shuttle matrix out select the correct matrix in the Tile Palette Window and paint some tiles, as long as you have gizmos turned on, you should see the bounds snap to accommodate the new tiles. Again, the shuttle matrix does not have a directional component, so you will need to make sure you orientate your shuttle correctly. A shuttle should have the following prefabs to make it function: Shuttle Console , usually located at the front of the shuttle to pilot the matrix CanisterPlasma and a Wrench to provide the fuel and means to secure it Canister connector which the canister will need to be wrenched down onto to power the shuttle Plasma thrusters in all four cardinal directions and set as so Pipes connecting the canister connected to the thrusters which the canister will need to be wrenched down onto to power the shuttle Shuttle Chairs for pilot and passengers, as well as Lighttubes and Doors for Stuff like the escape shuttle and cargo shuttle you have to specify the path when approaching the station with buoys That specify the chain of entering and entering out again, The first in the chain needs to be referenced by for the cargo shuttle the cargo shuttle computer and escape shuttle escape shuttle consul, Advice do not have the approach path directly into the station without many buoys, Since the server can have a lag spike and the shuttle can overshoot Crashing into the station, so ideally the cargo or sceptical should align itself alongside, so it overshoots It doesn't damage anything, If it Has to approach where it would overshoot and damage stuff, add a buoy A tile apart maybe 5 tiles away from the target point to make sure it comes in gently The Cargo shuttle must not have any live animals on board and have shutters which link to a door button in the Cargo Loading Bay. The Escape Shuttle must always have the following extra prefabs: An EscapeShuttleConsole for the antag objectives involving hijacking it At least three different areas, general access, command access and security access for prisoners","title":"Shuttles"},{"location":"development/How-to-Map/#mapping-guidelines-and-pointers","text":"so, Objects can be rotated however if they have the rotatable component it is best to use that instead since that handles game logic better e.g sprites getting changed when pushed around Various objects which already have directional facing logic, such as wallmounts and chairs, can have their direction set by adjusting Directional's Initial Direction field.","title":"Mapping Guidelines and Pointers"},{"location":"development/How-to-Map/#map-tips","text":"Here are some general tips to help you get when mapping in UnityStation: Do not attempt to try and finish your map from scratch in one sitting, it is better if you break it down into sections. If you find yourself unable to place tiles from the Tile Palette and are receiving a ton of warnings, it may be because you are missing a layer in the matrix. Duplicate an existing layer in the matrix and perform the necessary changes before trying to place anymore tiles. Attaching an APC can be quite tedious, but can be made a lot easier if you place the APC first, relabel it and then attach the APCPoweredDevice by moving it close to the APC and hitting the Auto Connect Button. If you have a lot of APCPowered Objects you need to connect, On each APC powered device there should be a button to find the nearest apc, make shorter term gizmos to see the full information it can display Make sure for jobs that will have 2 or more signing up to them that you have placed multiple spawn points in the department \u2013 this ensures that players do not spawn ontop of each other. To do this, copy an existing spawn point , alter its position and spawn name. So you can see what you are placing tile-wise on a particular layer, you can select obstructing layers to hide in the Hierarchy. You then can press the crossed-out eye above the scene view window to toggle the layers\u2019 visibility. Walk around as an assistant in Play Mode to see what you can and can't access. This is important as a large majority of first time players will be this and will go wherever they can. If you are ever stuck mapping in UnityStation first try looking at how the current maps work, what components make up an object. If all else fails, please message the mapper channel on Discord.","title":"Map Tips"},{"location":"development/How-to-Map/#wallmounts","text":"Wallmounts always appear upright, but you need to indicate which side of the wall they are on (they should only be visible from one side of a wall). To do this, simply set the Directional component's Initial Direction to the direction it should be facing. Enabling Gizmos for WallmountBehaviours will show helper arrows so that you wouldn't need to guess their direction:","title":"Wallmounts"},{"location":"development/How-to-Map/#pull-request-a-new-map-scene-to-the-repo","text":"Once you have finished mapping a scene and it\u2019s time to PR, follow the instructions below so it gets submitted first time without needed rework. If you are working on an existing map, you only need to commit and PR the .json file. Make a new branch by opening GitHub Desktop and pressing Ctrl + Shift + N and typing the name of your map. Make sure to bring your changes over from develop if you have already started making progress on a new Scene. Run the Unit tests. These can be accessed in editor by going into the sidebar menu or selecting the U logo on the right bar. If the scene you have created is a Main Station, add its path (You can copy it in the map Saver window) into to the map.json file. This file keeps track of what maps to randomly select from given the server population (low, medium, high pop). Next you will need to add the created scene into a Scriptable Object List. Search in the editor for the following. If it is a Station where the crew will spawn in, add it into the Main Station List SO If the scene is a scene which connects to the Station Gateway, add it into the Away World List SO If the scene is an asteroid (contains ores to mine), add it into the Asteroid List SO If the scene is an antag spawn area or some other scene that doesn\u2019t fit into the ones above, add it into the _ _Additional Scene List SO__","title":"Pull Request a New Map Scene to the Repo"},{"location":"development/How-to-Map/#checklist","text":"Make sure you go through the checklist below to check you have gotten the following on the map. Players will have a hard time using your map if it doesn't have these items! In the Captain's Room, there should be a Nuke Disk, Nuke Pointer and a Captain's Spare ID Make sure that Security has Cell Timers and Secure Windoors to hold prisoners in the brig cells Fire alarms have been connected to the FireDoors AirVents and Scrubbers are rotated correctly to match the particular pipe outlets from adjacent tiles RCS thrusters are present on shuttle matrixes, test each shuttle in play mode to make sure they follow the directions like the WASD keys. Multiple spawn points exist for the same job and that all jobs have a sensible spawn point Check that Canisters in Atmos that are part of the pipes are open (Tick Valve is Initially Open inside the Canister Script) Ensure that no obvious extrusions will destroy or block the cargo and evac shuttle Directional Signs to help players navigate to each department (Prefabs are called SignDirectional) If it's a MainStation, include a picture of your map for the wiki Commit MainStation.unity, MainStation.unity.meta, MainStation.lighting, MainStation.lighting.meta, maps.json, EditorBuildSettings.asset and the SO List (e.g. Main Station List SO ). This is not an exhaustive list, so a general rule of thumb is to only commit files you touched.","title":"Checklist"},{"location":"development/How-to-Map/#pull-requests-for-tile-palette-changes","text":"Almost never would you need to actually PR a palette change, if you do please make sure NOT to include anything other than the palette file and its .meta file.","title":"Pull Requests for Tile Palette Changes"},{"location":"development/How-to-Random-Loot/","text":"How to use random spawners \u00b6 Ok, so you want to include some surprise mechanics in your map? Wonderful, but first let's define a couple concepts so we're all in tune and you can understand this guide. Understanding the system \u00b6 The Random spawner system, spawn loot or however you want to call it uses two critical elements to make it work: Random Spawn Spot (name subject to change): is a Prefab that contains all the logic to spawn random stuff at its position. You will use this object to define a position in your map to spawn something when the game is running. Simply drag it from the project view to the desired location in the scene view. Random Item Pool (name subject to change): is a Scriptable object that contains a list of values. This is just a data holder, but it is important because it has all the possible items this pool can spawn and their probabilities, among other cool stuff we will inspect later. Alright, so how do we get started? Let's take a look at a spawner that has already been done before we make our own. Navigate to the folder where the Random Spawn Spots are, at the time of writing this guide that is Assets/Resources/Prefabs/Items/Spawners Left click on the RandomTool and take a look at the inspector view. If you go to the bottom of the component list, you will find the RandomItemSpot component. Let's go from Top to bottom, Loot count (number) is the amount of items this spawner should spawn. Fan out (checkbox) tells the spawner if it should spread out the items on spawn. Pool List (list of pools) is, as its name implies, a list of the possible pools this spawner can choose to spawn a random something. It has a couple properties too, let's look at those. Size (number) is the size of the list. A size 0 is an empty list, a size of 2 has 2 elements. Each element is a pool, which also have some properties. Probability (number from 0 to 100) is actually more like a weight, how likely is it to choose this pool when we pick a random one. Random Item Pool (RandomItemPool) is the reference to the scriptable object that contains all the data we need to spawn one item. Do a left click on CommonTools, so the project view will change to its location in the folder, at the time of writing this guide Assets/Scripts/RandomItemPools , then take a look at the inspector view. Again, let's go from top to bottom defining what each property does. Size (number) is how many items we want to define in this pool. 0 is an empty pool, 8 means 8 elements in this pool and each element has these properties: Prefab (GameObject) is the prefab of the item we want to spawn Max amount (number) is how many items we want to spawn, this goes from 1 to whatever number we input here. If we set 10 as Max Amount, then the system will spawn anything from 1 to 10 of this item. Probability (number from 0 to 100) is again, a weight of this item in this particular pool. How likely is this item to be spawned instead of another if this item is chosen randomly. That's pretty much it. Let's see how it operates in action... Spawning random loot cycle \u00b6 Map a spawner. The game starts, the spawner will run its cycle which is... Pick a random pool from the list. Roll the pool probability, if it doesn't pass, jump to step 3, else... Pick a random item from the pool. Roll the item probability, if it doesn't pass, don't spawn anything, else spawn the item. The spawner deletes itself. Creating your own spawner \u00b6 The intention behind this design is to make the loot spawners very flexible and to cover any need you might have. If you think the spawner you want to make can be reused by other mappers, go to the spawner folder and make a prefab variant of it. Fill the required data as you wish. Wait but, the available pools don't solve my requirements, how do I create a new one? Creating your own pool \u00b6 Go to the pools folder and do a left click then Create/ScriptableObjects/RandomItemPool , lastly fill the required data (and assign this pool to your previously created spawner). Interesting facts about Random Spawners \u00b6 You can use spawners in pools and make a spawner of spawners. You can spawn spawners with the admin tools. You can use spawners in crates and lockers. You can use spawners in populators if the items are not meant to be equipped by a player once spawned (for example, the occupation populators). You can use mobs in pools. You can change the sprite of a spawner so mappers know at a glance what is it. If you set low probabilities in your pools, the spawner will do 5 attempts before interrupting everything and it won't spawn anything. Try group low prob pools with a 100 pool, so if the low prob fails it defaults to the 100 one. If you want your spawner to spawn something with low probs or nothing, use a 100 weight on its pool but make the items itself have low prob. An example of this is the Xeno Egg spawner, with 100 weight on its only pool but 2% chances of spawning the egg.","title":"How to use random spawners"},{"location":"development/How-to-Random-Loot/#how-to-use-random-spawners","text":"Ok, so you want to include some surprise mechanics in your map? Wonderful, but first let's define a couple concepts so we're all in tune and you can understand this guide.","title":"How to use random spawners"},{"location":"development/How-to-Random-Loot/#understanding-the-system","text":"The Random spawner system, spawn loot or however you want to call it uses two critical elements to make it work: Random Spawn Spot (name subject to change): is a Prefab that contains all the logic to spawn random stuff at its position. You will use this object to define a position in your map to spawn something when the game is running. Simply drag it from the project view to the desired location in the scene view. Random Item Pool (name subject to change): is a Scriptable object that contains a list of values. This is just a data holder, but it is important because it has all the possible items this pool can spawn and their probabilities, among other cool stuff we will inspect later. Alright, so how do we get started? Let's take a look at a spawner that has already been done before we make our own. Navigate to the folder where the Random Spawn Spots are, at the time of writing this guide that is Assets/Resources/Prefabs/Items/Spawners Left click on the RandomTool and take a look at the inspector view. If you go to the bottom of the component list, you will find the RandomItemSpot component. Let's go from Top to bottom, Loot count (number) is the amount of items this spawner should spawn. Fan out (checkbox) tells the spawner if it should spread out the items on spawn. Pool List (list of pools) is, as its name implies, a list of the possible pools this spawner can choose to spawn a random something. It has a couple properties too, let's look at those. Size (number) is the size of the list. A size 0 is an empty list, a size of 2 has 2 elements. Each element is a pool, which also have some properties. Probability (number from 0 to 100) is actually more like a weight, how likely is it to choose this pool when we pick a random one. Random Item Pool (RandomItemPool) is the reference to the scriptable object that contains all the data we need to spawn one item. Do a left click on CommonTools, so the project view will change to its location in the folder, at the time of writing this guide Assets/Scripts/RandomItemPools , then take a look at the inspector view. Again, let's go from top to bottom defining what each property does. Size (number) is how many items we want to define in this pool. 0 is an empty pool, 8 means 8 elements in this pool and each element has these properties: Prefab (GameObject) is the prefab of the item we want to spawn Max amount (number) is how many items we want to spawn, this goes from 1 to whatever number we input here. If we set 10 as Max Amount, then the system will spawn anything from 1 to 10 of this item. Probability (number from 0 to 100) is again, a weight of this item in this particular pool. How likely is this item to be spawned instead of another if this item is chosen randomly. That's pretty much it. Let's see how it operates in action...","title":"Understanding the system"},{"location":"development/How-to-Random-Loot/#spawning-random-loot-cycle","text":"Map a spawner. The game starts, the spawner will run its cycle which is... Pick a random pool from the list. Roll the pool probability, if it doesn't pass, jump to step 3, else... Pick a random item from the pool. Roll the item probability, if it doesn't pass, don't spawn anything, else spawn the item. The spawner deletes itself.","title":"Spawning random loot cycle"},{"location":"development/How-to-Random-Loot/#creating-your-own-spawner","text":"The intention behind this design is to make the loot spawners very flexible and to cover any need you might have. If you think the spawner you want to make can be reused by other mappers, go to the spawner folder and make a prefab variant of it. Fill the required data as you wish. Wait but, the available pools don't solve my requirements, how do I create a new one?","title":"Creating your own spawner"},{"location":"development/How-to-Random-Loot/#creating-your-own-pool","text":"Go to the pools folder and do a left click then Create/ScriptableObjects/RandomItemPool , lastly fill the required data (and assign this pool to your previously created spawner).","title":"Creating your own pool"},{"location":"development/How-to-Random-Loot/#interesting-facts-about-random-spawners","text":"You can use spawners in pools and make a spawner of spawners. You can spawn spawners with the admin tools. You can use spawners in crates and lockers. You can use spawners in populators if the items are not meant to be equipped by a player once spawned (for example, the occupation populators). You can use mobs in pools. You can change the sprite of a spawner so mappers know at a glance what is it. If you set low probabilities in your pools, the spawner will do 5 attempts before interrupting everything and it won't spawn anything. Try group low prob pools with a 100 pool, so if the low prob fails it defaults to the 100 one. If you want your spawner to spawn something with low probs or nothing, use a 100 weight on its pool but make the items itself have low prob. An example of this is the Xeno Egg spawner, with 100 weight on its only pool but 2% chances of spawning the egg.","title":"Interesting facts about Random Spawners"},{"location":"development/How-to-Sprite/","text":"How to Sprite \u00b6 How to make and import sprites using Singleton Scriptable Objects \u00b6 Firstly, draw your image in a photoshop program and save it as a png file. Relocate the file to the particular sub Sprite Folder, then navigate to the folder location in the editor. For the purposes of this document, we are going to use a mock image, the steps will be the same as when you do it for your sprite. Single Frame Sprite \u00b6 Here is Tyler, the Single Frame png file which has just been added into the project. His settings are not yet optimised, to optimise them open him up in the inspector, like so. Now make the following adjustments: Change Pixels Per Unit to 32 Change Mesh Type to Full Rect Tick Read/Write Enabled so it is true Set Filter Mode to Point (no filter) Set the Format to RGBA 32 bit in the Default tab Now the image is ready to put into the Singleton Scriptable Object. Right Click up top on the white bar and go Create -> Singleton Scriptable Object -> SpriteData . Make sure the names between your sprite and SO match. Open up the newly created SO in the inspector like so: Now make the following adjustments (in order): Set Variance from 0 to 1 Inside Element 0 subtab in Frames set size from 0 to 1 Now inside the Frame's Element 0 there should be an entry called Sprite , click on the cricle to the right and search for your sprite. Click and hit enter to make sure you actually select it, it can be a bit temperamental. To add your sprite to the repository, commit and PR these files to git, make sure you are looking to commit your files and not any tyler images. tyler.asset tyler.asset.meta tyler.png tyler.png.meta SpriteCatalogueSingleton Multi Frame Sprite \u00b6 This is for using a sprite sheet to make an animations or have different holding positions for in-hand item etc. All the usual adjustments from Single Frame Sprite above apply to the Durden image. However, make sure that the Sprite Mode set to Multiple instead of Single in the inspector. Now click on the Sprite Editor button in the bottom right hand corner, it's time to slice the sprite sheet up. In top left click Slice , then set Type to Grid by Cell Size and then make sure that Pixel Size is adjusted so that you get the dimensions you want for the sprite (e.g. if it's 32 by 32, then set both X and Y to 32). There should now be squares around each sprite, however it is not saved until you press the Apply button in the top right. Now when you create the Singleton Scriptable Object for Sprite Data this time, put in the number of frames that you sliced up in Variance -> Element0 -> Size . To set the delay between the frames, you need to add the total delay otherwise the frames will appear on top of each other - so if you want a 1 second delay between each frame you set each element to be 1, 2 (1+1), 3 (2+1) and 4 (3+1). Changing your sprite \u00b6 To control your sprite in your code, you must first create the sprite object as a child of the object you want to use the sprite for. To demonstrate, we will go into the crowbar object and double click to bring up the prefab and all it's children. If you change the Present Sprite Set to durden It will now show your Durden sprite. From this point, you can change the present sprite by calling baseSpriteHandler.ChangeSprite(Variable) , where Variable is an enum state (e.g. SpriteState.Idle) to which will allow you to change your Multi-Frame sprite. You can also change variants if you need to modify its orientation by calling baseSpriteHandler.ChangeSpriteVariant(Variable) , where Variable is again a number. How to make and import paletteable sprites \u00b6 This guide will help you make sprites that have their colors defined by a palette that can be altered at runtime. This guide was written earlier in development, it is still useable, but not recommended to be used if you are not yet comfortable with importing sprites. Please use the above method. Even if you are starting with an ordinary sprite sheet, the process is more of an art than a science. That being said, with some practice the results are very neat: With this system it could be possible to code dyes, paints, spells, or other features that change the color of objects in the middle of the game! Note: At time of writing, this system is only confirmed to work with items which make use of the ItemAttributesV2 script. Creating the paletteable sprite texture \u00b6 The colors of a paletteable sprite indicate which swatches of the palette to blend together and how to blend them. So, in their unshaded form, they look almost nothing like what the results might produce. Understandably, it would be difficult to create something like this using an ordinary image editor. With that in mind, a custom image editing tool has been made to work with this format. It is a web tool available in Tools/paletteable sprite editor/ : Features of the tool \u00b6 On the top is where a paletteable sprite can be loaded in for previewing or editing. In fact, any image can be loaded here and that is very useful for converting an ordinary sprite into a paletteable one. In the upper-left is the palette manager for the tool. Select the palette colors by clicking on the colored boxes. Determine which palette swatches the cursor will draw from by selecting swatches for A and B. Determine how the A and B swatches are blended for drawing with the cursor by moving the slider left and right The color next to the slider provides a preview of the color that the cursor will draw Add and remove swatches In the lower-left are some actual-size preview panes. The top image under Preview shows what the paletteable sprite currently in the canvas will produce with the colors currently selected in the palette. The lower image under Paletted shows what the paletteable sprite looks like in its raw form. This is used to export the sprite from the tool by right-clicking and saving the image to disk. Typical workflow of using the tool \u00b6 Suppose we want to make this ordinary sprite sheet into being paletteable: Optional: Load a sprite into the editor by browsing for the sprite and clicking Load Raw at the top. This can be an ordinary or a palettable sprite, although an ordinary sprite will not look as expected in the canvas of the tool. Loading an ordinary sprite can still be useful because you can trace the shape of the sprite, so if you choose that. You will want to open the original in another window. If loading in a paletteable sprite for editing, be sure to add or remove swatches so that the palette size is correct before loading the sprite! Note: In the case of large sprites, you may need to slice them up to get them to fit into the canvas of the tool. Add, remove and edit the colors in the palette to be ones that you think describe the object. For the best effect, colors that should always a blend of two other colors should not be their own palette color, because the blending should take care of that. For instance, in a grey jumpsuit, you might have a medium grey for the main color of the clothing, black for the shadows, black for the dark part of the belt, and white for the belt buckle. This step is very much up to artistic interpretation. Use the slider to mix the swatches to make the colors you'd like to paint. Left-click in the canvas to draw a pixel. Right-click in the canvas to remove a pixel. If a pixel refuses to paint when left-clicked try right-clicking first to remove it (known bug). For example, suppose swatch 0 is white and swatch 1 is black. If you want to paint grey because it is a blend of those colors, you can set A to swatch 0 and B to swatch 1 and blend as appropriate. If you want to paint white, you can set A or B (or both) to swatch 0 and set the blend level appropriately. When you want to check that your work is going well, it is recommended to change the palette colors to different values to verify that the blending works as expected. You might realize that it would make sense to combine two colors into one swatch or to make one swatch into two to allow for more control. Once you are done editing the sprite, you can export it by right-clicking into the Paletted image pane in the lower-left and saving it to disk. Note: The editor does not support alpha editing, every pixel is either 0% or 100% opaque. This is a quirk of the editor, the paletting shader fully supports alpha in the sprites. Consider using an external image editor to apply alpha as needed. (Or, making a better editor \ud83d\ude09) I have a paletteable sprite texture. Now what? \u00b6 It takes a few steps to import it, set the palette colors, and tell the various bits to use the palette. First, load the texture into unity and slice it into sprites as you would any sprite. Apply the new sprite to the SpriteDataSO(s) for the item you would like. Enable the checkbox(es) for Is Palette in the SpriteDataSO(s). If the item is clothing, find the item's Clothing Data and set the palette size and colors there and enable the checkbox for Is Paletted . Go into the prefab of the item with Item Attributes V2 And set the palette size and colors there, and also check Is Paletted . In the Sprite child(ren) of the object, set the size and colors of Palette . Dev notes \u00b6 The general idea is that each instance of an item can have a distict selection of colors for its palette. This is the rationale behind having a palette on Item Attributes V2 . However, the sprite handler currently manages its own palette drawn in most cases from sprite SO. A good improvement would be to draw from the sprite SO or clothingData (or other sources of a \"default\" palette, and then allow the ItemAttributes V2 palette to override it. Various rendering components need access to the palette to apply it to the shader they control. Search for _ColorPalette to see where this occurs. It would be convenient for changes to propagate from the Item Attributes V2 of the instance to the spriteHandlers associated with the item. Currently, there is a right-click menu for Item Attributes V2 which once used to propagate them starting in PropagatePaletteChanges but it has since broken (and even then, it only worked for Clothes). Making that work completely again may be a welcome fix. How the shader works \u00b6 For each pixel: R component is used to select the index of swatch A. 0-31 => swatch 0, 32-63 => swatch 1, etc. G component is used to select the index of swatch B. B component is used to lerp from the color of A to the color of B in RGB color space. 0 => 100% A, 128 => 50% - 50%, 255 => 100% B. A component is used directly for the alpha of the output. The shader currently only works with a palette length of exactly 8 but it could in theory work with 256 colors. There are a few magic number 8s that would need to be changed as well to increase the palette size and/or make it dynamic.","title":"How to Sprite"},{"location":"development/How-to-Sprite/#how-to-sprite","text":"","title":"How to Sprite"},{"location":"development/How-to-Sprite/#how-to-make-and-import-sprites-using-singleton-scriptable-objects","text":"Firstly, draw your image in a photoshop program and save it as a png file. Relocate the file to the particular sub Sprite Folder, then navigate to the folder location in the editor. For the purposes of this document, we are going to use a mock image, the steps will be the same as when you do it for your sprite.","title":"How to make and import sprites using Singleton Scriptable Objects"},{"location":"development/How-to-Sprite/#single-frame-sprite","text":"Here is Tyler, the Single Frame png file which has just been added into the project. His settings are not yet optimised, to optimise them open him up in the inspector, like so. Now make the following adjustments: Change Pixels Per Unit to 32 Change Mesh Type to Full Rect Tick Read/Write Enabled so it is true Set Filter Mode to Point (no filter) Set the Format to RGBA 32 bit in the Default tab Now the image is ready to put into the Singleton Scriptable Object. Right Click up top on the white bar and go Create -> Singleton Scriptable Object -> SpriteData . Make sure the names between your sprite and SO match. Open up the newly created SO in the inspector like so: Now make the following adjustments (in order): Set Variance from 0 to 1 Inside Element 0 subtab in Frames set size from 0 to 1 Now inside the Frame's Element 0 there should be an entry called Sprite , click on the cricle to the right and search for your sprite. Click and hit enter to make sure you actually select it, it can be a bit temperamental. To add your sprite to the repository, commit and PR these files to git, make sure you are looking to commit your files and not any tyler images. tyler.asset tyler.asset.meta tyler.png tyler.png.meta SpriteCatalogueSingleton","title":"Single Frame Sprite"},{"location":"development/How-to-Sprite/#multi-frame-sprite","text":"This is for using a sprite sheet to make an animations or have different holding positions for in-hand item etc. All the usual adjustments from Single Frame Sprite above apply to the Durden image. However, make sure that the Sprite Mode set to Multiple instead of Single in the inspector. Now click on the Sprite Editor button in the bottom right hand corner, it's time to slice the sprite sheet up. In top left click Slice , then set Type to Grid by Cell Size and then make sure that Pixel Size is adjusted so that you get the dimensions you want for the sprite (e.g. if it's 32 by 32, then set both X and Y to 32). There should now be squares around each sprite, however it is not saved until you press the Apply button in the top right. Now when you create the Singleton Scriptable Object for Sprite Data this time, put in the number of frames that you sliced up in Variance -> Element0 -> Size . To set the delay between the frames, you need to add the total delay otherwise the frames will appear on top of each other - so if you want a 1 second delay between each frame you set each element to be 1, 2 (1+1), 3 (2+1) and 4 (3+1).","title":"Multi Frame Sprite"},{"location":"development/How-to-Sprite/#changing-your-sprite","text":"To control your sprite in your code, you must first create the sprite object as a child of the object you want to use the sprite for. To demonstrate, we will go into the crowbar object and double click to bring up the prefab and all it's children. If you change the Present Sprite Set to durden It will now show your Durden sprite. From this point, you can change the present sprite by calling baseSpriteHandler.ChangeSprite(Variable) , where Variable is an enum state (e.g. SpriteState.Idle) to which will allow you to change your Multi-Frame sprite. You can also change variants if you need to modify its orientation by calling baseSpriteHandler.ChangeSpriteVariant(Variable) , where Variable is again a number.","title":"Changing your sprite"},{"location":"development/How-to-Sprite/#how-to-make-and-import-paletteable-sprites","text":"This guide will help you make sprites that have their colors defined by a palette that can be altered at runtime. This guide was written earlier in development, it is still useable, but not recommended to be used if you are not yet comfortable with importing sprites. Please use the above method. Even if you are starting with an ordinary sprite sheet, the process is more of an art than a science. That being said, with some practice the results are very neat: With this system it could be possible to code dyes, paints, spells, or other features that change the color of objects in the middle of the game! Note: At time of writing, this system is only confirmed to work with items which make use of the ItemAttributesV2 script.","title":"How to make and import paletteable sprites"},{"location":"development/How-to-Sprite/#creating-the-paletteable-sprite-texture","text":"The colors of a paletteable sprite indicate which swatches of the palette to blend together and how to blend them. So, in their unshaded form, they look almost nothing like what the results might produce. Understandably, it would be difficult to create something like this using an ordinary image editor. With that in mind, a custom image editing tool has been made to work with this format. It is a web tool available in Tools/paletteable sprite editor/ :","title":"Creating the paletteable sprite texture"},{"location":"development/How-to-Sprite/#features-of-the-tool","text":"On the top is where a paletteable sprite can be loaded in for previewing or editing. In fact, any image can be loaded here and that is very useful for converting an ordinary sprite into a paletteable one. In the upper-left is the palette manager for the tool. Select the palette colors by clicking on the colored boxes. Determine which palette swatches the cursor will draw from by selecting swatches for A and B. Determine how the A and B swatches are blended for drawing with the cursor by moving the slider left and right The color next to the slider provides a preview of the color that the cursor will draw Add and remove swatches In the lower-left are some actual-size preview panes. The top image under Preview shows what the paletteable sprite currently in the canvas will produce with the colors currently selected in the palette. The lower image under Paletted shows what the paletteable sprite looks like in its raw form. This is used to export the sprite from the tool by right-clicking and saving the image to disk.","title":"Features of the tool"},{"location":"development/How-to-Sprite/#typical-workflow-of-using-the-tool","text":"Suppose we want to make this ordinary sprite sheet into being paletteable: Optional: Load a sprite into the editor by browsing for the sprite and clicking Load Raw at the top. This can be an ordinary or a palettable sprite, although an ordinary sprite will not look as expected in the canvas of the tool. Loading an ordinary sprite can still be useful because you can trace the shape of the sprite, so if you choose that. You will want to open the original in another window. If loading in a paletteable sprite for editing, be sure to add or remove swatches so that the palette size is correct before loading the sprite! Note: In the case of large sprites, you may need to slice them up to get them to fit into the canvas of the tool. Add, remove and edit the colors in the palette to be ones that you think describe the object. For the best effect, colors that should always a blend of two other colors should not be their own palette color, because the blending should take care of that. For instance, in a grey jumpsuit, you might have a medium grey for the main color of the clothing, black for the shadows, black for the dark part of the belt, and white for the belt buckle. This step is very much up to artistic interpretation. Use the slider to mix the swatches to make the colors you'd like to paint. Left-click in the canvas to draw a pixel. Right-click in the canvas to remove a pixel. If a pixel refuses to paint when left-clicked try right-clicking first to remove it (known bug). For example, suppose swatch 0 is white and swatch 1 is black. If you want to paint grey because it is a blend of those colors, you can set A to swatch 0 and B to swatch 1 and blend as appropriate. If you want to paint white, you can set A or B (or both) to swatch 0 and set the blend level appropriately. When you want to check that your work is going well, it is recommended to change the palette colors to different values to verify that the blending works as expected. You might realize that it would make sense to combine two colors into one swatch or to make one swatch into two to allow for more control. Once you are done editing the sprite, you can export it by right-clicking into the Paletted image pane in the lower-left and saving it to disk. Note: The editor does not support alpha editing, every pixel is either 0% or 100% opaque. This is a quirk of the editor, the paletting shader fully supports alpha in the sprites. Consider using an external image editor to apply alpha as needed. (Or, making a better editor \ud83d\ude09)","title":"Typical workflow of using the tool"},{"location":"development/How-to-Sprite/#i-have-a-paletteable-sprite-texture-now-what","text":"It takes a few steps to import it, set the palette colors, and tell the various bits to use the palette. First, load the texture into unity and slice it into sprites as you would any sprite. Apply the new sprite to the SpriteDataSO(s) for the item you would like. Enable the checkbox(es) for Is Palette in the SpriteDataSO(s). If the item is clothing, find the item's Clothing Data and set the palette size and colors there and enable the checkbox for Is Paletted . Go into the prefab of the item with Item Attributes V2 And set the palette size and colors there, and also check Is Paletted . In the Sprite child(ren) of the object, set the size and colors of Palette .","title":"I have a paletteable sprite texture. Now what?"},{"location":"development/How-to-Sprite/#dev-notes","text":"The general idea is that each instance of an item can have a distict selection of colors for its palette. This is the rationale behind having a palette on Item Attributes V2 . However, the sprite handler currently manages its own palette drawn in most cases from sprite SO. A good improvement would be to draw from the sprite SO or clothingData (or other sources of a \"default\" palette, and then allow the ItemAttributes V2 palette to override it. Various rendering components need access to the palette to apply it to the shader they control. Search for _ColorPalette to see where this occurs. It would be convenient for changes to propagate from the Item Attributes V2 of the instance to the spriteHandlers associated with the item. Currently, there is a right-click menu for Item Attributes V2 which once used to propagate them starting in PropagatePaletteChanges but it has since broken (and even then, it only worked for Clothes). Making that work completely again may be a welcome fix.","title":"Dev notes"},{"location":"development/How-to-Sprite/#how-the-shader-works","text":"For each pixel: R component is used to select the index of swatch A. 0-31 => swatch 0, 32-63 => swatch 1, etc. G component is used to select the index of swatch B. B component is used to lerp from the color of A to the color of B in RGB color space. 0 => 100% A, 128 => 50% - 50%, 255 => 100% B. A component is used directly for the alpha of the output. The shader currently only works with a palette length of exactly 8 but it could in theory work with 256 colors. There are a few magic number 8s that would need to be changed as well to increase the palette size and/or make it dynamic.","title":"How the shader works"},{"location":"development/How-to-use-ReplaceWithPrefab.cs/","text":"How to use ReplaceWithPrefab.cs \u00b6 Sources \u00b6 Original source of script unknown. Found by Jason Weimann Video Source: Associated webpage: Steps: \u00b6 Go to Tools at the top of Unity and click on Replace With Prefab , a new window will appear. Select objects in a scene using the Hierarchy tab. In the ReplaceWithPrefab window, select a prefab in the Prefab field. Click the Replace button to replace selected objects with the prefab chosen in the Prefab field. Note: When you replace an object, the new .prefab will have all its variables (except for its transform values) reset to its parent.","title":"How to use ReplaceWithPrefab.cs"},{"location":"development/How-to-use-ReplaceWithPrefab.cs/#how-to-use-replacewithprefabcs","text":"","title":"How to use ReplaceWithPrefab.cs"},{"location":"development/How-to-use-ReplaceWithPrefab.cs/#sources","text":"Original source of script unknown. Found by Jason Weimann Video Source: Associated webpage:","title":"Sources"},{"location":"development/How-to-use-ReplaceWithPrefab.cs/#steps","text":"Go to Tools at the top of Unity and click on Replace With Prefab , a new window will appear. Select objects in a scene using the Hierarchy tab. In the ReplaceWithPrefab window, select a prefab in the Prefab field. Click the Replace button to replace selected objects with the prefab chosen in the Prefab field. Note: When you replace an object, the new .prefab will have all its variables (except for its transform values) reset to its parent.","title":"Steps:"},{"location":"development/How-to-use-UIActions/","text":"How to use UIActions \u00b6 so what you need, A I want my action to be linked to a component simply inherit from IActionGUI, implement the implement the interface requirements, when you want to show it you can manually turn it on through a command UIActionManager . Instance . SetAction ( IActionGUI , true ); IActionGUI is the component, the second parameter is whether or not to show it note that this only works for client B I wanted to be static simply make a new scriptable object inheriting from UIActionScriptableObject, the same can be done client side for turning it off and on Networking? For networking you will require the UIActionScriptableObject since it only has the server interface implemented, or in your component inheriting from IServerActionGUI, To implement the command that will be called on server on the component, note that you will have to do validation since trying client can't be trusted, NetworkIdentity GetNetworkIdentity() requires a NetworkIdentity in the same game object or parents that doesn't change across server or client, Since it uses different For activating a UI action on the client, noting that it has to be a IServerActionGUI UIinteraction, will be compatible with UIActionScriptableObject, derived stuff as well from the server use SetActionUI . SetAction ( player , IServerActionGUI , bool ) bool = what state it should be in shown or not shown","title":"How to use UIActions"},{"location":"development/How-to-use-UIActions/#how-to-use-uiactions","text":"so what you need, A I want my action to be linked to a component simply inherit from IActionGUI, implement the implement the interface requirements, when you want to show it you can manually turn it on through a command UIActionManager . Instance . SetAction ( IActionGUI , true ); IActionGUI is the component, the second parameter is whether or not to show it note that this only works for client B I wanted to be static simply make a new scriptable object inheriting from UIActionScriptableObject, the same can be done client side for turning it off and on Networking? For networking you will require the UIActionScriptableObject since it only has the server interface implemented, or in your component inheriting from IServerActionGUI, To implement the command that will be called on server on the component, note that you will have to do validation since trying client can't be trusted, NetworkIdentity GetNetworkIdentity() requires a NetworkIdentity in the same game object or parents that doesn't change across server or client, Since it uses different For activating a UI action on the client, noting that it has to be a IServerActionGUI UIinteraction, will be compatible with UIActionScriptableObject, derived stuff as well from the server use SetActionUI . SetAction ( player , IServerActionGUI , bool ) bool = what state it should be in shown or not shown","title":"How to use UIActions"},{"location":"development/How-to-use-the-in-game-debugger/","text":"Using the In-game Debugger \u00b6 In order to facilitate debugging in the game, without the help of the unity editor, we have a slightly modified version of yasirkula's debugger. (https://github.com/yasirkula/UnityIngameDebugConsole). It was designed to show debug log during the game, but you can also run custom commands on the debug console. How to use the debugger \u00b6 Once in game, press F5 and a pop-up window should appear in the lower left corner that shows the number of Debug log entries that have been written since the last time you opened the console. Click on the icon and it will expand to the top of the screen. You can scroll through the log entries, and click on one of them to expand the details. Press F5 again, or the red X in the top right corner Debug commands \u00b6 yasirkula's debugger only comes with two built in commands, help and sysinfo. help will return all available commands and their signatures. However, the debugger will collapse log entries by default so you will have to click on the log entry and then the arrow to expand it and scroll down. This will list the all the commands, their custom help message, and what function is actually called. If the function has arguments, then they are space delimited. For instance, damage-self takes three arguments, a body part, the amount of burn damage, and the amount of burn damage. It would be invoked like this damage-self Head 50 30 Adding new debug commands \u00b6 Debug functions make it much easier for you and other people to test your code. As you add new systems to the game, you can be a good citizen by writing good debug commands. Declaring function \u00b6 To add a new debug command, write a new static function and place it in UnityProject/Assets/IngameDebugConsole/Scripts/DebugLogUnitystationCommands.cs. Then add a decorator that looks like this. [ConsoleMethod(<cmd name>, <help message>)] For example: [ConsoleMethod(\"suicide\", \"kill yo' self\")] public static void RunSuicide(){ Functions can take arguments, but they only support the following types: Primitive types, string, Vector2, Vector3, Vector4, GameObject You can get more details at https://github.com/yasirkula/UnityIngameDebugConsole. Displaying output \u00b6 To output content to the debug console, use the Logger. Make sure you use the Category DebugConsole in your debug statement like this. Logger.Debug(\"Executing command\", Category.DebugConsole);","title":"Using the In-game Debugger"},{"location":"development/How-to-use-the-in-game-debugger/#using-the-in-game-debugger","text":"In order to facilitate debugging in the game, without the help of the unity editor, we have a slightly modified version of yasirkula's debugger. (https://github.com/yasirkula/UnityIngameDebugConsole). It was designed to show debug log during the game, but you can also run custom commands on the debug console.","title":"Using the In-game Debugger"},{"location":"development/How-to-use-the-in-game-debugger/#how-to-use-the-debugger","text":"Once in game, press F5 and a pop-up window should appear in the lower left corner that shows the number of Debug log entries that have been written since the last time you opened the console. Click on the icon and it will expand to the top of the screen. You can scroll through the log entries, and click on one of them to expand the details. Press F5 again, or the red X in the top right corner","title":"How to use the debugger"},{"location":"development/How-to-use-the-in-game-debugger/#debug-commands","text":"yasirkula's debugger only comes with two built in commands, help and sysinfo. help will return all available commands and their signatures. However, the debugger will collapse log entries by default so you will have to click on the log entry and then the arrow to expand it and scroll down. This will list the all the commands, their custom help message, and what function is actually called. If the function has arguments, then they are space delimited. For instance, damage-self takes three arguments, a body part, the amount of burn damage, and the amount of burn damage. It would be invoked like this damage-self Head 50 30","title":"Debug commands"},{"location":"development/How-to-use-the-in-game-debugger/#adding-new-debug-commands","text":"Debug functions make it much easier for you and other people to test your code. As you add new systems to the game, you can be a good citizen by writing good debug commands.","title":"Adding new debug commands"},{"location":"development/How-to-use-the-in-game-debugger/#declaring-function","text":"To add a new debug command, write a new static function and place it in UnityProject/Assets/IngameDebugConsole/Scripts/DebugLogUnitystationCommands.cs. Then add a decorator that looks like this. [ConsoleMethod(<cmd name>, <help message>)] For example: [ConsoleMethod(\"suicide\", \"kill yo' self\")] public static void RunSuicide(){ Functions can take arguments, but they only support the following types: Primitive types, string, Vector2, Vector3, Vector4, GameObject You can get more details at https://github.com/yasirkula/UnityIngameDebugConsole.","title":"Declaring function"},{"location":"development/How-to-use-the-in-game-debugger/#displaying-output","text":"To output content to the debug console, use the Logger. Make sure you use the Category DebugConsole in your debug statement like this. Logger.Debug(\"Executing command\", Category.DebugConsole);","title":"Displaying output"},{"location":"development/Implementing-Interactions/","text":"Implementing Interactions \u00b6 For info on the Right Click Menu, see Right Click Menu . This page describes the interaction system for Unitystation, also called Interaction Framework 2 (IF2), due to being a replacement of the previous approach to interactions. All of the code lives in Scripts/Input System/InteractionV2 and is also heavily documented if you need further info. Overview \u00b6 Interactions are implemented by way of Interactable Components , or ICs for short. These are components which implement one or more of the IF2 interfaces defined in InteractionV2/Interfaces. Additionally, each component can support one or more different Interaction Types . These interaction types represent the different sorts of things a user can do to interact with the game. Here's a brief description of the current interaction types: HandApply - Click something in the game world. The item in the active hand (or empty hand) is applied to the thing that was clicked. Targets a specific object or tile. HandActivate - Triggers when using the Activate (defaults to \"Z\") key or clicking the item while it is in the active hand. InventoryApply - Triggered by clicking an inventory slot (in which case the active hand will be the from slot) or dragging from one slot to another. AimApply - like hand apply, but does not have a specific targeted object (it simply aims where the mouse is) and can occur at some interval while the mouse is being held down after being clicked in the game world. For things like shooting a semi-auto or automatic weapon, spraying fire extinguisher, etc... MouseDrop - Click and drag a MouseDraggable object in the game world or an item in inventory and release it to drop on something in the game world (not in inventory). Dragging between 2 slots is handled by InventoryApply. PositionalHandApply - like hand apply, but also fires when clicking empty space and also stores (and transmits) the specific position on the object that was clicked - useful for large objects which have different behavior based on where they are clicked (such as tilemaps). This is separate from HandApply so that the length of netmessages can be reduced (the vector of the position is only added to the message for PositionalHandApply but can be excluded for HandApply). TileApply - (special) used only for tile interactions . For example, here's a simple IC, HasNetTab, which pops up a console tab (such as the shuttle console) when the component's object is clicked: public class HasNetworkTab : IInteractable < HandApply > { [Tooltip(\"Network tab to display.\")] public NetTabType NetTabType = NetTabType . None ; //This is invoked server side when this component's object is clicked on the client public void ServerPerformInteraction ( HandApply interaction ) { TabUpdateMessage . Send ( interaction . Performer , gameObject , NetTabType , TabAction . Open ); } } As shown above, by implementing IInteractable, the interactable component gains a few nice capabilities: * Automatic networking - IF2 takes care of informing the server of the interaction. All you need to implement is the server-side logic of the interaction and a way to communicate the result back to the client (if needed). * No mouse / keyboard logic - IF2 figures out when your component's interaction logic should be invoked. * Interaction info object - the HandApply class contains all the info you should need in order to decide what should happen. * Customization - if the default behavior doesn't meet your needs, you can override additional methods to customize how it works. This can be done to implement client side prediction, or to change the circumstances under which the interaction logic should fire (reducing the amount of messages sent to the server). Usage and FAQs \u00b6 The following sections describe IF2 in more detail for various use cases. How do I implement an interaction? \u00b6 If your interaction involves using one object on another, you should first decide which side of the interaction you want the component to live on. For example, if you have a machine that starts emitting radiation when you use an Emag on it, you could put the component on the machine or the Emag object. Once you've decided, create a new component (or modify an existing one on that object) that implements one of the IF2 interfaces, such as IInteractable, ICheckedInteractable, etc... (see InteractionV2/Interfaces) corresponding to the interaction type you want to handle. In most cases, ICheckedInteractable is the best choice (explained later): public class MyInteractableComponent : IInteractable < HandApply > For example, you can implement IInteractable<HandApply> or IInteractable<HandActivate>. You can even implement both if you want your component to support both kinds of interactions. Now you need to implement the interaction logic. Here's an example interactable component ExplodeWhenWelded, which explodes when a player tries to weld it. This demonstrates all of IF2 interfaces (except IClientInteractable which is a client-side-only one) because IPredictedCheckedInteractable implements all of the IF2 interface methods: public class ExplodeWhenWelded : IPredictedCheckedInteractable < HandApply > { //this method is invoked on the client side before informing the server of the interaction. //If it returns false, no message is sent. //If it returns true, the message is sent to the server. The server //will perform its own checks to decide which interaction should trigger (which may not be this component) //Then this is invoked on the server side, and if //it returns true, the server finally performs the interaction. //We don't NEED to implement this method, but by implementing it we can cut down on the amount of messages //sent to the server. public bool WillInteract ( HandApply interaction , NetworkSide side ) { //the Default method defines the \"default\" behavior for when a HandApply should occur, which currently //checks if the player is conscious and standing next to the thing they are clicking. if (! DefaultWillInteract . Default ( interaction , side )) return false ; //we only want this interaction to happen when a lit welder is used var welder = interaction . HandObject != null ? interaction . HandObject . GetComponent < Welder >() : null ; if ( welder == null ) return false ; if (! welder . isOn ) return false ; return true ; } //this is invoked when WillInteract returns true on the client side. //We can implement this to add client prediction logic to make the game feel more responsive. public void ClientPredictInteraction ( HandApply interaction ) { //display an explosion effect on this client that has no effect on their actual health DisplayExplosion (); } //this is invoked on the server when client requests an interaction //but the server's WillInteract method returns false. So the server may need to tell // the client their prediction is wrong, depending on how client prediction works for this // interaction. public void ServerRollbackClient ( HandApply interaction ) { //Server should send the client a message or invoke a ClientRpc telling it to //undo its prediction or reset its state to sync with the server RollbackExplosion (); } //invoked when the server recieves the interaction request and WIllinteract returns true public void ServerPerformInteraction ( HandApply interaction ) { //Server-side trigger the explosion and inform all clients of it Explode ( interaction . TargetObject ); } } An additional note about WillInteract - there are useful util methods you can use in Validations.cs which are designed to be used in WillInteract. Can I have multiple Interactable Components on an object? \u00b6 Yes, and this is encouraged if the interaction logic makes sense as its own component. For example, all objects which can be picked up have a Pickupable component, yet some objects also have other interactable components for their object-specific interactions. You can also implement multiple IF2 interfaces on a single component. When there are multiple interactable components on an object for the same interaction type, IF2 checks the components in the reverse order (from the bottom up to the top) they appear in the GameObject's component list in Unity (drag to rearrange them). It triggers the first component whose WillInteract method returns true. Additionally, if the interaction involves multiple objects (such as using an item on a machine), the components are checked on the used object first and the target object second. If ANY interactable component's WillInteract method returns true, that component's interaction logic is triggered and no further components are checked. To see detailed messages showing the order in which ICs are being checked, in Unity go to Logger > Adjust Log Levels and change Interactions to TRACE. Now any time there is an interaction, you will see log messages showing exactly what IF2 is checking in the order it is checking. Refer to the section \"Precedence of Interaction Components\" for the full details. How does WillInteract work? My client does not have enough info to implement it? \u00b6 When WillInteract runs on the clientside and returns true, a message will be sent to the server merely saying that an interaction should trigger of the indicated type (HandApply, AimApply, etc...). The server will run through the server-side version of WillInteract for all the possible components (on the used object and then the target object if there is one), and will trigger the appropriate component regardless of which component triggered on the clientside. Because of this, if you don't have enough info to decide if a given interaction should occur and don't want to block another component from triggering, you can simply do as much checking as you can on the clientside and then return true from WillInteract. Then you can add the appropriate server-side logic to WillInteract so it can properly check the interaction. How do I inform the client what happened? \u00b6 In ServerPerformInteraction, if the server makes some change to the game state, usually they will need to ensure the client knows about the new state. This is currently not part of IF2, but there are various ways this can be done, many of which can be accomplished using already implemented methods...For the most part, you can update a SyncVar, broadcast a net message to all clients or just one, or invoke a ClientRpc. Refer to the other articles on this wiki which discuss networking for more information. I don't need any networking, I just want client-side interaction logic \u00b6 Sometimes you may not need any of the networking features of Interactable (such as already having Cmds or other messages that handle it for you), or you have an interaction which only has an effect client-side. In this case, you can instead implement IClientInteractable: public class MyClientSideInteraction : MonoBehavior , IClientInteractable < HandApply > { //invoked when this is clicked. //Return value convention is the same as WillInteract, except this is only invoked on the client side. //If it returns true, the interaction is \"consumed\" - no more components will recieve the current interaction. //If it returns false, the interaction is \"passed on\" - additional components will recieve the interaction. public bool Interact ( HandApply interaction ) { //do something client side, or send a message to the server or invoke a Cmd //if we did something return true ; //if we didn't return false ; } } I implemented an interaction but my component isn't getting triggered, why? \u00b6 First of all, in Unity go to Logger > Adjust Log Levels and change Interaction to TRACE. Now you will see detailed log messages showing up explaining the order in which ICs are being checked. There's a few things to check: 1. Does your component implement WillInteract? If so, check if it is returning true when you try to interact. If it returns false, your component's interaction will not be triggered. If there is no Willinteract method, take a look at the DefaultWillInteract class to see what default logic is being used. 2. Are there any other interactable components on the object or the other object involved in the interaction? Remember that the server-side logic of WillInteract determines which components will trigger. The client-side logic only tells the server to check for an interaction. So, use the TRACE logs on the server side to see if the component is being blocked by another. Some possible fixes: * add more server-side logic to another component's WillInteract method to properly avoid the interaction. * rearrange the components so your interaction is lower (thus is checked first) * move your interactable component to the other object involved in the interaction Why should I implement ICheckedInteractable instead of just IInteractable? \u00b6 You don't HAVE to implement WillInteract - you could just put all of your validation logic and checks in ServerPerformInteraction. This will result in the logic in DefaultWillInteract.cs being used for the WillInteract check. This is probably fine for many situations. However, this can cause some problems: * Your component's interaction logic will always be triggered when it recieves an interaction, preventing other interactable components on the object from receiving the interaction. * Your component will send interaction messages to the server more often, even when the ServerPerformInteraction logic would not end up doing anything. This increases the network load on the server. Instead, if you implement ICheckedInteractable.WillInteract so that it only returns true when your interaction logic acually has something to do, then you can avoid those problems and improve network performance. How can I implement client side prediction and rollback? \u00b6 Client side prediction makes the game appear a lot more responsive to the user, even if they are having to wait for the server to process their action. Basically, the client predicts what the interaction will do and updates the game state accordingly for the user. However, if it later turns out that the server disagrees with that prediction, the client needs to \"roll back\" the prediction, resetting its state to whatever the server says is correct. To implement this, simply implement IPredictedInteractable or IPredictedCheckedInteractable. For client side prediction, you will implement ClientPredictInteraction. This is invoked when the client is sending the message to the server after WillInteract returns true. In that method, you can make your prediction and update the game state for the local client. For rollback, you will implement ServerRollbackClient. In this method, you can inform the client (sending a net message, updating a SyncVar, invoking ClientRpc, etc...) what to roll back to. How can I trigger interactions manually (such as for right click options)? \u00b6 Simply call InteractionUtils.RequestInteract, providing the details of the interaction and the component you want to trigger. How can I create tile interactions? \u00b6 Tile interactions can't be done using interactable components, because tiles are a separate kind of thing in Unity. Tile interactions are defined by creating Scriptable Objects which subclass TileInteraction. Some existing ones are already defined which may suit your needs (see Create > Interaction > Tile Interaction). If the existing scriptable objects don't support your needs, you can create a new subclass of TileInteraction following the example of the existing TileInteraction subclasses. To indicate that a given tile can have a particular interaction, you should locate that tile's asset (somewhere in Tilemaps/Resources/Tiles), and add your tile interaction asset to its Tile Interactions list. Interactions will be checked from top to bottom in the interactions list until one (if any) fires. As with interactable components, the client / server WillInteract logic works the same way - if any WIllInteract returns true on the client-side, the server will check all possible interactions on that tile using the server-side WillInteract logic, regardless of which interaction triggered on the clientside. For a thorough example of tile interactions, refer to the tile assets for ReinforcedWall and RWall in Tiles/Walls and examine their TileInteraction lists, and look at their TileInteraction assets. These define the logic for constructing and deconstructing reinforced walls (which are eventually turned into reinforced girders when deconstruction progresses far enough, which are actual prefabs instead of tiles). Reference \u00b6 The remaining sections server as a reference for the details of IF2. Interaction Types \u00b6 Here are the current interactions. More may be added as different objects require different use cases: * MouseDrop - Click and drag a MouseDraggable object in the world or an item in inventory and release it to drop on something in the world (not in inventory). Dragging between 2 slots is handled by InventoryApply. * HandApply - click something in the game world. The item in the active hand (or empty hand) is applied to the thing that was clicked. Targets a specific object or tile. * PositionalHandApply - like hand apply, but also fires on clicking empty space and stores (and transmits) the specific position on the object that was clicked - useful for large objects which have different behavior based on where they are clicked (such as tilemaps). This is separate from HandApply so that the length of netmessages can be reduced (the vector of the position is only added to the message for PositionalHandApply but can be excluded for HandApply). * AimApply - like hand apply, but does not have a specific targeted object (it simply aims where the mouse is) and can occur at some interval while the mouse is being held down after being clicked in the game world. For things like shooting a semi-auto or automatic weapon, spraying fire extinguisher, etc... * HandActivate - Triggers when using the \"Z\" key or clicking the item while it is in the active hand. * InventoryApply - Triggered by clicking an inventory slot (in which case the active hand will be the from slot) or dragging from one slot to another. Precedence of Interaction Components \u00b6 This list indicates the current order of precedence for checking for an interaction on a given frame. Consider this an \"abridged version\" of the next section. Remember, you can always turn on TRACE level logging for the Interaction category to see a detailed log of each component in the order it is being checked during an interaction. Remember that there can be multiple components on the used object or the targeted object which implement IInteractable<>, for multiple interaction types, so this list can help you figure out which will be invoked first. Further checking of interactions will be stopped as soon as any of these components indicates that an interaction has occurred. alt click throw HandApply + PositionalHandApply Components on used object (for the object in the active hand, if occupied), in reverse component order. Components on target object in reverse component order. AimApply (this runs last so you can still melee / click things if adjacent when a gun is in hand) Components on used object (object in the active hand), in reverse component order. Interaction Logic Flow \u00b6 Because the mouse can do so many things, the logic for interactions is a bit complicated. This section describes it in detail. Due to wanting to make guns more usable, there are 2 main different cases - when you have a loaded gun in the active hand vs. not. Alt click and throw are always checked first and have no special logic. When the active hand doesn't have a loaded gun: Mouse Clicked Down Is the mouse over an object with a MouseDraggable? We need to wait and see if we should drag it or click on it. Save the MouseDraggable and wait until mouse is dragged or mouse button is released. If mouse is not over a MouseDraggable... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply> components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply> components on target object in reverse component order. If no interactions have occurred, check IF2 AimApply interactions and stop as soon as one occurs. This runs last so you can still melee / click things if adjacent when a gun is in hand) Checks for IInteractable<AimApply> components on used object (object in the active hand), in reverse component order. Mouse held down. If we saved a MouseDraggable during the initial click and the mouse has been dragged far enough (past MouseDragDeadzone), initiate a drag and drop (show the drag shadow of the object being dragged). Until the object is dropped, no further interactions will occur. Mouse Button Released If we are dragging something, drop it and trigger MouseDrop interactions in the following order... IInteractable<MouseDrop> components on dropped object in reverse component order. IInteractable<MouseDrop > components on target object in reverse component order. If we saved a MouseDraggable during the initial click but the mouse never moved past the drag deadzone and we have not held the mouse button down longer than MaxClickDuration... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply > components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply > components on target object in reverse component order. If no HandApply or PositionalHandApply interactions occurred, check the old system to see if a click interaction occurs - uses InputTrigger and stop as soon as one occurs. When there is a loaded gun in the active hand. Mouse Clicked Down Are we on Harm intent? If so, shoot (trigger IInteractable<AimApply> components on Gun). If not on Harm intent... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply> components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply> components on target object in reverse component order. If no HandApply interactions occurred, check the old system to see if a click interaction occurs - uses InputTrigger and stop as soon as one occurs. If no interactions have occurred, check IF2 AimApply interactions and stop as soon as one occurs. This runs last so you can still melee / click things if adjacent when a gun is in hand) Checks for IInteractable<AimApply> components on used object (object in the active hand), in reverse component order. Mouse held down - continue shooting if we have an automatic (keep triggering IInteractable<AimApply> components on Gun).","title":"Implementing Interactions"},{"location":"development/Implementing-Interactions/#implementing-interactions","text":"For info on the Right Click Menu, see Right Click Menu . This page describes the interaction system for Unitystation, also called Interaction Framework 2 (IF2), due to being a replacement of the previous approach to interactions. All of the code lives in Scripts/Input System/InteractionV2 and is also heavily documented if you need further info.","title":"Implementing Interactions"},{"location":"development/Implementing-Interactions/#overview","text":"Interactions are implemented by way of Interactable Components , or ICs for short. These are components which implement one or more of the IF2 interfaces defined in InteractionV2/Interfaces. Additionally, each component can support one or more different Interaction Types . These interaction types represent the different sorts of things a user can do to interact with the game. Here's a brief description of the current interaction types: HandApply - Click something in the game world. The item in the active hand (or empty hand) is applied to the thing that was clicked. Targets a specific object or tile. HandActivate - Triggers when using the Activate (defaults to \"Z\") key or clicking the item while it is in the active hand. InventoryApply - Triggered by clicking an inventory slot (in which case the active hand will be the from slot) or dragging from one slot to another. AimApply - like hand apply, but does not have a specific targeted object (it simply aims where the mouse is) and can occur at some interval while the mouse is being held down after being clicked in the game world. For things like shooting a semi-auto or automatic weapon, spraying fire extinguisher, etc... MouseDrop - Click and drag a MouseDraggable object in the game world or an item in inventory and release it to drop on something in the game world (not in inventory). Dragging between 2 slots is handled by InventoryApply. PositionalHandApply - like hand apply, but also fires when clicking empty space and also stores (and transmits) the specific position on the object that was clicked - useful for large objects which have different behavior based on where they are clicked (such as tilemaps). This is separate from HandApply so that the length of netmessages can be reduced (the vector of the position is only added to the message for PositionalHandApply but can be excluded for HandApply). TileApply - (special) used only for tile interactions . For example, here's a simple IC, HasNetTab, which pops up a console tab (such as the shuttle console) when the component's object is clicked: public class HasNetworkTab : IInteractable < HandApply > { [Tooltip(\"Network tab to display.\")] public NetTabType NetTabType = NetTabType . None ; //This is invoked server side when this component's object is clicked on the client public void ServerPerformInteraction ( HandApply interaction ) { TabUpdateMessage . Send ( interaction . Performer , gameObject , NetTabType , TabAction . Open ); } } As shown above, by implementing IInteractable, the interactable component gains a few nice capabilities: * Automatic networking - IF2 takes care of informing the server of the interaction. All you need to implement is the server-side logic of the interaction and a way to communicate the result back to the client (if needed). * No mouse / keyboard logic - IF2 figures out when your component's interaction logic should be invoked. * Interaction info object - the HandApply class contains all the info you should need in order to decide what should happen. * Customization - if the default behavior doesn't meet your needs, you can override additional methods to customize how it works. This can be done to implement client side prediction, or to change the circumstances under which the interaction logic should fire (reducing the amount of messages sent to the server).","title":"Overview"},{"location":"development/Implementing-Interactions/#usage-and-faqs","text":"The following sections describe IF2 in more detail for various use cases.","title":"Usage and FAQs"},{"location":"development/Implementing-Interactions/#how-do-i-implement-an-interaction","text":"If your interaction involves using one object on another, you should first decide which side of the interaction you want the component to live on. For example, if you have a machine that starts emitting radiation when you use an Emag on it, you could put the component on the machine or the Emag object. Once you've decided, create a new component (or modify an existing one on that object) that implements one of the IF2 interfaces, such as IInteractable, ICheckedInteractable, etc... (see InteractionV2/Interfaces) corresponding to the interaction type you want to handle. In most cases, ICheckedInteractable is the best choice (explained later): public class MyInteractableComponent : IInteractable < HandApply > For example, you can implement IInteractable<HandApply> or IInteractable<HandActivate>. You can even implement both if you want your component to support both kinds of interactions. Now you need to implement the interaction logic. Here's an example interactable component ExplodeWhenWelded, which explodes when a player tries to weld it. This demonstrates all of IF2 interfaces (except IClientInteractable which is a client-side-only one) because IPredictedCheckedInteractable implements all of the IF2 interface methods: public class ExplodeWhenWelded : IPredictedCheckedInteractable < HandApply > { //this method is invoked on the client side before informing the server of the interaction. //If it returns false, no message is sent. //If it returns true, the message is sent to the server. The server //will perform its own checks to decide which interaction should trigger (which may not be this component) //Then this is invoked on the server side, and if //it returns true, the server finally performs the interaction. //We don't NEED to implement this method, but by implementing it we can cut down on the amount of messages //sent to the server. public bool WillInteract ( HandApply interaction , NetworkSide side ) { //the Default method defines the \"default\" behavior for when a HandApply should occur, which currently //checks if the player is conscious and standing next to the thing they are clicking. if (! DefaultWillInteract . Default ( interaction , side )) return false ; //we only want this interaction to happen when a lit welder is used var welder = interaction . HandObject != null ? interaction . HandObject . GetComponent < Welder >() : null ; if ( welder == null ) return false ; if (! welder . isOn ) return false ; return true ; } //this is invoked when WillInteract returns true on the client side. //We can implement this to add client prediction logic to make the game feel more responsive. public void ClientPredictInteraction ( HandApply interaction ) { //display an explosion effect on this client that has no effect on their actual health DisplayExplosion (); } //this is invoked on the server when client requests an interaction //but the server's WillInteract method returns false. So the server may need to tell // the client their prediction is wrong, depending on how client prediction works for this // interaction. public void ServerRollbackClient ( HandApply interaction ) { //Server should send the client a message or invoke a ClientRpc telling it to //undo its prediction or reset its state to sync with the server RollbackExplosion (); } //invoked when the server recieves the interaction request and WIllinteract returns true public void ServerPerformInteraction ( HandApply interaction ) { //Server-side trigger the explosion and inform all clients of it Explode ( interaction . TargetObject ); } } An additional note about WillInteract - there are useful util methods you can use in Validations.cs which are designed to be used in WillInteract.","title":"How do I implement an interaction?"},{"location":"development/Implementing-Interactions/#can-i-have-multiple-interactable-components-on-an-object","text":"Yes, and this is encouraged if the interaction logic makes sense as its own component. For example, all objects which can be picked up have a Pickupable component, yet some objects also have other interactable components for their object-specific interactions. You can also implement multiple IF2 interfaces on a single component. When there are multiple interactable components on an object for the same interaction type, IF2 checks the components in the reverse order (from the bottom up to the top) they appear in the GameObject's component list in Unity (drag to rearrange them). It triggers the first component whose WillInteract method returns true. Additionally, if the interaction involves multiple objects (such as using an item on a machine), the components are checked on the used object first and the target object second. If ANY interactable component's WillInteract method returns true, that component's interaction logic is triggered and no further components are checked. To see detailed messages showing the order in which ICs are being checked, in Unity go to Logger > Adjust Log Levels and change Interactions to TRACE. Now any time there is an interaction, you will see log messages showing exactly what IF2 is checking in the order it is checking. Refer to the section \"Precedence of Interaction Components\" for the full details.","title":"Can I have multiple Interactable Components on an object?"},{"location":"development/Implementing-Interactions/#how-does-willinteract-work-my-client-does-not-have-enough-info-to-implement-it","text":"When WillInteract runs on the clientside and returns true, a message will be sent to the server merely saying that an interaction should trigger of the indicated type (HandApply, AimApply, etc...). The server will run through the server-side version of WillInteract for all the possible components (on the used object and then the target object if there is one), and will trigger the appropriate component regardless of which component triggered on the clientside. Because of this, if you don't have enough info to decide if a given interaction should occur and don't want to block another component from triggering, you can simply do as much checking as you can on the clientside and then return true from WillInteract. Then you can add the appropriate server-side logic to WillInteract so it can properly check the interaction.","title":"How does WillInteract work? My client does not have enough info to implement it?"},{"location":"development/Implementing-Interactions/#how-do-i-inform-the-client-what-happened","text":"In ServerPerformInteraction, if the server makes some change to the game state, usually they will need to ensure the client knows about the new state. This is currently not part of IF2, but there are various ways this can be done, many of which can be accomplished using already implemented methods...For the most part, you can update a SyncVar, broadcast a net message to all clients or just one, or invoke a ClientRpc. Refer to the other articles on this wiki which discuss networking for more information.","title":"How do I inform the client what happened?"},{"location":"development/Implementing-Interactions/#i-dont-need-any-networking-i-just-want-client-side-interaction-logic","text":"Sometimes you may not need any of the networking features of Interactable (such as already having Cmds or other messages that handle it for you), or you have an interaction which only has an effect client-side. In this case, you can instead implement IClientInteractable: public class MyClientSideInteraction : MonoBehavior , IClientInteractable < HandApply > { //invoked when this is clicked. //Return value convention is the same as WillInteract, except this is only invoked on the client side. //If it returns true, the interaction is \"consumed\" - no more components will recieve the current interaction. //If it returns false, the interaction is \"passed on\" - additional components will recieve the interaction. public bool Interact ( HandApply interaction ) { //do something client side, or send a message to the server or invoke a Cmd //if we did something return true ; //if we didn't return false ; } }","title":"I don't need any networking, I just want client-side interaction logic"},{"location":"development/Implementing-Interactions/#i-implemented-an-interaction-but-my-component-isnt-getting-triggered-why","text":"First of all, in Unity go to Logger > Adjust Log Levels and change Interaction to TRACE. Now you will see detailed log messages showing up explaining the order in which ICs are being checked. There's a few things to check: 1. Does your component implement WillInteract? If so, check if it is returning true when you try to interact. If it returns false, your component's interaction will not be triggered. If there is no Willinteract method, take a look at the DefaultWillInteract class to see what default logic is being used. 2. Are there any other interactable components on the object or the other object involved in the interaction? Remember that the server-side logic of WillInteract determines which components will trigger. The client-side logic only tells the server to check for an interaction. So, use the TRACE logs on the server side to see if the component is being blocked by another. Some possible fixes: * add more server-side logic to another component's WillInteract method to properly avoid the interaction. * rearrange the components so your interaction is lower (thus is checked first) * move your interactable component to the other object involved in the interaction","title":"I implemented an interaction but my component isn't getting triggered, why?"},{"location":"development/Implementing-Interactions/#why-should-i-implement-icheckedinteractable-instead-of-just-iinteractable","text":"You don't HAVE to implement WillInteract - you could just put all of your validation logic and checks in ServerPerformInteraction. This will result in the logic in DefaultWillInteract.cs being used for the WillInteract check. This is probably fine for many situations. However, this can cause some problems: * Your component's interaction logic will always be triggered when it recieves an interaction, preventing other interactable components on the object from receiving the interaction. * Your component will send interaction messages to the server more often, even when the ServerPerformInteraction logic would not end up doing anything. This increases the network load on the server. Instead, if you implement ICheckedInteractable.WillInteract so that it only returns true when your interaction logic acually has something to do, then you can avoid those problems and improve network performance.","title":"Why should I implement ICheckedInteractable instead of just IInteractable?"},{"location":"development/Implementing-Interactions/#how-can-i-implement-client-side-prediction-and-rollback","text":"Client side prediction makes the game appear a lot more responsive to the user, even if they are having to wait for the server to process their action. Basically, the client predicts what the interaction will do and updates the game state accordingly for the user. However, if it later turns out that the server disagrees with that prediction, the client needs to \"roll back\" the prediction, resetting its state to whatever the server says is correct. To implement this, simply implement IPredictedInteractable or IPredictedCheckedInteractable. For client side prediction, you will implement ClientPredictInteraction. This is invoked when the client is sending the message to the server after WillInteract returns true. In that method, you can make your prediction and update the game state for the local client. For rollback, you will implement ServerRollbackClient. In this method, you can inform the client (sending a net message, updating a SyncVar, invoking ClientRpc, etc...) what to roll back to.","title":"How can I implement client side prediction and rollback?"},{"location":"development/Implementing-Interactions/#how-can-i-trigger-interactions-manually-such-as-for-right-click-options","text":"Simply call InteractionUtils.RequestInteract, providing the details of the interaction and the component you want to trigger.","title":"How can I trigger interactions manually (such as for right click options)?"},{"location":"development/Implementing-Interactions/#how-can-i-create-tile-interactions","text":"Tile interactions can't be done using interactable components, because tiles are a separate kind of thing in Unity. Tile interactions are defined by creating Scriptable Objects which subclass TileInteraction. Some existing ones are already defined which may suit your needs (see Create > Interaction > Tile Interaction). If the existing scriptable objects don't support your needs, you can create a new subclass of TileInteraction following the example of the existing TileInteraction subclasses. To indicate that a given tile can have a particular interaction, you should locate that tile's asset (somewhere in Tilemaps/Resources/Tiles), and add your tile interaction asset to its Tile Interactions list. Interactions will be checked from top to bottom in the interactions list until one (if any) fires. As with interactable components, the client / server WillInteract logic works the same way - if any WIllInteract returns true on the client-side, the server will check all possible interactions on that tile using the server-side WillInteract logic, regardless of which interaction triggered on the clientside. For a thorough example of tile interactions, refer to the tile assets for ReinforcedWall and RWall in Tiles/Walls and examine their TileInteraction lists, and look at their TileInteraction assets. These define the logic for constructing and deconstructing reinforced walls (which are eventually turned into reinforced girders when deconstruction progresses far enough, which are actual prefabs instead of tiles).","title":"How can I create tile interactions?"},{"location":"development/Implementing-Interactions/#reference","text":"The remaining sections server as a reference for the details of IF2.","title":"Reference"},{"location":"development/Implementing-Interactions/#interaction-types","text":"Here are the current interactions. More may be added as different objects require different use cases: * MouseDrop - Click and drag a MouseDraggable object in the world or an item in inventory and release it to drop on something in the world (not in inventory). Dragging between 2 slots is handled by InventoryApply. * HandApply - click something in the game world. The item in the active hand (or empty hand) is applied to the thing that was clicked. Targets a specific object or tile. * PositionalHandApply - like hand apply, but also fires on clicking empty space and stores (and transmits) the specific position on the object that was clicked - useful for large objects which have different behavior based on where they are clicked (such as tilemaps). This is separate from HandApply so that the length of netmessages can be reduced (the vector of the position is only added to the message for PositionalHandApply but can be excluded for HandApply). * AimApply - like hand apply, but does not have a specific targeted object (it simply aims where the mouse is) and can occur at some interval while the mouse is being held down after being clicked in the game world. For things like shooting a semi-auto or automatic weapon, spraying fire extinguisher, etc... * HandActivate - Triggers when using the \"Z\" key or clicking the item while it is in the active hand. * InventoryApply - Triggered by clicking an inventory slot (in which case the active hand will be the from slot) or dragging from one slot to another.","title":"Interaction Types"},{"location":"development/Implementing-Interactions/#precedence-of-interaction-components","text":"This list indicates the current order of precedence for checking for an interaction on a given frame. Consider this an \"abridged version\" of the next section. Remember, you can always turn on TRACE level logging for the Interaction category to see a detailed log of each component in the order it is being checked during an interaction. Remember that there can be multiple components on the used object or the targeted object which implement IInteractable<>, for multiple interaction types, so this list can help you figure out which will be invoked first. Further checking of interactions will be stopped as soon as any of these components indicates that an interaction has occurred. alt click throw HandApply + PositionalHandApply Components on used object (for the object in the active hand, if occupied), in reverse component order. Components on target object in reverse component order. AimApply (this runs last so you can still melee / click things if adjacent when a gun is in hand) Components on used object (object in the active hand), in reverse component order.","title":"Precedence of Interaction Components"},{"location":"development/Implementing-Interactions/#interaction-logic-flow","text":"Because the mouse can do so many things, the logic for interactions is a bit complicated. This section describes it in detail. Due to wanting to make guns more usable, there are 2 main different cases - when you have a loaded gun in the active hand vs. not. Alt click and throw are always checked first and have no special logic. When the active hand doesn't have a loaded gun: Mouse Clicked Down Is the mouse over an object with a MouseDraggable? We need to wait and see if we should drag it or click on it. Save the MouseDraggable and wait until mouse is dragged or mouse button is released. If mouse is not over a MouseDraggable... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply> components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply> components on target object in reverse component order. If no interactions have occurred, check IF2 AimApply interactions and stop as soon as one occurs. This runs last so you can still melee / click things if adjacent when a gun is in hand) Checks for IInteractable<AimApply> components on used object (object in the active hand), in reverse component order. Mouse held down. If we saved a MouseDraggable during the initial click and the mouse has been dragged far enough (past MouseDragDeadzone), initiate a drag and drop (show the drag shadow of the object being dragged). Until the object is dropped, no further interactions will occur. Mouse Button Released If we are dragging something, drop it and trigger MouseDrop interactions in the following order... IInteractable<MouseDrop> components on dropped object in reverse component order. IInteractable<MouseDrop > components on target object in reverse component order. If we saved a MouseDraggable during the initial click but the mouse never moved past the drag deadzone and we have not held the mouse button down longer than MaxClickDuration... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply > components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply > components on target object in reverse component order. If no HandApply or PositionalHandApply interactions occurred, check the old system to see if a click interaction occurs - uses InputTrigger and stop as soon as one occurs. When there is a loaded gun in the active hand. Mouse Clicked Down Are we on Harm intent? If so, shoot (trigger IInteractable<AimApply> components on Gun). If not on Harm intent... IF2 - HandApply and PositionalHandApply - check interactions in the following order until one occurs. IInteractable<HandApply or PositionalHandApply> components on used object (for the object in the active hand, if occupied), in reverse component order. IInteractable<HandApply or PositionalHandApply> components on target object in reverse component order. If no HandApply interactions occurred, check the old system to see if a click interaction occurs - uses InputTrigger and stop as soon as one occurs. If no interactions have occurred, check IF2 AimApply interactions and stop as soon as one occurs. This runs last so you can still melee / click things if adjacent when a gun is in hand) Checks for IInteractable<AimApply> components on used object (object in the active hand), in reverse component order. Mouse held down - continue shooting if we have an automatic (keep triggering IInteractable<AimApply> components on Gun).","title":"Interaction Logic Flow"},{"location":"development/Inventory-System/","text":"Inventory System \u00b6 This page describes the new inventory system. This system is designed to be a general purpose way to allow ANY object to store one or more items. That includes players, backpacks, fire cabinets, paper bins, and even consoles which accept an ID card as input. There should be no more need to implement custom \"storage\" logic for each object - they can just hook into the inventory system, and immediately gain the functionality provided by the system. More detailed information is available in the various inventory system classes and comments. If you have any questions, difficulties with using the system, or encounter any bugs, please reach out to @chairbender on Discord. This is a new system, so we'd like to address any usability concerns you might have as soon as possible. Inventory System Overview \u00b6 An object gains the ability to store items by attaching an ItemStorage component. An ItemStorage provides one or more ItemSlot s, accessible via the ItemStorage API. ItemSlot can store one item or be empty. The ItemStorage component has 3 critical editor fields: Storage Structure - (required) defines which slots are available in this object. It can have 0 or more indexed slots (slots which are identified by a number, starting from 0) and named slots (identified by a NamedSlot enum value). These SOs (Scriptable Objects) currently live in Resources/ScriptableObjects/Inventory/Structure Storage Capacity - (required) defines what is allowed to fit in the various slots of this object. Storage Populator - (optional) defines how the slots should be populated when the item spawns. Storage Capacity \u00b6 Storage capacity is any ScriptableObject which subclasses ItemStorageCapacity . For example, DefinedStorageCapacity defines which kinds of items can fit in each slot, and SlotCapacity provides a simple global rule for what can fit in any slot on the object. If these aren't enough, you can simply implement your own subclass. The currently capacity classes allow you to define capacity based on the item's size and/or via a combination of whitelisted, blacklisted, and required ItemTrait s (defined on each prefab via the ItemAttributes component). For more info, refer to the wiki page on the Trait system . These SOs live in Resources/ScriptableObjects/Inventory/Structure Storage Populator \u00b6 Storage populator is any ScriptableObject which subclasses ItemStoragePopulator , which defines how to populate an ItemStorage. These are used to define the prefabs that should go in each slot. For example, NamedSlotStoragePopulator defines which prefab go in each named slot. As another example, the AutoOccupationStoragePopulator populates a player character's storage when they spawn based on the player's occupation (and each occupation's storage is defined using a NamedSlotStoragePopulator, in addition to a standard populator used across all occupations). Storage Populators can also be used in other situations, not just when an object spawns. Simply call the ItemStorage.ServerPopulate method and provide the instance of ItemStoragePopulator that should be used. These SOs currently live in Resources/ScriptableObjects/Inventory/Populators. Visibility \u00b6 The server knows all of the contents of every slot at all times. However, each client only knows the contents of the slots that the server has informed them about. Each ItemSlot has a list of observer players which will recieve updates when the slot's contents change on the server. Generally, a player is always an observer of every slot in their inventory or within any ItemStorage carried in their inventory. Using the ItemSlot.SererAddObserverPlayer and ItemSlot.ServerRemoveObserverPlayer , a client can be added/removed as an observer for a particular item slot. This can be used if the client should be allowed to look into the contents of an object. UI Slots \u00b6 The UI provides a number of objects with UI_ItemSlot components. These provide a view into a particular ItemSlot (set using UI_ItemSlot.LinkSlot ). The image displayed in the slot is based on the object's current sprite, and can be refreshed using UI_ItemSlot.RefreshImage , or manually set to a particular image using UI_ItemSlot.UpdateImage . For convenience, you can also use Pickupable.RefreshUISlotImage and other methods to update the UI slot image for an object via the Pickupable component of an object. Logging \u00b6 The inventory system provides very detailed logging describing everything that is happening during population, inventory movement, etc... Just turn on TRACE level logging for the Inventory category to see these detailed messages. Usage and FAQs \u00b6 The following sections describe the inventory system in more detail for various use cases. How do I move stuff into / out of / between slots? \u00b6 The Inventory class provides static methods for performing all possible inventory operations. Refer to the method documentation there for details. Briefly, there are 3 main kinds of inventory movements: * Add - item isn't in any slots, and will be added to a slot. * Remove - item is currently in a slot, and will be removed from that slot (can be dropped, despawned, or even thrown) * Transfer - item is in one slot and will be moved directly to another slot How do I check on the current status of things in inventory? \u00b6 An ItemSlot has everything that is possible to know about a particularl item slot. You can obtain these directly using the static factory methods on ItemSlot , but it's usually more convenient to access ItemSlots using the methods on ItemStorage and Pickupable components. The ItemStorage component on an object provides a way to access the item slots of that object. The Pickupable component on an object lets you see the slot that object is currently in (if it's in a slot). Both components also provide various utility methods for performing other common tasks relating to inventory. How can I know where an object is in the world when it's in a slot? \u00b6 Use our GameObject.AssumedWorldPositionServer extension or ObjectBehaviour.AssumedWorldPositionServer - this will return the correct position of the object regardless of if it's stored in something. If you have any sort of position-based logic which should still function when the object is in inventory, you should use this. Any other means of getting the position may return HiddenPos (off in lala land) or an inaccurate position. How can I react to an object being moved in inventory? \u00b6 Simply have your component implement IServerInventoryMove for server side logic or IClientInventoryMove for client side logic. The hook methods will be called when your component's object is moved into, out of, or within the inventory system. Note that the client-side inventory movement methods are only invoked for movements which the client is aware of (generally, only the local player's own inventory and anything they are currently looking into). How can I react to the contents of a particular ItemSlot changing? \u00b6 You can subscribe to the events ItemSlot.OnSlotContentsChangeServer and ItemSlot.OnSlotContentsChangeClient . These will be fired whenever the contents of that item slot changes. Note that the client-side version is only called for slots that the client is aware of (generally, only the local player's own inventory and anything they are currently looking into). How do I update the sprite shown in the UI slots? \u00b6 If your sprite has changed and you want to reflect that change in the UI, simply get the Pickupable component of your object and call Pickupable.RefreshUISlotImage . This will automatically update the sprite based on your object's current sprite. It's safe to call this even if your object is not currently in a slot, so go ahead and just call this whenever your object's sprite changes. How do I create instances of these various Scriptable Objects? \u00b6 In the Project pane in Unity, right click and go to Create > Inventory to see all the currently defined SOs relating to inventory. My inventory movement isn't working, why? \u00b6 Turn the Inventory logging level up to TRACE to see detailed explanations of everything happening in the inventory system, including why a particular movement has been rejected. Some common things to check: * What storage capacity / slot capacity is being used for the slot you are trying to move the item into? * Are the item's ItemTraits properly defined in its ItemAttributes component? * Does the item storage you are trying to move the item into actually have the slot?","title":"Inventory System"},{"location":"development/Inventory-System/#inventory-system","text":"This page describes the new inventory system. This system is designed to be a general purpose way to allow ANY object to store one or more items. That includes players, backpacks, fire cabinets, paper bins, and even consoles which accept an ID card as input. There should be no more need to implement custom \"storage\" logic for each object - they can just hook into the inventory system, and immediately gain the functionality provided by the system. More detailed information is available in the various inventory system classes and comments. If you have any questions, difficulties with using the system, or encounter any bugs, please reach out to @chairbender on Discord. This is a new system, so we'd like to address any usability concerns you might have as soon as possible.","title":"Inventory System"},{"location":"development/Inventory-System/#inventory-system-overview","text":"An object gains the ability to store items by attaching an ItemStorage component. An ItemStorage provides one or more ItemSlot s, accessible via the ItemStorage API. ItemSlot can store one item or be empty. The ItemStorage component has 3 critical editor fields: Storage Structure - (required) defines which slots are available in this object. It can have 0 or more indexed slots (slots which are identified by a number, starting from 0) and named slots (identified by a NamedSlot enum value). These SOs (Scriptable Objects) currently live in Resources/ScriptableObjects/Inventory/Structure Storage Capacity - (required) defines what is allowed to fit in the various slots of this object. Storage Populator - (optional) defines how the slots should be populated when the item spawns.","title":"Inventory System Overview"},{"location":"development/Inventory-System/#storage-capacity","text":"Storage capacity is any ScriptableObject which subclasses ItemStorageCapacity . For example, DefinedStorageCapacity defines which kinds of items can fit in each slot, and SlotCapacity provides a simple global rule for what can fit in any slot on the object. If these aren't enough, you can simply implement your own subclass. The currently capacity classes allow you to define capacity based on the item's size and/or via a combination of whitelisted, blacklisted, and required ItemTrait s (defined on each prefab via the ItemAttributes component). For more info, refer to the wiki page on the Trait system . These SOs live in Resources/ScriptableObjects/Inventory/Structure","title":"Storage Capacity"},{"location":"development/Inventory-System/#storage-populator","text":"Storage populator is any ScriptableObject which subclasses ItemStoragePopulator , which defines how to populate an ItemStorage. These are used to define the prefabs that should go in each slot. For example, NamedSlotStoragePopulator defines which prefab go in each named slot. As another example, the AutoOccupationStoragePopulator populates a player character's storage when they spawn based on the player's occupation (and each occupation's storage is defined using a NamedSlotStoragePopulator, in addition to a standard populator used across all occupations). Storage Populators can also be used in other situations, not just when an object spawns. Simply call the ItemStorage.ServerPopulate method and provide the instance of ItemStoragePopulator that should be used. These SOs currently live in Resources/ScriptableObjects/Inventory/Populators.","title":"Storage Populator"},{"location":"development/Inventory-System/#visibility","text":"The server knows all of the contents of every slot at all times. However, each client only knows the contents of the slots that the server has informed them about. Each ItemSlot has a list of observer players which will recieve updates when the slot's contents change on the server. Generally, a player is always an observer of every slot in their inventory or within any ItemStorage carried in their inventory. Using the ItemSlot.SererAddObserverPlayer and ItemSlot.ServerRemoveObserverPlayer , a client can be added/removed as an observer for a particular item slot. This can be used if the client should be allowed to look into the contents of an object.","title":"Visibility"},{"location":"development/Inventory-System/#ui-slots","text":"The UI provides a number of objects with UI_ItemSlot components. These provide a view into a particular ItemSlot (set using UI_ItemSlot.LinkSlot ). The image displayed in the slot is based on the object's current sprite, and can be refreshed using UI_ItemSlot.RefreshImage , or manually set to a particular image using UI_ItemSlot.UpdateImage . For convenience, you can also use Pickupable.RefreshUISlotImage and other methods to update the UI slot image for an object via the Pickupable component of an object.","title":"UI Slots"},{"location":"development/Inventory-System/#logging","text":"The inventory system provides very detailed logging describing everything that is happening during population, inventory movement, etc... Just turn on TRACE level logging for the Inventory category to see these detailed messages.","title":"Logging"},{"location":"development/Inventory-System/#usage-and-faqs","text":"The following sections describe the inventory system in more detail for various use cases.","title":"Usage and FAQs"},{"location":"development/Inventory-System/#how-do-i-move-stuff-into-out-of-between-slots","text":"The Inventory class provides static methods for performing all possible inventory operations. Refer to the method documentation there for details. Briefly, there are 3 main kinds of inventory movements: * Add - item isn't in any slots, and will be added to a slot. * Remove - item is currently in a slot, and will be removed from that slot (can be dropped, despawned, or even thrown) * Transfer - item is in one slot and will be moved directly to another slot","title":"How do I move stuff into / out of / between slots?"},{"location":"development/Inventory-System/#how-do-i-check-on-the-current-status-of-things-in-inventory","text":"An ItemSlot has everything that is possible to know about a particularl item slot. You can obtain these directly using the static factory methods on ItemSlot , but it's usually more convenient to access ItemSlots using the methods on ItemStorage and Pickupable components. The ItemStorage component on an object provides a way to access the item slots of that object. The Pickupable component on an object lets you see the slot that object is currently in (if it's in a slot). Both components also provide various utility methods for performing other common tasks relating to inventory.","title":"How do I check on the current status of things in inventory?"},{"location":"development/Inventory-System/#how-can-i-know-where-an-object-is-in-the-world-when-its-in-a-slot","text":"Use our GameObject.AssumedWorldPositionServer extension or ObjectBehaviour.AssumedWorldPositionServer - this will return the correct position of the object regardless of if it's stored in something. If you have any sort of position-based logic which should still function when the object is in inventory, you should use this. Any other means of getting the position may return HiddenPos (off in lala land) or an inaccurate position.","title":"How can I know where an object is in the world when it's in a slot?"},{"location":"development/Inventory-System/#how-can-i-react-to-an-object-being-moved-in-inventory","text":"Simply have your component implement IServerInventoryMove for server side logic or IClientInventoryMove for client side logic. The hook methods will be called when your component's object is moved into, out of, or within the inventory system. Note that the client-side inventory movement methods are only invoked for movements which the client is aware of (generally, only the local player's own inventory and anything they are currently looking into).","title":"How can I react to an object being moved in inventory?"},{"location":"development/Inventory-System/#how-can-i-react-to-the-contents-of-a-particular-itemslot-changing","text":"You can subscribe to the events ItemSlot.OnSlotContentsChangeServer and ItemSlot.OnSlotContentsChangeClient . These will be fired whenever the contents of that item slot changes. Note that the client-side version is only called for slots that the client is aware of (generally, only the local player's own inventory and anything they are currently looking into).","title":"How can I react to the contents of a particular ItemSlot changing?"},{"location":"development/Inventory-System/#how-do-i-update-the-sprite-shown-in-the-ui-slots","text":"If your sprite has changed and you want to reflect that change in the UI, simply get the Pickupable component of your object and call Pickupable.RefreshUISlotImage . This will automatically update the sprite based on your object's current sprite. It's safe to call this even if your object is not currently in a slot, so go ahead and just call this whenever your object's sprite changes.","title":"How do I update the sprite shown in the UI slots?"},{"location":"development/Inventory-System/#how-do-i-create-instances-of-these-various-scriptable-objects","text":"In the Project pane in Unity, right click and go to Create > Inventory to see all the currently defined SOs relating to inventory.","title":"How do I create instances of these various Scriptable Objects?"},{"location":"development/Inventory-System/#my-inventory-movement-isnt-working-why","text":"Turn the Inventory logging level up to TRACE to see detailed explanations of everything happening in the inventory system, including why a particular movement has been rejected. Some common things to check: * What storage capacity / slot capacity is being used for the slot you are trying to move the item into? * Are the item's ItemTraits properly defined in its ItemAttributes component? * Does the item storage you are trying to move the item into actually have the slot?","title":"My inventory movement isn't working, why?"},{"location":"development/Item-Traits-System/","text":"Item Traits System \u00b6 This page briefly describes the Item Traits system. When we say \"item\" we usually mean \"things you can pick up\", but I think we would also use them for objects (things you can't pick up, like canisters, machines, etc...) An ItemTrait is an instance of the ItemTrait Scriptable Object (or a subclass). Each object can have one or more ItemTraits assigned to it, via the ItemAttributes component. Currently, these are used in the Inventory System to define what is allowed to go in a given object's item slots. These are also used to determine whether certain interactions can occur (for example, a canister checks if the object being used on it has the \"Wrench\" ItemTrait). Any traits which need to be frequently referenced throughout the codebase can be added to the CommonTraits singleton SO to avoid having to assign them to each individual component that wants to use them. All ItemTrait assets currently live in Resources/ScriptableObjects/Traits.","title":"Item Traits System"},{"location":"development/Item-Traits-System/#item-traits-system","text":"This page briefly describes the Item Traits system. When we say \"item\" we usually mean \"things you can pick up\", but I think we would also use them for objects (things you can't pick up, like canisters, machines, etc...) An ItemTrait is an instance of the ItemTrait Scriptable Object (or a subclass). Each object can have one or more ItemTraits assigned to it, via the ItemAttributes component. Currently, these are used in the Inventory System to define what is allowed to go in a given object's item slots. These are also used to determine whether certain interactions can occur (for example, a canister checks if the object being used on it has the \"Wrench\" ItemTrait). Any traits which need to be frequently referenced throughout the codebase can be added to the CommonTraits singleton SO to avoid having to assign them to each individual component that wants to use them. All ItemTrait assets currently live in Resources/ScriptableObjects/Traits.","title":"Item Traits System"},{"location":"development/Mirror-Upgrade-Customization-Notes/","text":"Mirror Upgrade Customization Notes \u00b6 This documents the customizations we've done on Mirror which will need to be manually upgraded when we upgrade mirror. On 22/02/2021 Mirror was updated to version 30.5.3 by this PR https://github.com/unitystation/unitystation/pull/6083 All the custom unitystation code in the mirror code should be labled by : //CUSTOM UNITYSTATION CODE// I manually patched in this fix until it is included in the latest mirror asset store release: https://github.com/vis2k/Mirror/commit/0e1bc8110fb3cc4e162464a2e080eac6c70ab95e Once asset store release is upgraded we can switch to it and overwrite this fix. Increase performance with isDirty flag here: https://github.com/unitystation/unitystation/commit/ff96560277c727dc262881873e2262cf3e571850#diff-bfbd1e91b0913c114ca897e7d6b7cc62 Implement all of the changes for our custom observer system found here (search for NetworkIdentity, NetworkBehaviour and NetworkServer for the big commits): In order from oldest to newest (oldest first): https://github.com/unitystation/unitystation/commit/271f5da9e2fb762c10a0b4ff3fd0adb19d8deadd#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/commit/779a83272e1ec0744a87f0ed4fe7cbf5868e3a39#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/commit/de185ba2d272e7a92907d124c3e2ac09c4882a99#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/pull/4194/commits","title":"Mirror Upgrade Customization Notes"},{"location":"development/Mirror-Upgrade-Customization-Notes/#mirror-upgrade-customization-notes","text":"This documents the customizations we've done on Mirror which will need to be manually upgraded when we upgrade mirror. On 22/02/2021 Mirror was updated to version 30.5.3 by this PR https://github.com/unitystation/unitystation/pull/6083 All the custom unitystation code in the mirror code should be labled by : //CUSTOM UNITYSTATION CODE// I manually patched in this fix until it is included in the latest mirror asset store release: https://github.com/vis2k/Mirror/commit/0e1bc8110fb3cc4e162464a2e080eac6c70ab95e Once asset store release is upgraded we can switch to it and overwrite this fix. Increase performance with isDirty flag here: https://github.com/unitystation/unitystation/commit/ff96560277c727dc262881873e2262cf3e571850#diff-bfbd1e91b0913c114ca897e7d6b7cc62 Implement all of the changes for our custom observer system found here (search for NetworkIdentity, NetworkBehaviour and NetworkServer for the big commits): In order from oldest to newest (oldest first): https://github.com/unitystation/unitystation/commit/271f5da9e2fb762c10a0b4ff3fd0adb19d8deadd#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/commit/779a83272e1ec0744a87f0ed4fe7cbf5868e3a39#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/commit/de185ba2d272e7a92907d124c3e2ac09c4882a99#diff-bfbd1e91b0913c114ca897e7d6b7cc62 https://github.com/unitystation/unitystation/pull/4194/commits","title":"Mirror Upgrade Customization Notes"},{"location":"development/Mirror/","text":"Mirror (Networking library) \u00b6 Packaged Mirror \u00b6 Mirror (or SpaceMirror) is now packaged in the unitystation/Mirror repository. Please see the CONTRIBUTING.md document. Mirror Upgrade Customization Notes \u00b6 See Mirror-Upgrade-Customization-Notes . Working with Mirror \u00b6 Networking Mirror sync notes SyncVar - best practices","title":"Mirror (Networking library)"},{"location":"development/Mirror/#mirror-networking-library","text":"","title":"Mirror (Networking library)"},{"location":"development/Mirror/#packaged-mirror","text":"Mirror (or SpaceMirror) is now packaged in the unitystation/Mirror repository. Please see the CONTRIBUTING.md document.","title":"Packaged Mirror"},{"location":"development/Mirror/#mirror-upgrade-customization-notes","text":"See Mirror-Upgrade-Customization-Notes .","title":"Mirror Upgrade Customization Notes"},{"location":"development/Mirror/#working-with-mirror","text":"Networking Mirror sync notes SyncVar - best practices","title":"Working with Mirror"},{"location":"development/Module-Structure/","text":"PlayerManager Sets up the local player. SoundManager Loads all sounds and plays them on demand. GameData Loads/saves game data locally, and sets other managers on scene load. SpriteManager Loads sounds and provides sprites on demand. GameManager Sets up match and manages occupations. UIManager Manages the HUD and tooltips. ObjectManager Handles the PoolManager and Cloth factory. Factories are only available to the server. Question: Is a new PoolManager instanced each round? PoolManager Manages pooling. There are methods for both clients and server. Question: When pooling bullets, the server (through a Command) is using the clientpool function instead the server pool. Is this because the server is currently not dedicated? EventManager Handles UI events. Works as a shortcut for UI events rather than adding logic. NetworkManager The custom NetworkManager. Handles connections, the lobby, player prefabs... CraftingManager Component storing all receips. EquipmentManager Doesn't seem to be doing nothing at all. Script contains Enums of equipment slots. DisplayManager Handles client resolutions and lighting.","title":"Module Structure"},{"location":"development/Multiplayer-PlayMode/","text":"Introduction to Multiplayer Playmode \u00b6 Introduced in the middle of #10052 , Multiplayer playmode is an experimental feature by Unity that aims to make multiplayer development quicker and increase productivity for developers. Enabling this feature allows you to launch up to 4 clients within the editor without rebuilding the whole game from scratch. How to Enable MPM: \u00b6 Go to window > Multiplayer Play Mode. Activate Player 2. Wait for Unity to build a library for MPM. (This process can take up to an hour.) If you see Player 2 marked as active with a green dot, You're done! Whenever you enter playmode now, Unity will automatically start a new instance for you to test multiplayer in and It will behave similarly to how clients work outside of the editor* Notes: \u00b6 Since Unity still compiles everything with editor flags, code under the #IF UNITY_ENGINE and Application.IsEditor will still run. Addressables does not work under MPM. As a result, you'll notice that audio is completely missing from instances. Unity will consume a lot of space off your SSD for each instance you enable. Make sure you have 30GBs of free storage before using this feature. In order to use MPM, you need 32GBs of RAM as each instance will use a minimum of 6GBs You only have to build the library once for one instance and Unity will copy it to other instances when needed. How to fix issues: \u00b6 Mouse inputs are not working correctly! \u00b6 In your Instance's window, go to the top left corner and hit \"Game\" then switch to \"Simulator\" then switch back to \"Game\" Mouse inputs will work correctly now. My library is corrupted! \u00b6 In the MPM window, right click on the corrupted instance's name and click on \"Show in Explorer\". Delete everything Re-Enable all instances. Wait If the issue persists: Disable all instances Right click in the asset browser and click on \"Reimport all\" Wait Re-enable only one instance (Player 2) Wait All instances use outdated code / Hot Reload keeps breaking! \u00b6 This is an issue with with MPM that cannot be fixed as of right now. Your only best bet is to restart the editor completely whenever this happens, or only work with server side code. Compiling is slower than usual! \u00b6 Disable all instances when not using them, as Unity will keep forcing you to reload the domain every time you make a change and it will attempt to copy any new changes to all instances which can take a few seconds. MPM breaks after switching branches! \u00b6 Avoid switching branches with any instances active in the background. Disable all instances and make sure they're marked as \"inactive\" before creating or switching to a new branch. If Unity gets stuck at disabling an instance, shutdown Unity completely and switch to your desired branch before opening Unity again.","title":"Introduction to [Multiplayer Playmode](https://docs.unity3d.com/Packages/com.unity.multiplayer.playmode@0.1/manual/index.html)"},{"location":"development/Multiplayer-PlayMode/#introduction-to-multiplayer-playmode","text":"Introduced in the middle of #10052 , Multiplayer playmode is an experimental feature by Unity that aims to make multiplayer development quicker and increase productivity for developers. Enabling this feature allows you to launch up to 4 clients within the editor without rebuilding the whole game from scratch.","title":"Introduction to Multiplayer Playmode"},{"location":"development/Multiplayer-PlayMode/#how-to-enable-mpm","text":"Go to window > Multiplayer Play Mode. Activate Player 2. Wait for Unity to build a library for MPM. (This process can take up to an hour.) If you see Player 2 marked as active with a green dot, You're done! Whenever you enter playmode now, Unity will automatically start a new instance for you to test multiplayer in and It will behave similarly to how clients work outside of the editor*","title":"How to Enable MPM:"},{"location":"development/Multiplayer-PlayMode/#notes","text":"Since Unity still compiles everything with editor flags, code under the #IF UNITY_ENGINE and Application.IsEditor will still run. Addressables does not work under MPM. As a result, you'll notice that audio is completely missing from instances. Unity will consume a lot of space off your SSD for each instance you enable. Make sure you have 30GBs of free storage before using this feature. In order to use MPM, you need 32GBs of RAM as each instance will use a minimum of 6GBs You only have to build the library once for one instance and Unity will copy it to other instances when needed.","title":"Notes:"},{"location":"development/Multiplayer-PlayMode/#how-to-fix-issues","text":"","title":"How to fix issues:"},{"location":"development/Multiplayer-PlayMode/#mouse-inputs-are-not-working-correctly","text":"In your Instance's window, go to the top left corner and hit \"Game\" then switch to \"Simulator\" then switch back to \"Game\" Mouse inputs will work correctly now.","title":"Mouse inputs are not working correctly!"},{"location":"development/Multiplayer-PlayMode/#my-library-is-corrupted","text":"In the MPM window, right click on the corrupted instance's name and click on \"Show in Explorer\". Delete everything Re-Enable all instances. Wait If the issue persists: Disable all instances Right click in the asset browser and click on \"Reimport all\" Wait Re-enable only one instance (Player 2) Wait","title":"My library is corrupted!"},{"location":"development/Multiplayer-PlayMode/#all-instances-use-outdated-code-hot-reload-keeps-breaking","text":"This is an issue with with MPM that cannot be fixed as of right now. Your only best bet is to restart the editor completely whenever this happens, or only work with server side code.","title":"All instances use outdated code / Hot Reload keeps breaking!"},{"location":"development/Multiplayer-PlayMode/#compiling-is-slower-than-usual","text":"Disable all instances when not using them, as Unity will keep forcing you to reload the domain every time you make a change and it will attempt to copy any new changes to all instances which can take a few seconds.","title":"Compiling is slower than usual!"},{"location":"development/Multiplayer-PlayMode/#mpm-breaks-after-switching-branches","text":"Avoid switching branches with any instances active in the background. Disable all instances and make sure they're marked as \"inactive\" before creating or switching to a new branch. If Unity gets stuck at disabling an instance, shutdown Unity completely and switch to your desired branch before opening Unity again.","title":"MPM breaks after switching branches!"},{"location":"development/Navigating-DM-codebases-%28like-tgstation%29/","text":"Since this project aims to reimplement the DM codebases in Unity, it is very useful to know how to navigate through the DM codebases so you can look up important details like specific configuration values or logic. Here's how to set things up so you can easily navigate a DM project, using tgstation as an example: Get VSCode Launch VSCode and go to the extensions menu, find the \"BYOND DM Language Support\", \"EditorConfig for VS Code\", and \"DreamMaker Language Client\" extensions. Clone or download the DM codebase you want to examine (cloning is recommended so you can pull if there's any updates). For example, for tg, assuming you have git installed, you can call git clone https://github.com/tgstation/tgstation.git Open the tgstation folder as a workspace in VScode. Now you can easily open DM files by name using the \"Go To File\" command or search for terms related to the feature you want to investigate using the search function OR Just go to /tg/station's GitHub repo and enter whatever you're looking for in the search field. Make sure to search \"In this repository\"","title":"Navigating DM codebases (like tgstation)"},{"location":"development/Networking-%28Network-Messages%29/","text":"Game that relies on information isolation a lot, like ss13, needs to have a proper network system for that. Player shouldn't know about what happens behind the wall he can't see through, at all. He shouldn't even receive that information. Popular UNet approaches like SyncVar, Command/ClientRPC don't really allow that (sending information on a need-to-know basis). That's where Network Messages come in handy! There are two types of net messages: Client (to server) \u00b6 \"Request doing something, passing some information\". Create new class (clone InteractMessage) at Scripts/Messages/Client to proceed. Client: I want to pick up object x with my left hand If you wish to reference some GameObject, you need to make sure that it is networked (has NetworkInstanceId) and pass these netIds as fields in the message. They will be turned back into GameObjects in Process() method after WaitFor. Process() method is executed on server upon arrival. First you should WaitFor all NetInstanceId's. SentBy is always being sent (implicitly). If there's just one, you can access its GameObject as NetworkObject. If there's more, use NetworkObjects[index]. Process() method is meant for validating ability to fulfil client's request (using data existing on server) and do requested actions. Server: Ok, that guy (NetworkObjects[1]) requested to pick up object (NetworkObjects[0]). I'll check their positions if they're not too far away from each other, as I never trust client. If his left hand slot is occupied I'll also ignore that request. If it's all ok I'll add that item to his inventory and send him messages to: 1. Make item disappear from world and 1. Update his inventory slot You should override Serialize and Deserialize methods for ClientMessages, mentioning base method first. To send a message just do YourClientMessage.Send(parameters) inside any GameObject with netId Server (to client(s)) \u00b6 \"Informs clients about something, providing information\". Create new class (Clone UpdateUIMessage) at Scripts/Messages/Server to proceed Server: You are receiving that information from me, but it doesn't mean that everyone does. You can use structs here. Process() method is executed on client upon arrival. Just tell client what to do here, like updating UI/printing chat message/anything clientside to visualise received message. To send a message just do YourServerMessage.Send(recipient, parameters) or YourServerMessage.SendToAll(parameters) anywhere. It's advisable to send them from [Server]-annotated methods so that client wouldn't attempt to send a server message by accident. Note that currently server can send messages to one person (using ServerMessage.SendTo), or everybody at once (using ServerMessage.SendToAll) Network proximity technology is not yet implemented, so if you want to send messages to receivers in limited area (i.e. within a room), just use SendToAll for now and it will be moved later. You don't need to override serialization for ServerMessages. When you learn how to think messages it becomes easy. This technology is robust and makes client tampering effectively useless. TODO: Sync and Prediction/Rollback","title":"Networking (Network Messages)"},{"location":"development/Networking-%28Network-Messages%29/#client-to-server","text":"\"Request doing something, passing some information\". Create new class (clone InteractMessage) at Scripts/Messages/Client to proceed. Client: I want to pick up object x with my left hand If you wish to reference some GameObject, you need to make sure that it is networked (has NetworkInstanceId) and pass these netIds as fields in the message. They will be turned back into GameObjects in Process() method after WaitFor. Process() method is executed on server upon arrival. First you should WaitFor all NetInstanceId's. SentBy is always being sent (implicitly). If there's just one, you can access its GameObject as NetworkObject. If there's more, use NetworkObjects[index]. Process() method is meant for validating ability to fulfil client's request (using data existing on server) and do requested actions. Server: Ok, that guy (NetworkObjects[1]) requested to pick up object (NetworkObjects[0]). I'll check their positions if they're not too far away from each other, as I never trust client. If his left hand slot is occupied I'll also ignore that request. If it's all ok I'll add that item to his inventory and send him messages to: 1. Make item disappear from world and 1. Update his inventory slot You should override Serialize and Deserialize methods for ClientMessages, mentioning base method first. To send a message just do YourClientMessage.Send(parameters) inside any GameObject with netId","title":"Client (to server)"},{"location":"development/Networking-%28Network-Messages%29/#server-to-clients","text":"\"Informs clients about something, providing information\". Create new class (Clone UpdateUIMessage) at Scripts/Messages/Server to proceed Server: You are receiving that information from me, but it doesn't mean that everyone does. You can use structs here. Process() method is executed on client upon arrival. Just tell client what to do here, like updating UI/printing chat message/anything clientside to visualise received message. To send a message just do YourServerMessage.Send(recipient, parameters) or YourServerMessage.SendToAll(parameters) anywhere. It's advisable to send them from [Server]-annotated methods so that client wouldn't attempt to send a server message by accident. Note that currently server can send messages to one person (using ServerMessage.SendTo), or everybody at once (using ServerMessage.SendToAll) Network proximity technology is not yet implemented, so if you want to send messages to receivers in limited area (i.e. within a room), just use SendToAll for now and it will be moved later. You don't need to override serialization for ServerMessages. When you learn how to think messages it becomes easy. This technology is robust and makes client tampering effectively useless. TODO: Sync and Prediction/Rollback","title":"Server (to client(s))"},{"location":"development/Notes-on-SyncObject-and-SyncList/","text":"Note SyncObject And SyncList Usage \u00b6 If present on a network behaviour it will synchronise the current state of the object to the client, however due to some of our changes to optimise mirror, if you change any element or change the SyncObject in anyway, you have to manually mark the netIdentity.isDirty = true, like so :::csharp public SyncList<SceneInfo> loadedScenesList = new SyncList<SceneInfo>(); public void addSceneInfo() { loadedScenesList.Add(new SceneInfo { SceneName = serverChosenMainStation, SceneType = SceneType.MainStation }); netIdentity.isDirty = true; }","title":"Note SyncObject And SyncList Usage"},{"location":"development/Notes-on-SyncObject-and-SyncList/#note-syncobject-and-synclist-usage","text":"If present on a network behaviour it will synchronise the current state of the object to the client, however due to some of our changes to optimise mirror, if you change any element or change the SyncObject in anyway, you have to manually mark the netIdentity.isDirty = true, like so :::csharp public SyncList<SceneInfo> loadedScenesList = new SyncList<SceneInfo>(); public void addSceneInfo() { loadedScenesList.Add(new SceneInfo { SceneName = serverChosenMainStation, SceneType = SceneType.MainStation }); netIdentity.isDirty = true; }","title":"Note SyncObject And SyncList Usage"},{"location":"development/Occupations/","text":"This page briefly describes how occupations (sometimes called \"jobs\") are defined. All of the possible occupations in the game are represented using an Occupation Scriptable Object. These currently live in Resources/ScriptableObjects/Occupations . Refer to the tooltips on the Occupation SO for details on what each field does. Among other settings, each Occupation references an inventory populator, which defines what their starting items will be. You can find these at Resources/ScriptableObjects/Inventory/Populators/Storage/Occupations. The list of currently selectable occupations lives in the AllowedOccupations OccupationList SO, at Resources/ScriptableObjects/Occupations. This also defines the order the occupations show up in in the occupation selection screen.","title":"Occupations"},{"location":"development/Physics-Layers/","text":"Physics Layers \u00b6 This page is a continual WIP and tries to be an up-to-date reference on the physics layers (NOT the sorting layers) in the game and what objects should be assigned to each one. As layers have evolved over time, there are definitely opportunities to clean these up, so don't take this as set in stone. Default - no prefabs should use this for their top-level object (but it seems okay to use in child objects) TransparentFX - unused? Ignore Raycast - unused? Water - unusued? UI - for UI elements Players - for the local player's game object. Walls - for walls in the station Items - for things that can be picked up - guns, ammo, paper, pen, etc... Machines - Seems to be for things which are impassable and should collide with bullets but don't fit into the other layers. It's called \"machines\" but actually lots of things that aren't machines use this. Canisters, closed closets, consoles, etc... OtherPlayers - for player objects other than the local player. Lighting - I think it's for things which interact with the lighting system. Furniture - seems to be basically the same as Machines. Probably can be merged with Machines. Bullets - for projectiles. Door Open - open doors. Door Closed - closed doors. Windows - for windows. WallMounts - for wall mounts - the things that go on walls. HiddenWalls - not sure, might be leftover. LightingSource - Not sure. Floor - for things that aren't items yet are on the floor, such as wires or pipes that have been placed. Unshootable Machines - just like machines, but doesn't collide with bullets. Currently only used by chairs. Matrix - for the Matrix object itself. Objects - doesn't appear to be used widely. If it is, can probably be merged with Machines. Ghosts - for all ghosts.","title":"Physics Layers"},{"location":"development/Physics-Layers/#physics-layers","text":"This page is a continual WIP and tries to be an up-to-date reference on the physics layers (NOT the sorting layers) in the game and what objects should be assigned to each one. As layers have evolved over time, there are definitely opportunities to clean these up, so don't take this as set in stone. Default - no prefabs should use this for their top-level object (but it seems okay to use in child objects) TransparentFX - unused? Ignore Raycast - unused? Water - unusued? UI - for UI elements Players - for the local player's game object. Walls - for walls in the station Items - for things that can be picked up - guns, ammo, paper, pen, etc... Machines - Seems to be for things which are impassable and should collide with bullets but don't fit into the other layers. It's called \"machines\" but actually lots of things that aren't machines use this. Canisters, closed closets, consoles, etc... OtherPlayers - for player objects other than the local player. Lighting - I think it's for things which interact with the lighting system. Furniture - seems to be basically the same as Machines. Probably can be merged with Machines. Bullets - for projectiles. Door Open - open doors. Door Closed - closed doors. Windows - for windows. WallMounts - for wall mounts - the things that go on walls. HiddenWalls - not sure, might be leftover. LightingSource - Not sure. Floor - for things that aren't items yet are on the floor, such as wires or pipes that have been placed. Unshootable Machines - just like machines, but doesn't collide with bullets. Currently only used by chairs. Matrix - for the Matrix object itself. Objects - doesn't appear to be used widely. If it is, can probably be merged with Machines. Ghosts - for all ghosts.","title":"Physics Layers"},{"location":"development/Projectiles/","text":"Projectiles \u00b6 Introduction to bullets \u00b6 Find bullet folder: Click on a bullet prefab that's what you will see: Double click on prefab in the folder or press \"Open prefab\": \"Bullet_9mm\" with an arrow down is main game object that will have all behavior components on it. \"projectile_87\" is an actual moving game object in the world. It moves in the local space of the \"Bullet_9mm\". Some bullets in the game emmit light or have a sprite. So if your new bullet requires a following light, you will need to add a new child game object to the moving game object. \"Bullet_9mm\" does not have a sprite or a light attached to it, but it uses LocalTrailRenderer component and LineRenderer . LocalTrailRenderer controls drawing in local space. LineRenderer is unity built-in component which renders trail. Positions control how it will be drawn. You can change values right there and see how it will look. Projectile behaviours \u00b6 There are 4 interfaces currently which allow behaviours to control projectile. IOnShoot \u00b6 /// Interface to gather shooter information /// Used for logs or chat messages public interface IOnShoot { void OnShoot ( Vector2 direction , GameObject shooter , Gun weapon , BodyPartType targetZone = BodyPartType . Chest ); } Example ProjectileDamageIntegrity : This script damages collider if it has an Integrity component. But the point is, it caches Gun and the shooter by using OnShoot so it can print a chat message and log details. Also don't forget to clear references in OnDisable . public class ProjectileDamageIntegrity : MonoBehaviour , IOnShoot , IOnHit { private GameObject shooter ; private Gun weapon ; [SerializeField] private DamageData damageData = null ; public void OnShoot ( Vector2 direction , GameObject shooter , Gun weapon , BodyPartType targetZone = BodyPartType . Chest ) { this . shooter = shooter ; this . weapon = weapon ; } public bool OnHit ( RaycastHit2D hit ) { return TryDamage ( hit ); } private bool TryDamage ( RaycastHit2D hit ) { var coll = hit . collider ; var integrity = coll . GetComponent < Integrity >(); if ( integrity == null ) return false ; integrity . ApplyDamage ( damageData . Damage , damageData . AttackType , damageData . DamageType ); Chat . AddAttackMsgToChat ( shooter , coll . gameObject , BodyPartType . None , weapon . gameObject ); Logger . LogTraceFormat ( \"Hit {0} for {1} with HealthBehaviour! bullet absorbed\" , Category . Firearms , integrity . gameObject . name , damageData . Damage ); return true ; } private void OnDisable () { weapon = null ; shooter = null ; } } IOnMove \u00b6 /// Called every time projectile moved /// Basically allows to have behaviors /// which are called when projectile moves. public interface IOnMove { bool OnMove ( Vector2 traveledDistance ); } Example is a script which limits projectiles travel distance ProjectileRangeLimited : When maximum distance is reached, it returns true which requests Bullet to despawn itself. Don't forget to reset data(count in this case) in OnDisable . /// Limits projectiles travel distance public class ProjectileRangeLimited : MonoBehaviour , IOnMove { [Tooltip(\"How many tiles it will travel.\")] [SerializeField] private float maxDistance = 15 ; private float currentDistance ; public bool OnMove ( Vector2 traveledDistance ) { return AddDistance ( traveledDistance . magnitude ); } private void OnDisable () { currentDistance = 0 ; } IOnHit \u00b6 /// Called when projectiles raycast collides with something public interface IOnHit { bool OnHit ( RaycastHit2D hit ); } Simple example ProjectileDecal : This script spawns a decal in the point where bullet hit something. public class ProjectileDecal : MonoBehaviour , IOnHit { [SerializeField] private GameObject decal = null ; [Tooltip(\"Living time of decal.\")] [SerializeField] private float animationTime = 0 ; public bool OnHit ( RaycastHit2D hit ) { var newDecal = Spawn . ClientPrefab ( decal . name , hit . point ). GameObject ; var timeLimitedDecal = newDecal . GetComponent < TimeLimitedDecal >(); timeLimitedDecal . SetUpDecal ( animationTime ); return false ; } } IOnDespawn \u00b6 public interface IOnDespawn { /// Interface for notifying components that /// game object is about to be despawned /// \"hit\" Collider responsible for despawn, new RaycastHit if nothing was hit /// \"point\" Coordinate where object is about to despawn void OnDespawn ( RaycastHit2D hit , Vector2 point ); } Example ProjectileAnimateTile : This script creates an animated tile. The behaviour needs to do it once, when bullet is about to be despawned. So if hit is null it will despawn on point . public class ProjectileAnimateTile : MonoBehaviour , IOnDespawn { [SerializeField] private AnimatedTile animatedTile = null ; [Tooltip(\"Living time of animated tile.\")] [SerializeField] private float animationTime = 0 ; public void OnDespawn ( RaycastHit2D hit , Vector2 point ) { if ( hit . collider == null ) { OnBeamEnd ( point ); } else { OnCollision ( hit ); } } private void OnBeamEnd ( Vector2 position ) { var interactableTiles = GetComponentInParent < InteractableTiles >(); interactableTiles . CreateAnimatedTile ( position , animatedTile , animationTime ); } private void OnCollision ( RaycastHit2D hit ) { var coll = hit . collider ; var interactableTiles = coll . GetComponentInParent < InteractableTiles >(); // Off setting coordinate here is needed to get exactly what tile was hit var bulletHitTarget = Vector3 . zero ; bulletHitTarget . x = hit . point . x - 0.01f * hit . normal . x ; bulletHitTarget . y = hit . point . y - 0.01f * hit . normal . y ; interactableTiles . CreateAnimatedTile ( bulletHitTarget , animatedTile , animationTime ); } } An example of getting those behaviours in Awake : Also we cache MovingProjectile . Its the child game object we talked about which moves in space. public class Bullet : Projectile { private IOnShoot [] behavioursOnShoot ; private IOnMove [] behavioursOnMove ; private IOnHit [] behavioursOnBulletHit ; private IOnDespawn [] behavioursOnBulletDespawn ; private MovingProjectile movingProjectile ; private void Awake () { behavioursOnShoot = GetComponents < IOnShoot >(); behavioursOnMove = GetComponentsInParent < IOnMove >(); behavioursOnBulletHit = GetComponents < IOnHit >(); behavioursOnBulletDespawn = GetComponents < IOnDespawn >(); movingProjectile = GetComponentInChildren < MovingProjectile >(); } So how they work and why should you use them? The behaviour pattern allows you to easily add new game mechanics without touching existing code. For example: I want my Bullet to STUN ! Creating a Projectile \u00b6 Check what bullet already has similar idea of what you want. Duplicate it with ctrl + d : Remove game objects you won't need. Warning Make sure the bullet is in the same folder as other bullets. There is pooling system which does not despawn bullets but disables them to use later. It references this folder. Pool \u00b6 Find pool with bullets: Open the pool SO. Extend elements count. Search for bullet again and drag and drop the prefab into the new created element in the pool list. Hit Processor \u00b6 Open up the Bullet component in the editor. That's what you will see: Hit processor is a Scriptable Objects which iterates through all components which are inheriting from IOnHit behaviour interface. Example DespawnOnHit : This processor iterates through all behaviours and then always returns true . When it returns true Bullet despawns the game object. public class DespawnOnHit : HitProcessor { public override bool ProcessHit ( RaycastHit2D hit , IOnHit [] behavioursOnBulletHit ) { foreach ( var behaviour in behavioursOnBulletHit ) { behaviour . OnHit ( hit ); } return true ; } } This is a simplest processor you will get. Another Example DespawnOnRequest : This one will only return true if any behaviour returns true . public class DespawnOnRequest : HitProcessor { public override bool ProcessHit ( RaycastHit2D hit , IOnHit [] behavioursOnBulletHit ) { var isRequesting = false ; foreach ( var behaviour in behavioursOnBulletHit ) { if ( behaviour . OnHit ( hit )) { isRequesting = true ; } } return isRequesting ; } } So if creating a new projectile you need to process your behaviours in a special way, you will need to create a class and inherit from HitProcessor .Write up logic you need and return true when you want bullet to be despawned. Tip Make sure you write [CreateAssetMenu(fileName = \"DespawnOnRequest\", menuName = \"ScriptableObjects/Gun/DespawnOnRequest\", order = 0)] above your class. It will allow you to create this processor in unity so you can reference it in the Bullet component. Mask Data \u00b6 Contains layers which Raycast will hit. So if you don't have Walls layer specified for example, the bullets Raycast won't detect the that it hit the wall when colliding it which will result in returning null RaycastHit . If you need your own data for the bullet, right click in this folder: And follow those steps: This will create Scriptable Objects with layer data which you can specify for your own needs and then reference in your bullet. Also using Scriptable Objects allows you to change layers right in play mode, so feel free to experiment right in game.","title":"Projectiles"},{"location":"development/Projectiles/#projectiles","text":"","title":"Projectiles"},{"location":"development/Projectiles/#introduction-to-bullets","text":"Find bullet folder: Click on a bullet prefab that's what you will see: Double click on prefab in the folder or press \"Open prefab\": \"Bullet_9mm\" with an arrow down is main game object that will have all behavior components on it. \"projectile_87\" is an actual moving game object in the world. It moves in the local space of the \"Bullet_9mm\". Some bullets in the game emmit light or have a sprite. So if your new bullet requires a following light, you will need to add a new child game object to the moving game object. \"Bullet_9mm\" does not have a sprite or a light attached to it, but it uses LocalTrailRenderer component and LineRenderer . LocalTrailRenderer controls drawing in local space. LineRenderer is unity built-in component which renders trail. Positions control how it will be drawn. You can change values right there and see how it will look.","title":"Introduction to bullets"},{"location":"development/Projectiles/#projectile-behaviours","text":"There are 4 interfaces currently which allow behaviours to control projectile.","title":"Projectile behaviours"},{"location":"development/Projectiles/#ionshoot","text":"/// Interface to gather shooter information /// Used for logs or chat messages public interface IOnShoot { void OnShoot ( Vector2 direction , GameObject shooter , Gun weapon , BodyPartType targetZone = BodyPartType . Chest ); } Example ProjectileDamageIntegrity : This script damages collider if it has an Integrity component. But the point is, it caches Gun and the shooter by using OnShoot so it can print a chat message and log details. Also don't forget to clear references in OnDisable . public class ProjectileDamageIntegrity : MonoBehaviour , IOnShoot , IOnHit { private GameObject shooter ; private Gun weapon ; [SerializeField] private DamageData damageData = null ; public void OnShoot ( Vector2 direction , GameObject shooter , Gun weapon , BodyPartType targetZone = BodyPartType . Chest ) { this . shooter = shooter ; this . weapon = weapon ; } public bool OnHit ( RaycastHit2D hit ) { return TryDamage ( hit ); } private bool TryDamage ( RaycastHit2D hit ) { var coll = hit . collider ; var integrity = coll . GetComponent < Integrity >(); if ( integrity == null ) return false ; integrity . ApplyDamage ( damageData . Damage , damageData . AttackType , damageData . DamageType ); Chat . AddAttackMsgToChat ( shooter , coll . gameObject , BodyPartType . None , weapon . gameObject ); Logger . LogTraceFormat ( \"Hit {0} for {1} with HealthBehaviour! bullet absorbed\" , Category . Firearms , integrity . gameObject . name , damageData . Damage ); return true ; } private void OnDisable () { weapon = null ; shooter = null ; } }","title":"IOnShoot"},{"location":"development/Projectiles/#ionmove","text":"/// Called every time projectile moved /// Basically allows to have behaviors /// which are called when projectile moves. public interface IOnMove { bool OnMove ( Vector2 traveledDistance ); } Example is a script which limits projectiles travel distance ProjectileRangeLimited : When maximum distance is reached, it returns true which requests Bullet to despawn itself. Don't forget to reset data(count in this case) in OnDisable . /// Limits projectiles travel distance public class ProjectileRangeLimited : MonoBehaviour , IOnMove { [Tooltip(\"How many tiles it will travel.\")] [SerializeField] private float maxDistance = 15 ; private float currentDistance ; public bool OnMove ( Vector2 traveledDistance ) { return AddDistance ( traveledDistance . magnitude ); } private void OnDisable () { currentDistance = 0 ; }","title":"IOnMove"},{"location":"development/Projectiles/#ionhit","text":"/// Called when projectiles raycast collides with something public interface IOnHit { bool OnHit ( RaycastHit2D hit ); } Simple example ProjectileDecal : This script spawns a decal in the point where bullet hit something. public class ProjectileDecal : MonoBehaviour , IOnHit { [SerializeField] private GameObject decal = null ; [Tooltip(\"Living time of decal.\")] [SerializeField] private float animationTime = 0 ; public bool OnHit ( RaycastHit2D hit ) { var newDecal = Spawn . ClientPrefab ( decal . name , hit . point ). GameObject ; var timeLimitedDecal = newDecal . GetComponent < TimeLimitedDecal >(); timeLimitedDecal . SetUpDecal ( animationTime ); return false ; } }","title":"IOnHit"},{"location":"development/Projectiles/#iondespawn","text":"public interface IOnDespawn { /// Interface for notifying components that /// game object is about to be despawned /// \"hit\" Collider responsible for despawn, new RaycastHit if nothing was hit /// \"point\" Coordinate where object is about to despawn void OnDespawn ( RaycastHit2D hit , Vector2 point ); } Example ProjectileAnimateTile : This script creates an animated tile. The behaviour needs to do it once, when bullet is about to be despawned. So if hit is null it will despawn on point . public class ProjectileAnimateTile : MonoBehaviour , IOnDespawn { [SerializeField] private AnimatedTile animatedTile = null ; [Tooltip(\"Living time of animated tile.\")] [SerializeField] private float animationTime = 0 ; public void OnDespawn ( RaycastHit2D hit , Vector2 point ) { if ( hit . collider == null ) { OnBeamEnd ( point ); } else { OnCollision ( hit ); } } private void OnBeamEnd ( Vector2 position ) { var interactableTiles = GetComponentInParent < InteractableTiles >(); interactableTiles . CreateAnimatedTile ( position , animatedTile , animationTime ); } private void OnCollision ( RaycastHit2D hit ) { var coll = hit . collider ; var interactableTiles = coll . GetComponentInParent < InteractableTiles >(); // Off setting coordinate here is needed to get exactly what tile was hit var bulletHitTarget = Vector3 . zero ; bulletHitTarget . x = hit . point . x - 0.01f * hit . normal . x ; bulletHitTarget . y = hit . point . y - 0.01f * hit . normal . y ; interactableTiles . CreateAnimatedTile ( bulletHitTarget , animatedTile , animationTime ); } } An example of getting those behaviours in Awake : Also we cache MovingProjectile . Its the child game object we talked about which moves in space. public class Bullet : Projectile { private IOnShoot [] behavioursOnShoot ; private IOnMove [] behavioursOnMove ; private IOnHit [] behavioursOnBulletHit ; private IOnDespawn [] behavioursOnBulletDespawn ; private MovingProjectile movingProjectile ; private void Awake () { behavioursOnShoot = GetComponents < IOnShoot >(); behavioursOnMove = GetComponentsInParent < IOnMove >(); behavioursOnBulletHit = GetComponents < IOnHit >(); behavioursOnBulletDespawn = GetComponents < IOnDespawn >(); movingProjectile = GetComponentInChildren < MovingProjectile >(); } So how they work and why should you use them? The behaviour pattern allows you to easily add new game mechanics without touching existing code. For example: I want my Bullet to STUN !","title":"IOnDespawn"},{"location":"development/Projectiles/#creating-a-projectile","text":"Check what bullet already has similar idea of what you want. Duplicate it with ctrl + d : Remove game objects you won't need. Warning Make sure the bullet is in the same folder as other bullets. There is pooling system which does not despawn bullets but disables them to use later. It references this folder.","title":"Creating a Projectile"},{"location":"development/Projectiles/#pool","text":"Find pool with bullets: Open the pool SO. Extend elements count. Search for bullet again and drag and drop the prefab into the new created element in the pool list.","title":"Pool"},{"location":"development/Projectiles/#hit-processor","text":"Open up the Bullet component in the editor. That's what you will see: Hit processor is a Scriptable Objects which iterates through all components which are inheriting from IOnHit behaviour interface. Example DespawnOnHit : This processor iterates through all behaviours and then always returns true . When it returns true Bullet despawns the game object. public class DespawnOnHit : HitProcessor { public override bool ProcessHit ( RaycastHit2D hit , IOnHit [] behavioursOnBulletHit ) { foreach ( var behaviour in behavioursOnBulletHit ) { behaviour . OnHit ( hit ); } return true ; } } This is a simplest processor you will get. Another Example DespawnOnRequest : This one will only return true if any behaviour returns true . public class DespawnOnRequest : HitProcessor { public override bool ProcessHit ( RaycastHit2D hit , IOnHit [] behavioursOnBulletHit ) { var isRequesting = false ; foreach ( var behaviour in behavioursOnBulletHit ) { if ( behaviour . OnHit ( hit )) { isRequesting = true ; } } return isRequesting ; } } So if creating a new projectile you need to process your behaviours in a special way, you will need to create a class and inherit from HitProcessor .Write up logic you need and return true when you want bullet to be despawned. Tip Make sure you write [CreateAssetMenu(fileName = \"DespawnOnRequest\", menuName = \"ScriptableObjects/Gun/DespawnOnRequest\", order = 0)] above your class. It will allow you to create this processor in unity so you can reference it in the Bullet component.","title":"Hit Processor"},{"location":"development/Projectiles/#mask-data","text":"Contains layers which Raycast will hit. So if you don't have Walls layer specified for example, the bullets Raycast won't detect the that it hit the wall when colliding it which will result in returning null RaycastHit . If you need your own data for the bullet, right click in this folder: And follow those steps: This will create Scriptable Objects with layer data which you can specify for your own needs and then reference in your bullet. Also using Scriptable Objects allows you to change layers right in play mode, so feel free to experiment right in game.","title":"Mask Data"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/","text":"Proper Spawning and Despawning \u00b6 This page describes the lifecycle system, which provides ways to easily spawn / despawn arbitrary objects and straightforward hooks for invoking logic when those things happen. Spawning and Despawning API \u00b6 The primary API for spawning stuff is in Spawn . Despawning is handled in Despawn . You should use these classes whenever you want to spawn or despawn anything (with one exception noted below). Refer to the documented methods for details. As an exception, spawn logic related to anything player-controlled, such as spawning the player, respawning, becoming a ghost, repossessing a body, etc...are handled in PlayerSpawn . Lifecycle \u00b6 Object Lifecycle refers to how objects are created and destroyed. Your component can hook into these events via our lifecycle interfaces . Server side spawn / despawn events can be hooked into by implementing IServerSpawn , IServerDespawn , or IServerLifecycle . Client side logic can be hooked into via implementing IClientSpawn , IClientDespawn , or IClientLifecycle . Unity already provides built in lifecycle methods as documented here , but there are some special circumstances in Unitystation which necessitate these interfaces: namely Object Pooling . For all objects, we use a technique called object pooling. Objects are created ahead of time and added to a pool, then simply moved into position in the game when an object of that type needs to be spawned. When a pooled object is despawned, it is simply returned to the pool. This avoids expensive object creation and destruction logic. It is particularly useful for things like bullets or casings, which spawn rapidly. But it creates some complications due to re-using objects which may be in different states from when they were originally despawned. The Unity lifecycle methods are unaware of object pooling, hence the need for our lifecycle interfaces. When are lifecycle hooks invoked? \u00b6 In addition to the standard Unity lifecycle ... IServerDespawn and IClientDespawn hooks are invoked when the object is going to be despawned. With IServerSpawn and IClientSpawn , it's a slightly more complicated. They are invoked in the following circumstances: * When the scene loads (invokes client and server hooks) * When a client joins (invokes only the client hooks) * When an object is spawned (invokes client and server hooks) Another way of thinking about it: * Client - hook gets invoked the first time that the client learns of the object's existence * Server - hook gets invoked when the object is first created, regardless of whether it has been mapped into the scene or spawned after the scene has loaded. What lifecycle methods should your component implement? \u00b6 Remember, due to object pooling Awake() / Start() is not enough! . Those methods will only be called when the object is first created. If your object is spawned from the pool and doesn't implement our lifecycle hooks, it will be in whatever state it was when it last despawned. Given that... 1. Awake() should be used for one-time things, which won't need to be re-run if the object is spawned from the pool. This is a good spot for caching components to fields via GetComponent() 1. Most components should implement at least IServerSpawn and should properly initialize / reset their actual mutable state there. 1. Components on objects which are mapped and configured in the scene can check for SpawnInfo.SpawnType == SpawnType.Mapped in the lifecycle hook method in order to determine if they should initialize to a \"blank slate\" state or preserve their mapped configuration. 1. (If using SyncVars, also see [[SyncVar Best Practices for Easy Networking]]. Testing / Debugging Object Lifecycle \u00b6 You should test to ensure that your object properly despawns / initializes itself, even when it is pooled. You can use the Dev Spawner / Destroyer tools to spawn and despawn your object. However, this does not test how the object behaves when it is pooled, as there's no guarantee it is spawned / despawned from the pool. You can use a special right click menu command, \"Respawn\" to simulate despawning the object into the pool and spawning it back out. Recommended testing procedure: Use dev spawner to spawn an object that contains your component. This will ensure it gets the PoolPrefabTracker component so it will be pooled. Objects which start in the scene do not have PoolPrefabTracker thus aren't pooled. Validate that your object initializes itself and works properly. In general, you mustn't rely on an object being mapped in the Scene for it to work - all objects in the game should be spawn-able (though there may be a few rare exceptions). Do something to the object in the game that would modify your component's state. Right click the object and choose the \"Respawn\" option. This will simulate putting it into the pool and taking it back out. Validate that the respawned object behaves as if it was newly-spawned and initialized, and has nothing left over from its state before it was respawned. If there is some leftover state or any errors with initialization, make sure you have properly implemented any necessary lifecycle interfaces and validate the logic you have for any Unity methods such as Awake, Start, OnStartClient, OnStartServer. Destroy your object using Dev Destroyer. Validate that the object properly destroys itself - it no longer affects the game world and there aren't any errors caused by the object being destroyed. If there are any problems, ensure you have implemented necessary destruction logic in IServerDespawn/IClientDesapwn hooks in your component. Examples \u00b6 See ItemStorage . It implements a mix of server and client side lifecycle interfaces. You can also search through the codebase for usages of the various lifecycle interfaces.","title":"Proper Spawning and Despawning"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#proper-spawning-and-despawning","text":"This page describes the lifecycle system, which provides ways to easily spawn / despawn arbitrary objects and straightforward hooks for invoking logic when those things happen.","title":"Proper Spawning and Despawning"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#spawning-and-despawning-api","text":"The primary API for spawning stuff is in Spawn . Despawning is handled in Despawn . You should use these classes whenever you want to spawn or despawn anything (with one exception noted below). Refer to the documented methods for details. As an exception, spawn logic related to anything player-controlled, such as spawning the player, respawning, becoming a ghost, repossessing a body, etc...are handled in PlayerSpawn .","title":"Spawning and Despawning API"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#lifecycle","text":"Object Lifecycle refers to how objects are created and destroyed. Your component can hook into these events via our lifecycle interfaces . Server side spawn / despawn events can be hooked into by implementing IServerSpawn , IServerDespawn , or IServerLifecycle . Client side logic can be hooked into via implementing IClientSpawn , IClientDespawn , or IClientLifecycle . Unity already provides built in lifecycle methods as documented here , but there are some special circumstances in Unitystation which necessitate these interfaces: namely Object Pooling . For all objects, we use a technique called object pooling. Objects are created ahead of time and added to a pool, then simply moved into position in the game when an object of that type needs to be spawned. When a pooled object is despawned, it is simply returned to the pool. This avoids expensive object creation and destruction logic. It is particularly useful for things like bullets or casings, which spawn rapidly. But it creates some complications due to re-using objects which may be in different states from when they were originally despawned. The Unity lifecycle methods are unaware of object pooling, hence the need for our lifecycle interfaces.","title":"Lifecycle"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#when-are-lifecycle-hooks-invoked","text":"In addition to the standard Unity lifecycle ... IServerDespawn and IClientDespawn hooks are invoked when the object is going to be despawned. With IServerSpawn and IClientSpawn , it's a slightly more complicated. They are invoked in the following circumstances: * When the scene loads (invokes client and server hooks) * When a client joins (invokes only the client hooks) * When an object is spawned (invokes client and server hooks) Another way of thinking about it: * Client - hook gets invoked the first time that the client learns of the object's existence * Server - hook gets invoked when the object is first created, regardless of whether it has been mapped into the scene or spawned after the scene has loaded.","title":"When are lifecycle hooks invoked?"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#what-lifecycle-methods-should-your-component-implement","text":"Remember, due to object pooling Awake() / Start() is not enough! . Those methods will only be called when the object is first created. If your object is spawned from the pool and doesn't implement our lifecycle hooks, it will be in whatever state it was when it last despawned. Given that... 1. Awake() should be used for one-time things, which won't need to be re-run if the object is spawned from the pool. This is a good spot for caching components to fields via GetComponent() 1. Most components should implement at least IServerSpawn and should properly initialize / reset their actual mutable state there. 1. Components on objects which are mapped and configured in the scene can check for SpawnInfo.SpawnType == SpawnType.Mapped in the lifecycle hook method in order to determine if they should initialize to a \"blank slate\" state or preserve their mapped configuration. 1. (If using SyncVars, also see [[SyncVar Best Practices for Easy Networking]].","title":"What lifecycle methods should your component implement?"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#testing-debugging-object-lifecycle","text":"You should test to ensure that your object properly despawns / initializes itself, even when it is pooled. You can use the Dev Spawner / Destroyer tools to spawn and despawn your object. However, this does not test how the object behaves when it is pooled, as there's no guarantee it is spawned / despawned from the pool. You can use a special right click menu command, \"Respawn\" to simulate despawning the object into the pool and spawning it back out. Recommended testing procedure: Use dev spawner to spawn an object that contains your component. This will ensure it gets the PoolPrefabTracker component so it will be pooled. Objects which start in the scene do not have PoolPrefabTracker thus aren't pooled. Validate that your object initializes itself and works properly. In general, you mustn't rely on an object being mapped in the Scene for it to work - all objects in the game should be spawn-able (though there may be a few rare exceptions). Do something to the object in the game that would modify your component's state. Right click the object and choose the \"Respawn\" option. This will simulate putting it into the pool and taking it back out. Validate that the respawned object behaves as if it was newly-spawned and initialized, and has nothing left over from its state before it was respawned. If there is some leftover state or any errors with initialization, make sure you have properly implemented any necessary lifecycle interfaces and validate the logic you have for any Unity methods such as Awake, Start, OnStartClient, OnStartServer. Destroy your object using Dev Destroyer. Validate that the object properly destroys itself - it no longer affects the game world and there aren't any errors caused by the object being destroyed. If there are any problems, ensure you have implemented necessary destruction logic in IServerDespawn/IClientDesapwn hooks in your component.","title":"Testing / Debugging Object Lifecycle"},{"location":"development/Proper-Spawning-and-Despawning-%28Object-Lifecycle%29/#examples","text":"See ItemStorage . It implements a mix of server and client side lifecycle interfaces. You can also search through the codebase for usages of the various lifecycle interfaces.","title":"Examples"},{"location":"development/RPC-vs-Netmsg/","text":"When looking through our code, you'll notice different that some network actions are handles differently. We have a guideline with which one to use. But take note: although many are already in the codebase, their legacy use may be wrong in comparison to current guidelines. So don't trust the code blindly! Important note: \u00b6 Any class/struct used to send data, Must be public otherwise this will cause IL errors and your Assembly will be rejected by the IL Scanner NetMsg \u00b6 Netmessages should be used in case where security of information is important. Ask yourself \"If someone fakes this, could it influence the gameplay for others\"? Be mindfull that NetMsg does create some garbage, so use it wisely! An example of a message sent by the server to a client: /// <summary> /// Message that tells client to add a ChatEvent to their chat /// </summary> public class AnnouncementMessage : ServerMessage < AnnouncementMessage . NetMessage > { public struct NetMessage : NetworkMessage { public string Text ; } public override void Process ( NetMessage msg ) { //Yeah, that will lead to n +-simultaneous tts synth requests, mary will probably struggle MaryTTS . Instance . Synthesize ( msg . Text , bytes => { Synth . Instance . PlayAnnouncement ( bytes ); } ); } public static NetMessage SendToAll ( string text ) { NetMessage msg = new NetMessage { Text = text }; SendToAll ( msg ); return msg ; } } -The class needs to be dervied from ServerMessage (if you want to send it to clients) or ClientMessage (if you want to send something to the server) -The message must contain a struct which has the variables you want to send, can be called anything but for consistancy should be call NetMessage, and is dervied from NetworkMessage. -The process function is what is called on client (or server if ClientMessage) when the message is received. -The SentToAll is static so can be called without an instance in any other script that needs to send this type of message, you create an instance of the message struct in it and fill it with the needed data, modifying the struct after it has been sent will do nothing. RPC \u00b6 RPC is a nice and clean solution to send non-secure data. An example for non-secure data is grafical-only information such as disabling a SpriteRenderer. RPC is however a clean and efficient protocol, that should be used where security is not an issue. Please note, that some insignificant graffical updates, may be important to send sparsely. For target RPCs Please do not use NetworkConnectionToClient Use NetworkConnection Instead in the Function parameter, You doing it the wrong way will cause IL errors You Should still pass in to The function x.ConnectionToClient, mirror will be able to handle conversion fine SyncVar \u00b6 SyncVar can be a simple alternative to NetMsg or RPC for sending updates to all clients. But it has some caveats for how to use it without having unexpected behavior. See SyncVar Best Practices for Easy Networking","title":"RPC vs Netmsg"},{"location":"development/RPC-vs-Netmsg/#important-note","text":"Any class/struct used to send data, Must be public otherwise this will cause IL errors and your Assembly will be rejected by the IL Scanner","title":"Important note:"},{"location":"development/RPC-vs-Netmsg/#netmsg","text":"Netmessages should be used in case where security of information is important. Ask yourself \"If someone fakes this, could it influence the gameplay for others\"? Be mindfull that NetMsg does create some garbage, so use it wisely! An example of a message sent by the server to a client: /// <summary> /// Message that tells client to add a ChatEvent to their chat /// </summary> public class AnnouncementMessage : ServerMessage < AnnouncementMessage . NetMessage > { public struct NetMessage : NetworkMessage { public string Text ; } public override void Process ( NetMessage msg ) { //Yeah, that will lead to n +-simultaneous tts synth requests, mary will probably struggle MaryTTS . Instance . Synthesize ( msg . Text , bytes => { Synth . Instance . PlayAnnouncement ( bytes ); } ); } public static NetMessage SendToAll ( string text ) { NetMessage msg = new NetMessage { Text = text }; SendToAll ( msg ); return msg ; } } -The class needs to be dervied from ServerMessage (if you want to send it to clients) or ClientMessage (if you want to send something to the server) -The message must contain a struct which has the variables you want to send, can be called anything but for consistancy should be call NetMessage, and is dervied from NetworkMessage. -The process function is what is called on client (or server if ClientMessage) when the message is received. -The SentToAll is static so can be called without an instance in any other script that needs to send this type of message, you create an instance of the message struct in it and fill it with the needed data, modifying the struct after it has been sent will do nothing.","title":"NetMsg"},{"location":"development/RPC-vs-Netmsg/#rpc","text":"RPC is a nice and clean solution to send non-secure data. An example for non-secure data is grafical-only information such as disabling a SpriteRenderer. RPC is however a clean and efficient protocol, that should be used where security is not an issue. Please note, that some insignificant graffical updates, may be important to send sparsely. For target RPCs Please do not use NetworkConnectionToClient Use NetworkConnection Instead in the Function parameter, You doing it the wrong way will cause IL errors You Should still pass in to The function x.ConnectionToClient, mirror will be able to handle conversion fine","title":"RPC"},{"location":"development/RPC-vs-Netmsg/#syncvar","text":"SyncVar can be a simple alternative to NetMsg or RPC for sending updates to all clients. But it has some caveats for how to use it without having unexpected behavior. See SyncVar Best Practices for Easy Networking","title":"SyncVar"},{"location":"development/Right-Click-Menu/","text":"Right Click Menu \u00b6 This page describes how the new right click menu works. The new system uses Scriptable Objects and allows for dynamic changes to an object's right click menu (allows changing what options are presented based on an object's state). It also allows overriding the text, sprite, and background color of the menu items and is designed to be developer friendly and easy to quickly set up. If you have any issues or akwardness trying to use it, or you want to suggest an improvement, feel free to reach out to @chairbender on Discord or create an Issue. Overview \u00b6 All possible right click options are defined as ScriptableObjects. These define the appearance of the right click option but do not define what happens when the option is selected. These are all in Resources/ScriptableObjects/Interaction/RightclickOptions. To ensure consistent ordering, there is also a RightClickOptionOrder ScriptableObject which allows defining the display order of RightClickOptions. You can modify this in the Right click canvas.prefab's Rightclick Manager component. RightclickManager (formerly Rightclick) lives on Right click canvas.prefab and manages all right click logic, similarly to what Rightclick was doing before. By default, an object's top-level right click menu button will use the first sprite on the object and a default color and name. You can override these by attaching a RightClickAppearance component. You only need to put this on objects whose right click icon appearance you want to change from the default behavior. There are 2 ways for a component to define right click menu options on its object. Generate Options with IRightClickable \u00b6 A component can implement IRightClickable to define which options should be shown based on its current state. All that is needed is to implement the method. To use this in a component: 1. Create a RightClickOption for your option if it doesn't already exist, and set up its appearance. You can do this in Unity by the Create > Interaction > Right click option menu item. You must do this in Resources/ScriptableObjects/Interaction/RightclickOptions. 1. Implement IRightClickable's GenerateRightClickOptions method. You must create a RightClickableResult and use the available methods to add right click options based on the object's state. You can return null if no options should be generated. It is recommended to use the method-chaining features of RightClickableResult to improve conciseness and readability, if possible. Using the methods on RightClickableResult, it is also possible to override the default appearance of the RightClickOption, such as modifying its background color or icon. You can have this on multiple components on a given object - all of their right click options will be added together. Here's a simple example for a behavior whose right click option doesn't depend on its state: public class ItemAttributes : NetworkBehaviour , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { //Use method chaining to simplify readability. //Note that the \"Examine\" string is the name of the RightClickOption ScriptableObject //we want to display. return RightClickableResult . Create () . AddElement ( \"Examine\" , OnExamine ); } void OnExamine () { //...performs the examination logic } } Here's a more complex example in PickUpTrigger where the options shown depends on the state: public class PickUpTrigger : InputTrigger , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { if ( PlayerManager . LocalPlayerScript . canNotInteract ()) { //return null if no options should be shown return null ; } var player = PlayerManager . LocalPlayerScript ; UISlotObject uiSlotObject = new UISlotObject ( UIManager . Hands . CurrentSlot . inventorySlot . UUID , gameObject ); if ( UIManager . CanPutItemToSlot ( uiSlotObject )) { if ( player . IsInReach ( this . gameObject , false )) { //using method chaining to enhance readability return RightClickableResult . Create () //we specify the name of the RightClickOption ScriptableObject . AddElement ( \"PickUp\" , GUIInteract ); } } return null ; } void GUIInteract () { //...performs the pickup logic } } Or, if you don't want to use method chaining, that can be done as well: Here's a more complex example in PickUpTrigger where the options shown depends on the state: public class PickUpTrigger : InputTrigger , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { var result = RightClickableResult . Create (); if ( PlayerManager . LocalPlayerScript . canNotInteract ()) { //return null or empty result if no options should be shown return result ; } var player = PlayerManager . LocalPlayerScript ; UISlotObject uiSlotObject = new UISlotObject ( UIManager . Hands . CurrentSlot . inventorySlot . UUID , gameObject ); if ( UIManager . CanPutItemToSlot ( uiSlotObject )) { if ( player . IsInReach ( this . gameObject , false )) { //add to the result, not using method chaining. result . AddElement ( \"PickUp\" , GUIInteract ); } } return result ; } void GUIInteract () { //...performs the pickup logic } } Use the [RightClickMenu] Attribute \u00b6 This should only be used for development, as it can create performance issues if there are lots of usages of it. You can put this attribute on any no-arg method of a component and a right click menu option will be generated which invokes that method. This can be useful if you have a method you want to be able to invoke in game at will. For example, if we have a lot of useful development / debugging methods we'd want to invoke on an object, we could create a developer-only component and attach it to our prefabs (remove it for release builds) to provide a sort of \"dev menu\". To use this approach: 1. Simply put the attribute on the no-arg method of the component you want to invoke. Refer to the various parameters of RightClickMenu to see how you can customize the color, label, or icon of the displayed option. By default, the attribute will show a question mark and be named after the method it is attached to. For example, here is how it is used in BatterySupplyingModule to allow toggling of charge: public class BatterySupplyingModule : ModuleSupplyingDevice { //We will see an option called \"ToggleCharge\" that invokes this method. [RightClickMethod] public void ToggleCharge () { ToggleCanCharge = ! ToggleCanCharge ; } }","title":"Right Click Menu"},{"location":"development/Right-Click-Menu/#right-click-menu","text":"This page describes how the new right click menu works. The new system uses Scriptable Objects and allows for dynamic changes to an object's right click menu (allows changing what options are presented based on an object's state). It also allows overriding the text, sprite, and background color of the menu items and is designed to be developer friendly and easy to quickly set up. If you have any issues or akwardness trying to use it, or you want to suggest an improvement, feel free to reach out to @chairbender on Discord or create an Issue.","title":"Right Click Menu"},{"location":"development/Right-Click-Menu/#overview","text":"All possible right click options are defined as ScriptableObjects. These define the appearance of the right click option but do not define what happens when the option is selected. These are all in Resources/ScriptableObjects/Interaction/RightclickOptions. To ensure consistent ordering, there is also a RightClickOptionOrder ScriptableObject which allows defining the display order of RightClickOptions. You can modify this in the Right click canvas.prefab's Rightclick Manager component. RightclickManager (formerly Rightclick) lives on Right click canvas.prefab and manages all right click logic, similarly to what Rightclick was doing before. By default, an object's top-level right click menu button will use the first sprite on the object and a default color and name. You can override these by attaching a RightClickAppearance component. You only need to put this on objects whose right click icon appearance you want to change from the default behavior. There are 2 ways for a component to define right click menu options on its object.","title":"Overview"},{"location":"development/Right-Click-Menu/#generate-options-with-irightclickable","text":"A component can implement IRightClickable to define which options should be shown based on its current state. All that is needed is to implement the method. To use this in a component: 1. Create a RightClickOption for your option if it doesn't already exist, and set up its appearance. You can do this in Unity by the Create > Interaction > Right click option menu item. You must do this in Resources/ScriptableObjects/Interaction/RightclickOptions. 1. Implement IRightClickable's GenerateRightClickOptions method. You must create a RightClickableResult and use the available methods to add right click options based on the object's state. You can return null if no options should be generated. It is recommended to use the method-chaining features of RightClickableResult to improve conciseness and readability, if possible. Using the methods on RightClickableResult, it is also possible to override the default appearance of the RightClickOption, such as modifying its background color or icon. You can have this on multiple components on a given object - all of their right click options will be added together. Here's a simple example for a behavior whose right click option doesn't depend on its state: public class ItemAttributes : NetworkBehaviour , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { //Use method chaining to simplify readability. //Note that the \"Examine\" string is the name of the RightClickOption ScriptableObject //we want to display. return RightClickableResult . Create () . AddElement ( \"Examine\" , OnExamine ); } void OnExamine () { //...performs the examination logic } } Here's a more complex example in PickUpTrigger where the options shown depends on the state: public class PickUpTrigger : InputTrigger , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { if ( PlayerManager . LocalPlayerScript . canNotInteract ()) { //return null if no options should be shown return null ; } var player = PlayerManager . LocalPlayerScript ; UISlotObject uiSlotObject = new UISlotObject ( UIManager . Hands . CurrentSlot . inventorySlot . UUID , gameObject ); if ( UIManager . CanPutItemToSlot ( uiSlotObject )) { if ( player . IsInReach ( this . gameObject , false )) { //using method chaining to enhance readability return RightClickableResult . Create () //we specify the name of the RightClickOption ScriptableObject . AddElement ( \"PickUp\" , GUIInteract ); } } return null ; } void GUIInteract () { //...performs the pickup logic } } Or, if you don't want to use method chaining, that can be done as well: Here's a more complex example in PickUpTrigger where the options shown depends on the state: public class PickUpTrigger : InputTrigger , IRightClickable { //implementation of the interface method. This is invoked by RightClickMenu when //it's time to display menu options. public RightClickableResult GenerateRightClickOptions () { var result = RightClickableResult . Create (); if ( PlayerManager . LocalPlayerScript . canNotInteract ()) { //return null or empty result if no options should be shown return result ; } var player = PlayerManager . LocalPlayerScript ; UISlotObject uiSlotObject = new UISlotObject ( UIManager . Hands . CurrentSlot . inventorySlot . UUID , gameObject ); if ( UIManager . CanPutItemToSlot ( uiSlotObject )) { if ( player . IsInReach ( this . gameObject , false )) { //add to the result, not using method chaining. result . AddElement ( \"PickUp\" , GUIInteract ); } } return result ; } void GUIInteract () { //...performs the pickup logic } }","title":"Generate Options with IRightClickable"},{"location":"development/Right-Click-Menu/#use-the-rightclickmenu-attribute","text":"This should only be used for development, as it can create performance issues if there are lots of usages of it. You can put this attribute on any no-arg method of a component and a right click menu option will be generated which invokes that method. This can be useful if you have a method you want to be able to invoke in game at will. For example, if we have a lot of useful development / debugging methods we'd want to invoke on an object, we could create a developer-only component and attach it to our prefabs (remove it for release builds) to provide a sort of \"dev menu\". To use this approach: 1. Simply put the attribute on the no-arg method of the component you want to invoke. Refer to the various parameters of RightClickMenu to see how you can customize the color, label, or icon of the displayed option. By default, the attribute will show a question mark and be named after the method it is attached to. For example, here is how it is used in BatterySupplyingModule to allow toggling of charge: public class BatterySupplyingModule : ModuleSupplyingDevice { //We will see an option called \"ToggleCharge\" that invokes this method. [RightClickMethod] public void ToggleCharge () { ToggleCanCharge = ! ToggleCanCharge ; } }","title":"Use the [RightClickMenu] Attribute"},{"location":"development/Simulating-Lag/","text":"Simulating Lag \u00b6 This page shows how to simulate lag / high ping situations when playing locally or connecting to a remote server. The approach is different depending on your operating system and version, so please refer to the appropriate section for your system. Please update this page if you run into issues and remove \"not yet tested\" if you found it to work. It's important to test with lag so that you can ensure the game still operates smoothly when someone doesn't have a great connection to the server. It's one of the key capabilities that helps the new remakes stand out from BYOND. When testing locally, make sure you are connecting to 127.0.0.1 instead of localhost (not sure if this is necessary on all OSs but it's necessary on OSX). Otherwise, most of these tools should work just fine when connecting to a remote server. Windows \u00b6 NOTE: Not yet tested. Clumsy . OSX \u00b6 They took away IPFW, so it and several tools that depended on it no longer work. We wrote a script to use the new replacement for IPFW - pfctl / dnctl. Ignore any warnings about ALTQ. Apple decided to be special and not implement the full feature set of these tools so we have to resort to undocumented workarounds. Open a terminal in the unitystation/UnityProject folder (this is the default location if you use the Terminal tab in Rider). Start lagging with: sudo ./lag.sh Stop lagging with: sudo ./stoplag.sh By default it adds 300 ms of latency. You can override this using an argument. This example shows how to set 500 ms of latency: sudo ./lag.sh 500 Several sites suggest Network Link Conditioner. However, THIS DOESN'T WORK FOR localhost or 127.0.0.1, so it's pretty useless! Linux \u00b6 NOTE: Not yet tested. netem If you found a good approach for using netem, please check in some .sh scripts to easily turn it on and off (see lag.sh and stoplag.sh for reference of how they can work).","title":"Simulating Lag"},{"location":"development/Simulating-Lag/#simulating-lag","text":"This page shows how to simulate lag / high ping situations when playing locally or connecting to a remote server. The approach is different depending on your operating system and version, so please refer to the appropriate section for your system. Please update this page if you run into issues and remove \"not yet tested\" if you found it to work. It's important to test with lag so that you can ensure the game still operates smoothly when someone doesn't have a great connection to the server. It's one of the key capabilities that helps the new remakes stand out from BYOND. When testing locally, make sure you are connecting to 127.0.0.1 instead of localhost (not sure if this is necessary on all OSs but it's necessary on OSX). Otherwise, most of these tools should work just fine when connecting to a remote server.","title":"Simulating Lag"},{"location":"development/Simulating-Lag/#windows","text":"NOTE: Not yet tested. Clumsy .","title":"Windows"},{"location":"development/Simulating-Lag/#osx","text":"They took away IPFW, so it and several tools that depended on it no longer work. We wrote a script to use the new replacement for IPFW - pfctl / dnctl. Ignore any warnings about ALTQ. Apple decided to be special and not implement the full feature set of these tools so we have to resort to undocumented workarounds. Open a terminal in the unitystation/UnityProject folder (this is the default location if you use the Terminal tab in Rider). Start lagging with: sudo ./lag.sh Stop lagging with: sudo ./stoplag.sh By default it adds 300 ms of latency. You can override this using an argument. This example shows how to set 500 ms of latency: sudo ./lag.sh 500 Several sites suggest Network Link Conditioner. However, THIS DOESN'T WORK FOR localhost or 127.0.0.1, so it's pretty useless!","title":"OSX"},{"location":"development/Simulating-Lag/#linux","text":"NOTE: Not yet tested. netem If you found a good approach for using netem, please check in some .sh scripts to easily turn it on and off (see lag.sh and stoplag.sh for reference of how they can work).","title":"Linux"},{"location":"development/Species-Notes/","text":"Species Notes \u00b6 Prefab populater \u00b6 so on the base torso prefab currently and planned for the future, There are spare slots that are used by Custom body parts on different races, Unity has a Weird way of handling lists With prefab variants, So you adding a new body part on index 7 on your custom species, when the base is only up to 6, that when you modify the base adding a new one in making it index 7 , Your custom body part on index 7 will override the base prefab, so The solution is to have big empty list, Base prefab will populate from the bottom, Custom races will populate from the top, This should reduce conflicts","title":"Species Notes"},{"location":"development/Species-Notes/#species-notes","text":"","title":"Species Notes"},{"location":"development/Species-Notes/#prefab-populater","text":"so on the base torso prefab currently and planned for the future, There are spare slots that are used by Custom body parts on different races, Unity has a Weird way of handling lists With prefab variants, So you adding a new body part on index 7 on your custom species, when the base is only up to 6, that when you modify the base adding a new one in making it index 7 , Your custom body part on index 7 will override the base prefab, so The solution is to have big empty list, Base prefab will populate from the bottom, Custom races will populate from the top, This should reduce conflicts","title":"Prefab populater"},{"location":"development/Stripping-Scenes-For-Quick-Build/","text":"First way: Navigate to Tools/QuickBuild in a toolbar Pick settings you need and press Build. Second way: 1. Go to UnityProject\\Assets\\ScriptableObjects\\SubScenes 2. Open AwayWorldList and remove all scenes from there 3. Do the same for AsteroidListSO 4. Open AdditionalSceneList and remove all the scenes, except CentCom 5. Open MainStationList and remove all stations except one you will be using Note: Map is picked at round start based on current player count. Values for that are specified in maps.json ![image](https://user-images.githubusercontent.com/19672958/151050113-f69ee28d-620f-485f-93f0-ad1d87719dfe.png) You wont be able to start a round if current player amount is less than PopMinLimit, so I suggest using **FallStation** or **SquareStation** for testing.","title":"Stripping Scenes For Quick Build"},{"location":"development/SyncVar-Best-Practices-for-Easy-Networking/","text":"The SyncVar attribute can save a lot of time and code for syncing data from server to all clients (because it avoids having to implement a custom Net Message), but many of us have struggled with understanding its peculiarities (of which it has many) especially as it pertains to how Unitystation is put together. Having used it quite a bit now, I've developed a set of simple \"best practices\" for how to use them which should hopefully save future developers from struggling with it. Proper SyncVar Usage \u00b6 These are things you should almost ALWAYS do if using syncvar. If you see places in the code where these rules are violated, be suspicious of bugs. Note that most of these tips only apply if you define a \"hook\" method. * * Do not use Gameobject in SyncVars ****, Due to our multithreaded implementation of mirror, Mirror does a get component In one of the threads outside of the main unity thread causing unity, Throw an error in the network loop causing many unforeseen consequences Use something like this Instead. public class ItemAttributes : NetworkBehavior { [SyncVar(hook = nameof(SyncOrbitObject))] private NetworkIdentity IDtarget ; private GameObject target //ues target as your main reference { get => IDtarget . gameObject ; set => SyncOrbitObject ( IDtarget , value . NetWorkIdentity ()); } } Add SyncVar to the field you want to sync. The field should ALWAYS be private, and it should NOT be editor assignable. NEVER allow the field to be directly modified by other components or in editor. If you want to configure an initial value for this field, create a separate editor field for it. public class ItemAttributes : NetworkBehavior { //allows configuring the initial value in editor - NOT a syncvar! [SerializeField] private string initialName ; //the actual syncvar [SyncVar(hook=nameof(SyncItemName))] private string itemName ; } If the field needs to be viewable externally, create a public readonly accessor: public string ItemName => itemName ; If other components need to know when the syncvar changes, create a UnityEvent they can subscribe to which you invoke in your hook method. [NonSerialized] // usually don't want these to be assignable in editor public StringEvent OnItemNameChange = new StringEvent (); // event class - declare this outside of component class class StringEvent : UnityEvent < string > { } (Only if you have a hook method) Define an EnsureInit private method and put any necessary init logic for your component in there (caching components, setting initial values) along with a check that skips the init logic if the component is already initialized. You will add this to the top of any SyncVar hook methods, OnStartClient, OnStartServer, Awake, and Start methods. This is necessary because Mirror does not guarantee that its methods will be called before Awake()/Start(), so we have to always ensure the component is initialized. Search for \"EnsureInit\" in our codebase for examples. For example, here we cache a spriteHandler component private void EnsureInit () { if (! this . spriteHandler ) { this . spriteHandler = GetComponentInChildren < SpriteHandler >(); } } (Only if you have a hook method) Define a private hook method named \"Sync(name of field)\". The line of the hook after EnsureInit should update the field based on the new value. Do NOT make a protected or public hook method. Starting the method name with Sync is important because it makes it easier for others to know that this method is exclusively for changing this syncvar. private void SyncItemName ( string oldName , string newName ) { EnsureInit () this . itemName = newName ; //any other logic needed goes here } You generally will need a hook unless the client doesn't need to invoke any special logic when the value changes. Note that Mirror actually does set the field automatically on the clientside when the hook is triggered by a server update, but if you called the hook directly on server side (instead of actually changing the field's value) it would not automatically change the value. This has created a lot of needless confusion and mistakes in the past because it is so situational, so sticking to the conventions documented on this page will avoid that confusion. (Only if you have a hook method) Override OnStartClient (make sure to use the \"override\" keyword!) and invoke the hook, passing it the current value of the field. If you are extending a component, make sure to call base.OnStartClient(). This ensures the SyncVar hook is called based on the initial value of the field that the server sends. Also call EnsureInit at the top to ensure any necessary init logic is called (Mirror may call OnStartClient before Awake/Start) //make sure to use \"override\" and use correct name \"OnStartClient\" public override void OnStartClient () { EnsureInit () SyncItemName ( this . itemName ); base . OnStartClient (); } (Only if you have a hook method) Implement the IServerSpawn interface and set the syncvar field to the initial value in the method. This is a method which is invoked when an object is being spawned, regardless of if it's coming from the pool or not. This ensures that the object is properly re-initialized when it is being spawned from the object pool. public void OnSpawnServer () { //object starts with editor-configured initial name SyncItemName ( initialName ); //if extending another component base . OnSpawnServer (); } (Only if you have a hook method) The ONLY place you are allowed to change the value of the syncvar field is via the syncvar hook and only on the server! Never change the value on the client side, and never modify the field directly. If you are on the server and you want to change the field value, call the hook method and pass it the new value. This ensures that the hook logic will always be fired on both client and server side. [Server] private void ServerChangeName ( string newName ) { //NO! BAD! DON'T DO THIS! this . itemName = newName ; //YES! GOOD! DO THIS INSTEAD! SyncItemName ( newName ); } Do not rely on a consistent ordering when it comes to syncvar changes and net messages sent from the server. Due to network latency, if you change 2 syncvars and send a net message on the server, the updates could arrive on the client in any order. Various Issues Caused by Improper SyncVar Usage \u00b6 Here's some symptoms of improper syncvar usage: Clients who join after the syncvar field has been updated during gameplay (sometimes called \"late joining clients\") will not display the correct game state. Usually caused by not calling the hook in OnStartClient, sometimes caused by failing to properly override OnStartClient (using override keyword and using the correct method name). Server player sees a different game state than the client. Usually caused by setting the syncvar field directly without going through the hook method. SyncVar hooks throwing NREs - usually caused by failing to define an EnsureInit() method and call it at the top of the SyncVar hooks. Unity is calling the SyncVar hook before Awake/Start. Client intermittently sees the incorrect game state related to a sync var. Usually caused by having SyncVar logic which has a race condition - the client is relying on the syncvar updates / server messages arriving in a particular order. A newly-spawned object behaves differently than other objects of its type. This is due to failing to have a separate editor-assignable initial value for the field or failing to reset the field in OnSpawnServer. Your SyncVar field value was set to something other than the default, then was destroyed and returned to pool, then spawned from the pool with that same field value. This is solved by implementing IServerSpawn and initializing the syncvar value to its proper initial value (either the editor-assignable value or a hardcoded default). Surprising SyncVar Facts \u00b6 Here are some of the things you might not know about how they work which explains the reasoning for the above practices. Not 100% certain on all of these but they might as well be true. SyncVar hooks don't fire on the server when the server changes the field. They only fire on the client when the client receives the new value. Thus the server player will not have the hook called. This is the reason to always change the syncvar by way of the hook method on the server. SyncVar hooks don't fire when client connects and receives the initial value of the field. This is why you should call the syncvar hook manually in OnStartClient. SyncVar only works properly on specific types of fields ( see the docs ), but Unity does not seem to complain very noisily if you use it on an invalid type - the game still builds. If your syncvar doesn't appear to be working, chances are you are using it on an invalid type. SyncVar hooks, OnStartServer and OnStartClient may be called before Unity's Awake/Start hooks. If you don't update the field's value in the syncvar hook using the new value passed to the hook method, the client-side value won't be updated. This is why you should always update the field in the first line of the hook method. It takes a varying amount of time for the server to send the updated SyncVar field to the client, so make sure the code doesn't depend on the syncvar change arriving at a particular time or in a particular order in relation to other network messages or syncvar updates. If you change 2 syncvars on the server and also send a net message, they could arrive on the client in any order.","title":"SyncVar Best Practices for Easy Networking"},{"location":"development/SyncVar-Best-Practices-for-Easy-Networking/#proper-syncvar-usage","text":"These are things you should almost ALWAYS do if using syncvar. If you see places in the code where these rules are violated, be suspicious of bugs. Note that most of these tips only apply if you define a \"hook\" method. * * Do not use Gameobject in SyncVars ****, Due to our multithreaded implementation of mirror, Mirror does a get component In one of the threads outside of the main unity thread causing unity, Throw an error in the network loop causing many unforeseen consequences Use something like this Instead. public class ItemAttributes : NetworkBehavior { [SyncVar(hook = nameof(SyncOrbitObject))] private NetworkIdentity IDtarget ; private GameObject target //ues target as your main reference { get => IDtarget . gameObject ; set => SyncOrbitObject ( IDtarget , value . NetWorkIdentity ()); } } Add SyncVar to the field you want to sync. The field should ALWAYS be private, and it should NOT be editor assignable. NEVER allow the field to be directly modified by other components or in editor. If you want to configure an initial value for this field, create a separate editor field for it. public class ItemAttributes : NetworkBehavior { //allows configuring the initial value in editor - NOT a syncvar! [SerializeField] private string initialName ; //the actual syncvar [SyncVar(hook=nameof(SyncItemName))] private string itemName ; } If the field needs to be viewable externally, create a public readonly accessor: public string ItemName => itemName ; If other components need to know when the syncvar changes, create a UnityEvent they can subscribe to which you invoke in your hook method. [NonSerialized] // usually don't want these to be assignable in editor public StringEvent OnItemNameChange = new StringEvent (); // event class - declare this outside of component class class StringEvent : UnityEvent < string > { } (Only if you have a hook method) Define an EnsureInit private method and put any necessary init logic for your component in there (caching components, setting initial values) along with a check that skips the init logic if the component is already initialized. You will add this to the top of any SyncVar hook methods, OnStartClient, OnStartServer, Awake, and Start methods. This is necessary because Mirror does not guarantee that its methods will be called before Awake()/Start(), so we have to always ensure the component is initialized. Search for \"EnsureInit\" in our codebase for examples. For example, here we cache a spriteHandler component private void EnsureInit () { if (! this . spriteHandler ) { this . spriteHandler = GetComponentInChildren < SpriteHandler >(); } } (Only if you have a hook method) Define a private hook method named \"Sync(name of field)\". The line of the hook after EnsureInit should update the field based on the new value. Do NOT make a protected or public hook method. Starting the method name with Sync is important because it makes it easier for others to know that this method is exclusively for changing this syncvar. private void SyncItemName ( string oldName , string newName ) { EnsureInit () this . itemName = newName ; //any other logic needed goes here } You generally will need a hook unless the client doesn't need to invoke any special logic when the value changes. Note that Mirror actually does set the field automatically on the clientside when the hook is triggered by a server update, but if you called the hook directly on server side (instead of actually changing the field's value) it would not automatically change the value. This has created a lot of needless confusion and mistakes in the past because it is so situational, so sticking to the conventions documented on this page will avoid that confusion. (Only if you have a hook method) Override OnStartClient (make sure to use the \"override\" keyword!) and invoke the hook, passing it the current value of the field. If you are extending a component, make sure to call base.OnStartClient(). This ensures the SyncVar hook is called based on the initial value of the field that the server sends. Also call EnsureInit at the top to ensure any necessary init logic is called (Mirror may call OnStartClient before Awake/Start) //make sure to use \"override\" and use correct name \"OnStartClient\" public override void OnStartClient () { EnsureInit () SyncItemName ( this . itemName ); base . OnStartClient (); } (Only if you have a hook method) Implement the IServerSpawn interface and set the syncvar field to the initial value in the method. This is a method which is invoked when an object is being spawned, regardless of if it's coming from the pool or not. This ensures that the object is properly re-initialized when it is being spawned from the object pool. public void OnSpawnServer () { //object starts with editor-configured initial name SyncItemName ( initialName ); //if extending another component base . OnSpawnServer (); } (Only if you have a hook method) The ONLY place you are allowed to change the value of the syncvar field is via the syncvar hook and only on the server! Never change the value on the client side, and never modify the field directly. If you are on the server and you want to change the field value, call the hook method and pass it the new value. This ensures that the hook logic will always be fired on both client and server side. [Server] private void ServerChangeName ( string newName ) { //NO! BAD! DON'T DO THIS! this . itemName = newName ; //YES! GOOD! DO THIS INSTEAD! SyncItemName ( newName ); } Do not rely on a consistent ordering when it comes to syncvar changes and net messages sent from the server. Due to network latency, if you change 2 syncvars and send a net message on the server, the updates could arrive on the client in any order.","title":"Proper SyncVar Usage"},{"location":"development/SyncVar-Best-Practices-for-Easy-Networking/#various-issues-caused-by-improper-syncvar-usage","text":"Here's some symptoms of improper syncvar usage: Clients who join after the syncvar field has been updated during gameplay (sometimes called \"late joining clients\") will not display the correct game state. Usually caused by not calling the hook in OnStartClient, sometimes caused by failing to properly override OnStartClient (using override keyword and using the correct method name). Server player sees a different game state than the client. Usually caused by setting the syncvar field directly without going through the hook method. SyncVar hooks throwing NREs - usually caused by failing to define an EnsureInit() method and call it at the top of the SyncVar hooks. Unity is calling the SyncVar hook before Awake/Start. Client intermittently sees the incorrect game state related to a sync var. Usually caused by having SyncVar logic which has a race condition - the client is relying on the syncvar updates / server messages arriving in a particular order. A newly-spawned object behaves differently than other objects of its type. This is due to failing to have a separate editor-assignable initial value for the field or failing to reset the field in OnSpawnServer. Your SyncVar field value was set to something other than the default, then was destroyed and returned to pool, then spawned from the pool with that same field value. This is solved by implementing IServerSpawn and initializing the syncvar value to its proper initial value (either the editor-assignable value or a hardcoded default).","title":"Various Issues Caused by Improper SyncVar Usage"},{"location":"development/SyncVar-Best-Practices-for-Easy-Networking/#surprising-syncvar-facts","text":"Here are some of the things you might not know about how they work which explains the reasoning for the above practices. Not 100% certain on all of these but they might as well be true. SyncVar hooks don't fire on the server when the server changes the field. They only fire on the client when the client receives the new value. Thus the server player will not have the hook called. This is the reason to always change the syncvar by way of the hook method on the server. SyncVar hooks don't fire when client connects and receives the initial value of the field. This is why you should call the syncvar hook manually in OnStartClient. SyncVar only works properly on specific types of fields ( see the docs ), but Unity does not seem to complain very noisily if you use it on an invalid type - the game still builds. If your syncvar doesn't appear to be working, chances are you are using it on an invalid type. SyncVar hooks, OnStartServer and OnStartClient may be called before Unity's Awake/Start hooks. If you don't update the field's value in the syncvar hook using the new value passed to the hook method, the client-side value won't be updated. This is why you should always update the field in the first line of the hook method. It takes a varying amount of time for the server to send the updated SyncVar field to the client, so make sure the code doesn't depend on the syncvar change arriving at a particular time or in a particular order in relation to other network messages or syncvar updates. If you change 2 syncvars on the server and also send a net message, they could arrive on the client in any order.","title":"Surprising SyncVar Facts"},{"location":"development/The-Clearance-System/","text":"What is the Clearance System? \u00b6 In simple terms, the clearance system is just another system that other pieces of code can consume in order to put functionality behind a clearance check. Clearance representing the level of access the performer of an action has at the moment of requesting it. The clearance system is a way to make sure that only people with the right clearance can do certain things. How does it work? \u00b6 The clearance system is pretty simple, it is composed of 3 main parts: The clearance definition . An enum located at Systems/Clearance/Clearance.cs that defines the different levels of clearance, or clearance for different actions/rooms. A clearance source . A class that implements the IClearanceSource interface and represents the source of the clearance. This can be a mob, a player, an item, etc. A good example of a clearance source is the ID card. It has a list of clearances. A clearance restricted . An object that has the ClearanceRestricted component attached to it. This component has clearance requirements for normal and low pop rounds. It also has a CheckType , which determines the strategy that will be used to compare the source with the requirements. How do I make an object clearance restricted? \u00b6 Add the ClearanceRestricted component to the object. Set the TypeCheck to the strategy you want to use. It could be Any or All , so it checks if any of the requirements are met or if all of them are met respectively. Implement an interaction from which you will get an IClearanceSource . Most of the time this will be an ID card you can grab from the used object during the interaction. Call ClearanceRestricted.HasClearance() passing the IClearanceSource you got from the interaction. This will return a boolean indicating if the source has the required clearance. Implementation example \u00b6 For this example we made a simple Terminal that you can swipe an ID card on and it will tell you a joke if you have the right clearance. The terminal is clearance restricted, so you can't just swipe any ID card on it. You need to have the ClownOffice clearance. The item \u00b6 The item is a simple prefab with the ClearanceRestricted component attached to it. The TypeCheck is set to Any and the clearance requirements are set to ClownOffice . This means that the terminal will only accept ID cards that have the ClownOffice clearance, but ignore if the ID has any other clearances. The interaction \u00b6 We create another component and call it JokeTerminal . This component will have a reference to the ClearanceRestricted component and will implement the IInteractable interface. This way we can add the interaction to the terminal. public class JokeTerminal : MonoBehaviour , IInteractable < HandApply > { //Internal reference to cached clearance restricted component private ClearanceRestricted clearanceRestricted ; private void Awake () { //Cache the clearance restricted component clearanceRestricted = GetComponent < ClearanceRestricted >(); } public void ServerPerformInteraction ( HandApply interaction ) { //Check if the interaction has an ID card if ( interaction . UsedObject . TryGetComponent < IDCard >( out var idCard )) { //Check if the ID card has the required clearance. IdCard compoment has a reference to an IClearanceSource if ( clearanceRestricted . HasClearance ( idCard . ClearanceSource )) { //Tell the player a joke Chat . AddExamineMsgFromServer ( interaction . Performer , \"Knock knock\" ); } else { //Tell the player they don't have the clearance Chat . AddExamineMsgFromServer ( interaction . Performer , \"You don't have the clearance to use this terminal\" ); } } } } Dos and Don'ts \u00b6 Use the ClearanceRestricted component to make an object clearance restricted. Never ever implement checking clearance yourself in your component. Grab a reference to the ClearanceRestricted component and use it to check clearance. Use the BasicClearanceSource component to make an object a clearance source, unless you have a very good reason to implement your own IClearanceSource . You can use the PerformWithClearance convenience method from ClearanceRestricted if your use case is simple enough. This method receives an IClearanceSource and two actions, one for when the clearance is met and one for when it isn't. This method will run the success or failure action accordingly. You can use the HasClearance overload from ClearanceRestricted that receives a GameObject . This method will try to get an IClearanceSource from the object and then check if the source has the required clearance. This is useful if you want to check clearance but don't know where the source could be (not in hand, not in a specific slot, etc.). It also works with mobs that could be an IClearanceSource . This method is quite expensive, so use it only when you have to.","title":"What is the Clearance System?"},{"location":"development/The-Clearance-System/#what-is-the-clearance-system","text":"In simple terms, the clearance system is just another system that other pieces of code can consume in order to put functionality behind a clearance check. Clearance representing the level of access the performer of an action has at the moment of requesting it. The clearance system is a way to make sure that only people with the right clearance can do certain things.","title":"What is the Clearance System?"},{"location":"development/The-Clearance-System/#how-does-it-work","text":"The clearance system is pretty simple, it is composed of 3 main parts: The clearance definition . An enum located at Systems/Clearance/Clearance.cs that defines the different levels of clearance, or clearance for different actions/rooms. A clearance source . A class that implements the IClearanceSource interface and represents the source of the clearance. This can be a mob, a player, an item, etc. A good example of a clearance source is the ID card. It has a list of clearances. A clearance restricted . An object that has the ClearanceRestricted component attached to it. This component has clearance requirements for normal and low pop rounds. It also has a CheckType , which determines the strategy that will be used to compare the source with the requirements.","title":"How does it work?"},{"location":"development/The-Clearance-System/#how-do-i-make-an-object-clearance-restricted","text":"Add the ClearanceRestricted component to the object. Set the TypeCheck to the strategy you want to use. It could be Any or All , so it checks if any of the requirements are met or if all of them are met respectively. Implement an interaction from which you will get an IClearanceSource . Most of the time this will be an ID card you can grab from the used object during the interaction. Call ClearanceRestricted.HasClearance() passing the IClearanceSource you got from the interaction. This will return a boolean indicating if the source has the required clearance.","title":"How do I make an object clearance restricted?"},{"location":"development/The-Clearance-System/#implementation-example","text":"For this example we made a simple Terminal that you can swipe an ID card on and it will tell you a joke if you have the right clearance. The terminal is clearance restricted, so you can't just swipe any ID card on it. You need to have the ClownOffice clearance.","title":"Implementation example"},{"location":"development/The-Clearance-System/#the-item","text":"The item is a simple prefab with the ClearanceRestricted component attached to it. The TypeCheck is set to Any and the clearance requirements are set to ClownOffice . This means that the terminal will only accept ID cards that have the ClownOffice clearance, but ignore if the ID has any other clearances.","title":"The item"},{"location":"development/The-Clearance-System/#the-interaction","text":"We create another component and call it JokeTerminal . This component will have a reference to the ClearanceRestricted component and will implement the IInteractable interface. This way we can add the interaction to the terminal. public class JokeTerminal : MonoBehaviour , IInteractable < HandApply > { //Internal reference to cached clearance restricted component private ClearanceRestricted clearanceRestricted ; private void Awake () { //Cache the clearance restricted component clearanceRestricted = GetComponent < ClearanceRestricted >(); } public void ServerPerformInteraction ( HandApply interaction ) { //Check if the interaction has an ID card if ( interaction . UsedObject . TryGetComponent < IDCard >( out var idCard )) { //Check if the ID card has the required clearance. IdCard compoment has a reference to an IClearanceSource if ( clearanceRestricted . HasClearance ( idCard . ClearanceSource )) { //Tell the player a joke Chat . AddExamineMsgFromServer ( interaction . Performer , \"Knock knock\" ); } else { //Tell the player they don't have the clearance Chat . AddExamineMsgFromServer ( interaction . Performer , \"You don't have the clearance to use this terminal\" ); } } } }","title":"The interaction"},{"location":"development/The-Clearance-System/#dos-and-donts","text":"Use the ClearanceRestricted component to make an object clearance restricted. Never ever implement checking clearance yourself in your component. Grab a reference to the ClearanceRestricted component and use it to check clearance. Use the BasicClearanceSource component to make an object a clearance source, unless you have a very good reason to implement your own IClearanceSource . You can use the PerformWithClearance convenience method from ClearanceRestricted if your use case is simple enough. This method receives an IClearanceSource and two actions, one for when the clearance is met and one for when it isn't. This method will run the success or failure action accordingly. You can use the HasClearance overload from ClearanceRestricted that receives a GameObject . This method will try to get an IClearanceSource from the object and then check if the source has the required clearance. This is useful if you want to check clearance but don't know where the source could be (not in hand, not in a specific slot, etc.). It also works with mobs that could be an IClearanceSource . This method is quite expensive, so use it only when you have to.","title":"Dos and Don'ts"},{"location":"development/Undo-RecordObject-vs-EditorUtility-SetDirty/","text":"When you need to save changes generated by scripts in the editor Which one should you use Undo-RecordObject or EditorUtility.SetDirty \u00b6 You should use both because apparently Undo-RecordObject = For objects in scenes EditorUtility.SetDirty = Objects in prefab edit mode, Majority of the time You don't know which one you're in if you do, If you do know which one it is in its best to do both Still because unity is weird, Better safe than sorry","title":"Undo RecordObject vs EditorUtility SetDirty"},{"location":"development/Undo-RecordObject-vs-EditorUtility-SetDirty/#which-one-should-you-use-undo-recordobject-or-editorutilitysetdirty","text":"You should use both because apparently Undo-RecordObject = For objects in scenes EditorUtility.SetDirty = Objects in prefab edit mode, Majority of the time You don't know which one you're in if you do, If you do know which one it is in its best to do both Still because unity is weird, Better safe than sorry","title":"Which one should you use Undo-RecordObject or EditorUtility.SetDirty"},{"location":"development/What-is-a-matrix/","text":"What is a matrix \u00b6 So, A matrix is something like a station or asteroid or shuttle, so, In the route of the world there are game objects, that are the matrices, They contain the game object for the matrix, and network identity, the children of the matrix, Consist of the tile maps, such as floor, windows and base, That handle rendering of the tiles present, then there is the object layer, That is a game object and stores every single object/Item on that matrix, since every Matrix is a Separate object they can all move independently, For the purpose of tile placement and object movement, There are to coordinate systems, world position, that is Calculated from the route of the world and then local position, that is the position on the Matrix, so if you are at the centre and it was properly 0,0 you'd be at the centre of the matrix Matrices also contain a meta data layer, Per tile, it stores data like, atmospheric Gasmix, Pipe data for each tile, Electrical data for each tile (If it's a cable) and Any extra data you want stored per tile","title":"What is a matrix"},{"location":"development/What-is-a-matrix/#what-is-a-matrix","text":"So, A matrix is something like a station or asteroid or shuttle, so, In the route of the world there are game objects, that are the matrices, They contain the game object for the matrix, and network identity, the children of the matrix, Consist of the tile maps, such as floor, windows and base, That handle rendering of the tiles present, then there is the object layer, That is a game object and stores every single object/Item on that matrix, since every Matrix is a Separate object they can all move independently, For the purpose of tile placement and object movement, There are to coordinate systems, world position, that is Calculated from the route of the world and then local position, that is the position on the Matrix, so if you are at the centre and it was properly 0,0 you'd be at the centre of the matrix Matrices also contain a meta data layer, Per tile, it stores data like, atmospheric Gasmix, Pipe data for each tile, Electrical data for each tile (If it's a cable) and Any extra data you want stored per tile","title":"What is a matrix"},{"location":"development/Working-with-Speech-Modifiers/","text":"Working with Speech Modifiers \u00b6 Making new Speech modifiers was designed to be very easy and should require little to no coding in most of the cases! Let's take a look of how we can achieve our goal in a couple of examples... Creating Speech modifiers \u00b6 Speech modifiers are Scriptable Objects that hold all the needed data to replace or add text to whatever the player is trying to say. No idea what that is? No biggie, all we need to know is where to do the clicks . In this example we will be making a new Australian accent. Navigate to Assets/Resources/ScriptableObjects/Speech in the Unity Editor Project Window , there you will see something like this: Right click anywhere and go to Create/Scriptable Objects/SpeechModifiers/SpeechModifier A new Speech modifier should appear, ready to be named whatever you want. In our case, we will name it \"Australian\". Now we will take our attention to the right side of the screen, where you will find the Unity Inspector Window , this window will let you customize all the data that your new Speech modifier holds. Alright, let's go from top to bottom, aye? Replacements Section \u00b6 The first item is a checkbox that you will click if you want your Speech modifier to replace text. Next you will see the Word Replace List . You will populate this with all the words and possible replacements you want for your modifier. This will perform a strict replacement, which means it will only replace full words (surrounded by spaces). Populating Lists \u00b6 Change the size to the total amount of words you need and click on the new element dropdown. Fill the blank space with whatever word you want to be replaced. Click the Replace With dropdown and change the size to the total amount of replacements you have for the original word (The modifier will choose a random one from this list when you talk). Fill the new fields with your replacement. Here you're pretty much done in most of cases, but we have more options if you want to give them a look... The Letter Replace List is a lazy replacement, which means it will replace the original text no matter what. You can use this to simulate an accent with hard R, for example, replacing all r's with rrr . Despite its name, you can also use words here. You populate the thing just the same as the afore mentioned Word Replace List . Additions Section \u00b6 Activate Additions if you want to add text to the beginning or ending of messages. The probability slider can be used to make additions depend on, well, probabilities. Set any percentage from 0 to 100 (wow) and a roll will happen every message against the chosen probability. Lastly, you populate Beginning and Ending just like you did with the other lists. Special Section \u00b6 The final section, Special , only has 1 field for now which we will explain later in this document. Stay tuned! Good, I crated my new speech modifier. Now what? The SpeechModManager \u00b6 The SpeechModManager is a singleton Scriptable Objects that holds and manage all the available speech modifiers. Didn't understand a thing? No worries, all you need to know is this bad boy needs to know of the existence of your Speech modifier so it can be applied. Adding my Speech Modifier to the SpeechModManager \u00b6 Navigate to Assets/Resources/ScriptableObjects/SO Singletons in the Unity Editor Project Window , there you will see something like this: Click on the SpeechModManager and look at the Unity Inspector Window As you can see, it is a list of all our Speech modifiers paired with ChatModifier enum entries. Adding a new entry is quite easy, click the + button on the top right corner and fill the required data. Adding Modifiers to ChatModifier Enum \u00b6 WAIT A MOMENT! There is no Australian in this dropdown!! Yes, that's because this dropdown is generated from the ChatModifier enum in ChatEvent.cs file. If we're adding a completely new modifier, we will need to add it to that Enum too. Navigate to \\Assets\\Scripts\\Chat and open ChatEvent.cs to edit it. DON'T PANIC YET, IT IS A VERY SIMPLE EDIT! Find the ChatModifier enum , it looks something like this: [ Flags ] public enum ChatModifier { None = 0 , // Default value Drunk = 1 << 0 , Stutter = 1 << 1 , Mute = 1 << 2 , // Dead, unconcious or naturally mute Hiss = 1 << 3 , Clown = 1 << 4 , // Having the clown occupation Whisper = 1 << 5 , // Message starts with \"#\" or \"/w\" Yell = 1 << 6 , // Message is in capital letters Emote = 1 << 7 , // Message starts with \"/me\" or \"*\" Exclaim = 1 << 8 , // Message ends with a \"!\" Question = 1 << 9 , // Message ends with a \"?\" Sing = 1 << 10 , // Message starts with \"/s\" or \"%\" Canadian = 1 << 11 , French = 1 << 12 , Italian = 1 << 13 , Swedish = 1 << 14 , Chav = 1 << 15 , Smile = 1 << 16 , Elvis = 1 << 17 , Spurdo = 1 << 18 , UwU = 1 << 19 , Unintelligible = 1 << 20 } Navigate to the end of the list and add your stuff there, yup as easy as that. Just make sure to add a , to the end of the previous item and copy the assignment syntax adding 1 to the last item in the list, like this: [ Flags ] public enum ChatModifier { None = 0 , // Default value Drunk = 1 << 0 , Stutter = 1 << 1 , Mute = 1 << 2 , // Dead, unconcious or naturally mute Hiss = 1 << 3 , Clown = 1 << 4 , // Having the clown occupation Whisper = 1 << 5 , // Message starts with \"#\" or \"/w\" Yell = 1 << 6 , // Message is in capital letters Emote = 1 << 7 , // Message starts with \"/me\" or \"*\" Exclaim = 1 << 8 , // Message ends with a \"!\" Question = 1 << 9 , // Message ends with a \"?\" Sing = 1 << 10 , // Message starts with \"/s\" or \"%\" Canadian = 1 << 11 , French = 1 << 12 , Italian = 1 << 13 , Swedish = 1 << 14 , Chav = 1 << 15 , Smile = 1 << 16 , Elvis = 1 << 17 , Spurdo = 1 << 18 , UwU = 1 << 19 , Unintelligible = 1 << 20 , Australian = 1 << 21 } Now we go to Step 3 and fill the fields accordingly. We did it! Our modifier is in the game now! Only thing we lack is a way to trigger it. Modifiers should trigger from character settings (see Speech.cs in \\Assets\\Scripts\\UI\\Lobby and add your thing there to be able to choose in character creation), from races (not implemented at the time this guide was written), from mutations (not implemented) or from wearing stuff. Wearable Speech Mod \u00b6 The Wearable Speech Mod is a Unity Component you can attach to any Prefab and make it add speech modifiers when wore. Setting it is very easy, all you need is to: Find the object you want to make a wearable speech mod, in our case the kilt! See the Unity Inspector Window and add a new component, which one? The Wearable Speech Mod, of course. Now we just select which modifier and where should this item be wore. That's it! We did it! Now our Kilt will modify speech when wore. - Hey, what about the custom code?! - Oh, shit. You're right, I almost forgot... Making custom code for the Speech Modifier SO \u00b6 In this example we will be making a Slur custom Speech modifier. Navigate to Assets/Resources/ScriptableObjects/Speech/CustomMods Create a new .cs file named \"Slur.cs\" and inherit from CustomSpeechModifier class. It should look something like this: using UnityEngine ; [ CreateAssetMenu ( fileName = \"CustomSpeechModifierCode\" , menuName = \"ScriptableObjects/SpeechModifiers/Slur\" )] public class Slur : CustomSpeechModifier { public override string ProcessMessage ( string message ) { //do your thing here return message ; } } You must implement and override ProcessMessage method. After your text processing is done, you must return a string variable containing the final text. We now create a new Scriptable Object from our code and assign it to our Speech Modifier: Right click anywhere in the Unity Editor Project Window and create a new SO from our new code. Now we create a new SpeechModifier (refer to the beginning of this guide) but instead of populating lists, we assign the SO we created in the previous step to the Custom Code field. Add it to SpeechModManager and bam! We are done!","title":"Working with Speech Modifiers"},{"location":"development/Working-with-Speech-Modifiers/#working-with-speech-modifiers","text":"Making new Speech modifiers was designed to be very easy and should require little to no coding in most of the cases! Let's take a look of how we can achieve our goal in a couple of examples...","title":"Working with Speech Modifiers"},{"location":"development/Working-with-Speech-Modifiers/#creating-speech-modifiers","text":"Speech modifiers are Scriptable Objects that hold all the needed data to replace or add text to whatever the player is trying to say. No idea what that is? No biggie, all we need to know is where to do the clicks . In this example we will be making a new Australian accent. Navigate to Assets/Resources/ScriptableObjects/Speech in the Unity Editor Project Window , there you will see something like this: Right click anywhere and go to Create/Scriptable Objects/SpeechModifiers/SpeechModifier A new Speech modifier should appear, ready to be named whatever you want. In our case, we will name it \"Australian\". Now we will take our attention to the right side of the screen, where you will find the Unity Inspector Window , this window will let you customize all the data that your new Speech modifier holds. Alright, let's go from top to bottom, aye?","title":"Creating Speech modifiers"},{"location":"development/Working-with-Speech-Modifiers/#replacements-section","text":"The first item is a checkbox that you will click if you want your Speech modifier to replace text. Next you will see the Word Replace List . You will populate this with all the words and possible replacements you want for your modifier. This will perform a strict replacement, which means it will only replace full words (surrounded by spaces).","title":"Replacements Section"},{"location":"development/Working-with-Speech-Modifiers/#populating-lists","text":"Change the size to the total amount of words you need and click on the new element dropdown. Fill the blank space with whatever word you want to be replaced. Click the Replace With dropdown and change the size to the total amount of replacements you have for the original word (The modifier will choose a random one from this list when you talk). Fill the new fields with your replacement. Here you're pretty much done in most of cases, but we have more options if you want to give them a look... The Letter Replace List is a lazy replacement, which means it will replace the original text no matter what. You can use this to simulate an accent with hard R, for example, replacing all r's with rrr . Despite its name, you can also use words here. You populate the thing just the same as the afore mentioned Word Replace List .","title":"Populating Lists"},{"location":"development/Working-with-Speech-Modifiers/#additions-section","text":"Activate Additions if you want to add text to the beginning or ending of messages. The probability slider can be used to make additions depend on, well, probabilities. Set any percentage from 0 to 100 (wow) and a roll will happen every message against the chosen probability. Lastly, you populate Beginning and Ending just like you did with the other lists.","title":"Additions Section"},{"location":"development/Working-with-Speech-Modifiers/#special-section","text":"The final section, Special , only has 1 field for now which we will explain later in this document. Stay tuned! Good, I crated my new speech modifier. Now what?","title":"Special Section"},{"location":"development/Working-with-Speech-Modifiers/#the-speechmodmanager","text":"The SpeechModManager is a singleton Scriptable Objects that holds and manage all the available speech modifiers. Didn't understand a thing? No worries, all you need to know is this bad boy needs to know of the existence of your Speech modifier so it can be applied.","title":"The SpeechModManager"},{"location":"development/Working-with-Speech-Modifiers/#adding-my-speech-modifier-to-the-speechmodmanager","text":"Navigate to Assets/Resources/ScriptableObjects/SO Singletons in the Unity Editor Project Window , there you will see something like this: Click on the SpeechModManager and look at the Unity Inspector Window As you can see, it is a list of all our Speech modifiers paired with ChatModifier enum entries. Adding a new entry is quite easy, click the + button on the top right corner and fill the required data.","title":"Adding my Speech Modifier to the SpeechModManager"},{"location":"development/Working-with-Speech-Modifiers/#adding-modifiers-to-chatmodifier-enum","text":"WAIT A MOMENT! There is no Australian in this dropdown!! Yes, that's because this dropdown is generated from the ChatModifier enum in ChatEvent.cs file. If we're adding a completely new modifier, we will need to add it to that Enum too. Navigate to \\Assets\\Scripts\\Chat and open ChatEvent.cs to edit it. DON'T PANIC YET, IT IS A VERY SIMPLE EDIT! Find the ChatModifier enum , it looks something like this: [ Flags ] public enum ChatModifier { None = 0 , // Default value Drunk = 1 << 0 , Stutter = 1 << 1 , Mute = 1 << 2 , // Dead, unconcious or naturally mute Hiss = 1 << 3 , Clown = 1 << 4 , // Having the clown occupation Whisper = 1 << 5 , // Message starts with \"#\" or \"/w\" Yell = 1 << 6 , // Message is in capital letters Emote = 1 << 7 , // Message starts with \"/me\" or \"*\" Exclaim = 1 << 8 , // Message ends with a \"!\" Question = 1 << 9 , // Message ends with a \"?\" Sing = 1 << 10 , // Message starts with \"/s\" or \"%\" Canadian = 1 << 11 , French = 1 << 12 , Italian = 1 << 13 , Swedish = 1 << 14 , Chav = 1 << 15 , Smile = 1 << 16 , Elvis = 1 << 17 , Spurdo = 1 << 18 , UwU = 1 << 19 , Unintelligible = 1 << 20 } Navigate to the end of the list and add your stuff there, yup as easy as that. Just make sure to add a , to the end of the previous item and copy the assignment syntax adding 1 to the last item in the list, like this: [ Flags ] public enum ChatModifier { None = 0 , // Default value Drunk = 1 << 0 , Stutter = 1 << 1 , Mute = 1 << 2 , // Dead, unconcious or naturally mute Hiss = 1 << 3 , Clown = 1 << 4 , // Having the clown occupation Whisper = 1 << 5 , // Message starts with \"#\" or \"/w\" Yell = 1 << 6 , // Message is in capital letters Emote = 1 << 7 , // Message starts with \"/me\" or \"*\" Exclaim = 1 << 8 , // Message ends with a \"!\" Question = 1 << 9 , // Message ends with a \"?\" Sing = 1 << 10 , // Message starts with \"/s\" or \"%\" Canadian = 1 << 11 , French = 1 << 12 , Italian = 1 << 13 , Swedish = 1 << 14 , Chav = 1 << 15 , Smile = 1 << 16 , Elvis = 1 << 17 , Spurdo = 1 << 18 , UwU = 1 << 19 , Unintelligible = 1 << 20 , Australian = 1 << 21 } Now we go to Step 3 and fill the fields accordingly. We did it! Our modifier is in the game now! Only thing we lack is a way to trigger it. Modifiers should trigger from character settings (see Speech.cs in \\Assets\\Scripts\\UI\\Lobby and add your thing there to be able to choose in character creation), from races (not implemented at the time this guide was written), from mutations (not implemented) or from wearing stuff.","title":"Adding Modifiers to ChatModifier Enum"},{"location":"development/Working-with-Speech-Modifiers/#wearable-speech-mod","text":"The Wearable Speech Mod is a Unity Component you can attach to any Prefab and make it add speech modifiers when wore. Setting it is very easy, all you need is to: Find the object you want to make a wearable speech mod, in our case the kilt! See the Unity Inspector Window and add a new component, which one? The Wearable Speech Mod, of course. Now we just select which modifier and where should this item be wore. That's it! We did it! Now our Kilt will modify speech when wore. - Hey, what about the custom code?! - Oh, shit. You're right, I almost forgot...","title":"Wearable Speech Mod"},{"location":"development/Working-with-Speech-Modifiers/#making-custom-code-for-the-speech-modifier-so","text":"In this example we will be making a Slur custom Speech modifier. Navigate to Assets/Resources/ScriptableObjects/Speech/CustomMods Create a new .cs file named \"Slur.cs\" and inherit from CustomSpeechModifier class. It should look something like this: using UnityEngine ; [ CreateAssetMenu ( fileName = \"CustomSpeechModifierCode\" , menuName = \"ScriptableObjects/SpeechModifiers/Slur\" )] public class Slur : CustomSpeechModifier { public override string ProcessMessage ( string message ) { //do your thing here return message ; } } You must implement and override ProcessMessage method. After your text processing is done, you must return a string variable containing the final text. We now create a new Scriptable Object from our code and assign it to our Speech Modifier: Right click anywhere in the Unity Editor Project Window and create a new SO from our new code. Now we create a new SpeechModifier (refer to the beginning of this guide) but instead of populating lists, we assign the SO we created in the previous step to the Custom Code field. Add it to SpeechModManager and bam! We are done!","title":"Making custom code for the Speech Modifier SO"},{"location":"faq/Building/","text":"Building FAQ \u00b6 This section is to answer questions regarding problems or questions building the project. Type or namespace name \"Tomyln\" could not be found \u00b6 If you found this issue when trying to open the project for the first time, you can solve it by opening Unity in safe mode and clicking on Nuget > Restore Nuget packages from the top bar. Relevant github issue: https://github.com/unitystation/unitystation/issues/10147 Forever loading bar when pressing play in the editor \u00b6 Due to how we turn on Start asset editing when in play mode ( To prevent mid game compile ), This results in a loading bar, Do not worry though because you can move the loading bar of the way it doesn't block your input into the Unity editor If you would like to edit assets while the Editor is in play mode simply go to Tools > StopAssetEditing","title":"Building FAQ"},{"location":"faq/Building/#building-faq","text":"This section is to answer questions regarding problems or questions building the project.","title":"Building FAQ"},{"location":"faq/Building/#type-or-namespace-name-tomyln-could-not-be-found","text":"If you found this issue when trying to open the project for the first time, you can solve it by opening Unity in safe mode and clicking on Nuget > Restore Nuget packages from the top bar. Relevant github issue: https://github.com/unitystation/unitystation/issues/10147","title":"Type or namespace name \"Tomyln\" could not be found"},{"location":"faq/Building/#forever-loading-bar-when-pressing-play-in-the-editor","text":"Due to how we turn on Start asset editing when in play mode ( To prevent mid game compile ), This results in a loading bar, Do not worry though because you can move the loading bar of the way it doesn't block your input into the Unity editor If you would like to edit assets while the Editor is in play mode simply go to Tools > StopAssetEditing","title":"Forever loading bar when pressing play in the editor"},{"location":"project-goals/roadmap/","text":"RoadMap \u00b6 Feature Goals \u00b6 note: goals that are crossed out are goals that have been completed Version Requirements (Coder) 0.1 Basic Health Basic Combat (Melee + Range) Death, e.g. respawning randomized spawn points Networking, e.g. interpolated movement of players, shooting exploding fuel tanks pulling fuel tanks and closets 0.2 basic electricity basic building menus, e.g. right click menu, machine interaction menu space walk, incl. death in space independent local matrices, e.g. one for a station and another one for a spaceship freely pilotable spaceships basic auto updating functionality Basic roles & door rights 0.3 Basic Atmospherics, no pipes needed Account System, e.g. character design, stats, ... players intentions Blood, e.g. foot prints, gibbing explosion Complete chat system dependent on telecomms Redesign FOV Redesign lighting based on FOV code 0.4 basic Modding Advanced Round Management, e.g. map rotating, messages Basic Admin portal Easy server deployment, maybe even automatic 24 / 7 Server HUD overhaul, Flexible UI with Docking Tabs system that would supersede right panel 0.5 Advanced Health System, Hunger, Disease Roles, such as Cook, Botanist, Security, Engineer Roles specific mechanics, such as botany, cooking etc. Role Management Piping of Atmospherics Disposals Addressable system Races support Wizard Mapping revamp Add one of the other ss13 engines (Singulo) 0.6 Language support (Localisation ) Crafting menu Research Gameplay Admin tool remapping(could be in 0.5) Gravity generator for station Tesla engine Tile and Item overlays Pills/medical chemistry Candidates for prerelease or post-release 3D walls (Was tested relatively easy to implement) to be continued... Long-term Goals \u00b6 User change-able keybindings Networking Overhaul Own Networking Layer Headless Server shouldn't start as a Player Separation of Responsibility i.e. Refactoring Project structure Auto updater Editor Tools Item Creation Tilemapper / Sectioning Round Record/Replay system To be continued","title":"RoadMap"},{"location":"project-goals/roadmap/#roadmap","text":"","title":"RoadMap"},{"location":"project-goals/roadmap/#feature-goals","text":"note: goals that are crossed out are goals that have been completed Version Requirements (Coder) 0.1 Basic Health Basic Combat (Melee + Range) Death, e.g. respawning randomized spawn points Networking, e.g. interpolated movement of players, shooting exploding fuel tanks pulling fuel tanks and closets 0.2 basic electricity basic building menus, e.g. right click menu, machine interaction menu space walk, incl. death in space independent local matrices, e.g. one for a station and another one for a spaceship freely pilotable spaceships basic auto updating functionality Basic roles & door rights 0.3 Basic Atmospherics, no pipes needed Account System, e.g. character design, stats, ... players intentions Blood, e.g. foot prints, gibbing explosion Complete chat system dependent on telecomms Redesign FOV Redesign lighting based on FOV code 0.4 basic Modding Advanced Round Management, e.g. map rotating, messages Basic Admin portal Easy server deployment, maybe even automatic 24 / 7 Server HUD overhaul, Flexible UI with Docking Tabs system that would supersede right panel 0.5 Advanced Health System, Hunger, Disease Roles, such as Cook, Botanist, Security, Engineer Roles specific mechanics, such as botany, cooking etc. Role Management Piping of Atmospherics Disposals Addressable system Races support Wizard Mapping revamp Add one of the other ss13 engines (Singulo) 0.6 Language support (Localisation ) Crafting menu Research Gameplay Admin tool remapping(could be in 0.5) Gravity generator for station Tesla engine Tile and Item overlays Pills/medical chemistry Candidates for prerelease or post-release 3D walls (Was tested relatively easy to implement) to be continued...","title":"Feature Goals"},{"location":"project-goals/roadmap/#long-term-goals","text":"User change-able keybindings Networking Overhaul Own Networking Layer Headless Server shouldn't start as a Player Separation of Responsibility i.e. Refactoring Project structure Auto updater Editor Tools Item Creation Tilemapper / Sectioning Round Record/Replay system To be continued","title":"Long-term Goals"},{"location":"project-goals/current-goal-scope/additional-job-role-developments/","text":"Additional Job Role Developments \u00b6 Overview: \u00b6 Some additional roles will need to be developed to a basic enough standard to support the operation of the station: Goals: * The Janitor will be able to clean up blood with the mop and pick up trash with the trash bags * Medical staff will be required to clone the dead (as respawn will be disabled) and heal the injured with the bruise packs and burn ointment * Head of Personnel will have a job adjusting roles and giving additional access to balance the operational state of the Station * Security guards will need to be able to stun and cuff people to detain antags","title":"Additional Job Role Developments"},{"location":"project-goals/current-goal-scope/additional-job-role-developments/#additional-job-role-developments","text":"","title":"Additional Job Role Developments"},{"location":"project-goals/current-goal-scope/additional-job-role-developments/#overview","text":"Some additional roles will need to be developed to a basic enough standard to support the operation of the station: Goals: * The Janitor will be able to clean up blood with the mop and pick up trash with the trash bags * Medical staff will be required to clone the dead (as respawn will be disabled) and heal the injured with the bruise packs and burn ointment * Head of Personnel will have a job adjusting roles and giving additional access to balance the operational state of the Station * Security guards will need to be able to stun and cuff people to detain antags","title":"Overview:"},{"location":"project-goals/current-goal-scope/antagonist-roles/","text":"Traitor Roles: \u00b6 Overview: * Traitor roles will only be assigned randomly once population count is above 5 players * Traitor roles can be assigned to players that join halfway through a round * There will be a 50% chance that a traitor role will be assigned for a game round if population is over 5. * Max of 2 traitor roles can be assigned Traitor Missions: \u00b6 Random Mission Objectives 1: * Kill a target [Crew member] * Escape on shuttle alive Random Mission Objectives 2: * Prevent station from completing plasma order for CENTCOMM * Escape on shuttle alive Nuke Ops: \u00b6 Overview: * If station population is over 6 players then NukeOps have a chance of spawning * Nuke ops game mode will be fairly uncommon. 25% chance of happening with a population over 6. * When a NukeOps game mode is determind by the GameManager then the syndicate shuttle will be spawned at a random position away from the station. This can happen at the start of a round or half way through. * On the Syndicate shuttle console a mission statement will be printed listing out the suspected coordinates of the Outpost station. * A nuke will be placed on the shuttle and the NukeOps team will need to place the bomb onboard the station once they find it. * The NukeOps team will need to locate the nuke disk on the station to use along with the pin number to arm the bomb once it is secured to the floor onboard. * The NukeOps team will have 20 seconds to escape the station before detonation. Nuke Ops Mission: * Detonate Nuke onboard Outpost Station * Escape Alive","title":"Antagonist roles"},{"location":"project-goals/current-goal-scope/antagonist-roles/#traitor-roles","text":"Overview: * Traitor roles will only be assigned randomly once population count is above 5 players * Traitor roles can be assigned to players that join halfway through a round * There will be a 50% chance that a traitor role will be assigned for a game round if population is over 5. * Max of 2 traitor roles can be assigned","title":"Traitor Roles:"},{"location":"project-goals/current-goal-scope/antagonist-roles/#traitor-missions","text":"Random Mission Objectives 1: * Kill a target [Crew member] * Escape on shuttle alive Random Mission Objectives 2: * Prevent station from completing plasma order for CENTCOMM * Escape on shuttle alive","title":"Traitor Missions:"},{"location":"project-goals/current-goal-scope/antagonist-roles/#nuke-ops","text":"Overview: * If station population is over 6 players then NukeOps have a chance of spawning * Nuke ops game mode will be fairly uncommon. 25% chance of happening with a population over 6. * When a NukeOps game mode is determind by the GameManager then the syndicate shuttle will be spawned at a random position away from the station. This can happen at the start of a round or half way through. * On the Syndicate shuttle console a mission statement will be printed listing out the suspected coordinates of the Outpost station. * A nuke will be placed on the shuttle and the NukeOps team will need to place the bomb onboard the station once they find it. * The NukeOps team will need to locate the nuke disk on the station to use along with the pin number to arm the bomb once it is secured to the floor onboard. * The NukeOps team will have 20 seconds to escape the station before detonation. Nuke Ops Mission: * Detonate Nuke onboard Outpost Station * Escape Alive","title":"Nuke Ops:"},{"location":"project-goals/current-goal-scope/centcomm-missions/","text":"Purpose: \u00b6 The Centcomm missions provide the basic global objectives for the station crew to work towards. These goals will include exploring the solar system and mining plasma deposits. The crew will also receive a commendation (AKA green text) for each objective they complete by round end. Communication to the crew: \u00b6 At the start of each round a piece of paper will spawn on top of each command console. A station wide announcement will be broadcast to inform the staff that the objectives have been received. CENTCOMM Mission Statement sheet: \u00b6 On the sheet these points of information will be found: A list of suspected (last seen) asteroid locations CENTCOMM official order request for plasma (how much the crew needs to send back to centcomm via cargo)","title":"Centcomm missions"},{"location":"project-goals/current-goal-scope/centcomm-missions/#purpose","text":"The Centcomm missions provide the basic global objectives for the station crew to work towards. These goals will include exploring the solar system and mining plasma deposits. The crew will also receive a commendation (AKA green text) for each objective they complete by round end.","title":"Purpose:"},{"location":"project-goals/current-goal-scope/centcomm-missions/#communication-to-the-crew","text":"At the start of each round a piece of paper will spawn on top of each command console. A station wide announcement will be broadcast to inform the staff that the objectives have been received.","title":"Communication to the crew:"},{"location":"project-goals/current-goal-scope/centcomm-missions/#centcomm-mission-statement-sheet","text":"On the sheet these points of information will be found: A list of suspected (last seen) asteroid locations CENTCOMM official order request for plasma (how much the crew needs to send back to centcomm via cargo)","title":"CENTCOMM Mission Statement sheet:"},{"location":"project-goals/current-goal-scope/character-customization/","text":"Overview: \u00b6 When a player logs in for the first time they will be automatically taken to the character customization screen. Otherwise access will be available once they login and are at the server screen All character settings will be serialized into JSON blobs and stored on the server in Player Accounts A very simple version of character customization should be developed with some basic preferences: Skin color, hair, underwear, sex, age, character name A simple GUI will need to be developed Once a player is spawned the sprites will be updated using the JSON data from the server and then synced with the clients","title":"Character customization"},{"location":"project-goals/current-goal-scope/character-customization/#overview","text":"When a player logs in for the first time they will be automatically taken to the character customization screen. Otherwise access will be available once they login and are at the server screen All character settings will be serialized into JSON blobs and stored on the server in Player Accounts A very simple version of character customization should be developed with some basic preferences: Skin color, hair, underwear, sex, age, character name A simple GUI will need to be developed Once a player is spawned the sprites will be updated using the JSON data from the server and then synced with the clients","title":"Overview:"},{"location":"project-goals/current-goal-scope/mapping-changes/","text":"Required changes to Outpost Station: \u00b6 A Captains office will need to be mapped somewhere near the bridge. The nuke disk will need to be created and placed in the office A Captains console will need to be developed so that the Captain can call the shuttle and also make Announcements A HOP office will also need to be mapped somewhere near the bridge and a counter installed that can be accessed by the public (facing a main hallway). A HOP console will need to be created and placed near the counter Cargo will need a counter mapped somewhere on the cargo wall and facing a public hallway. This is so that cargo can accept orders from the station crew. Cargo's shuttle will need to be mapped onto a new matrix so that it can be used with matrix move. A shuttle console will not be mapped to this shuttle. Instead it will operate off a way-point system. A Cargo ordering console will need to be developed and placed next to the counter Plasma generator machines will need to be developed and placed in engineering Solid plasma items will need to be placed in cargo Pipes and plasma canisters will need to be mapped into any shuttles that are docked at the station A Heads of staff only shuttle needs to be mapped onto a new matrix and placed near the bridge 4 or 5 asteriods will need to be mapped onto their own matrices. These asteriods will be positioned randomly by GameManager at round start Find a place to map a Janitor's closet on the station and place a bucket, mop and trash bags inside. Create a Cloner machine and place it in the medical department Develop and map bruise packs and burn cream and place in medical department Map out the rest of the powernet circuit and place APC's in each room. Doors will automatically assign themselves to an APC, along with light bulbs Red emergency lights will need to be mapped to rooms and hallways and also automatically assigned to APC's (so they know when to go into emergency mode) Remove all the weapons from the NukeOps deathmatch preview and only allow weapons to be stored in security or on the bridge. Cargo can also order weapons","title":"Mapping changes"},{"location":"project-goals/current-goal-scope/mapping-changes/#required-changes-to-outpost-station","text":"A Captains office will need to be mapped somewhere near the bridge. The nuke disk will need to be created and placed in the office A Captains console will need to be developed so that the Captain can call the shuttle and also make Announcements A HOP office will also need to be mapped somewhere near the bridge and a counter installed that can be accessed by the public (facing a main hallway). A HOP console will need to be created and placed near the counter Cargo will need a counter mapped somewhere on the cargo wall and facing a public hallway. This is so that cargo can accept orders from the station crew. Cargo's shuttle will need to be mapped onto a new matrix so that it can be used with matrix move. A shuttle console will not be mapped to this shuttle. Instead it will operate off a way-point system. A Cargo ordering console will need to be developed and placed next to the counter Plasma generator machines will need to be developed and placed in engineering Solid plasma items will need to be placed in cargo Pipes and plasma canisters will need to be mapped into any shuttles that are docked at the station A Heads of staff only shuttle needs to be mapped onto a new matrix and placed near the bridge 4 or 5 asteriods will need to be mapped onto their own matrices. These asteriods will be positioned randomly by GameManager at round start Find a place to map a Janitor's closet on the station and place a bucket, mop and trash bags inside. Create a Cloner machine and place it in the medical department Develop and map bruise packs and burn cream and place in medical department Map out the rest of the powernet circuit and place APC's in each room. Doors will automatically assign themselves to an APC, along with light bulbs Red emergency lights will need to be mapped to rooms and hallways and also automatically assigned to APC's (so they know when to go into emergency mode) Remove all the weapons from the NukeOps deathmatch preview and only allow weapons to be stored in security or on the bridge. Cargo can also order weapons","title":"Required changes to Outpost Station:"},{"location":"project-goals/current-goal-scope/mining/","text":"Outline: \u00b6 The very basics of the mining job role will need to be developed. Some simple items will need to be made (a pick-axe tool and portable lamp). Mission: \u00b6 The miners will need to use the coordinates from the Centcomm mission statement to go out and search for nearby asteriods. The miners will need to wear hardsuits and oxygen tanks with sufficient oxygen to explore asteroid sites once they have found them. Once they find an asteroid they will need to park the shuttle nearby and use their pick-axes to mine through rock in search of solid plasma. Plasma \u00b6 Plasma is used to power shuttles, generate power on the station and fulfill the Centcomm order requirements. Random Events: \u00b6 While mining and searching for asteroids, miners will have a small chance of encountering hostile aliens.","title":"Mining"},{"location":"project-goals/current-goal-scope/mining/#outline","text":"The very basics of the mining job role will need to be developed. Some simple items will need to be made (a pick-axe tool and portable lamp).","title":"Outline:"},{"location":"project-goals/current-goal-scope/mining/#mission","text":"The miners will need to use the coordinates from the Centcomm mission statement to go out and search for nearby asteriods. The miners will need to wear hardsuits and oxygen tanks with sufficient oxygen to explore asteroid sites once they have found them. Once they find an asteroid they will need to park the shuttle nearby and use their pick-axes to mine through rock in search of solid plasma.","title":"Mission:"},{"location":"project-goals/current-goal-scope/mining/#plasma","text":"Plasma is used to power shuttles, generate power on the station and fulfill the Centcomm order requirements.","title":"Plasma"},{"location":"project-goals/current-goal-scope/mining/#random-events","text":"While mining and searching for asteroids, miners will have a small chance of encountering hostile aliens.","title":"Random Events:"},{"location":"project-goals/current-goal-scope/new-lobby-screen/","text":"Requirements: \u00b6 In release mode the GUI should first show a box for the player to log into their account. If they have chosen to save their credentials on a previous launch then skip this screen entirely and log the player in by verifying the credentials and account status via the api. If the player is logging in for the first time then show the character customization pop up screen (which will appear over the top of the server screen on a higher layer) Otherwise show the server list: A scroll view with active servers and stats, like pop count. This information will be delivered via the api in json format each time the client refreshes it Once a player clicks connect on a server, then command the NetworkManager to attempt a connection to that server using the ip and port data from the server entry If the server is in lobby mode then the player will load a new lobby scene (called ServerLobby.unity) where they will be presented with a full screen chat window and a list of connected players who are waiting for the server start on the right. A count down timer will also be visible up the top right. Once the timer has counted down the server will load the Outpost map scene and begin the round","title":"New lobby screen"},{"location":"project-goals/current-goal-scope/new-lobby-screen/#requirements","text":"In release mode the GUI should first show a box for the player to log into their account. If they have chosen to save their credentials on a previous launch then skip this screen entirely and log the player in by verifying the credentials and account status via the api. If the player is logging in for the first time then show the character customization pop up screen (which will appear over the top of the server screen on a higher layer) Otherwise show the server list: A scroll view with active servers and stats, like pop count. This information will be delivered via the api in json format each time the client refreshes it Once a player clicks connect on a server, then command the NetworkManager to attempt a connection to that server using the ip and port data from the server entry If the server is in lobby mode then the player will load a new lobby scene (called ServerLobby.unity) where they will be presented with a full screen chat window and a list of connected players who are waiting for the server start on the right. A count down timer will also be visible up the top right. Once the timer has counted down the server will load the Outpost map scene and begin the round","title":"Requirements:"},{"location":"project-goals/current-goal-scope/npc-aliens/","text":"Overview: \u00b6 Hostile Alien encounters will be comprised of a group of basic NPC entities that have a small chance of being spawned near crew members who are exploring the solar system for asteroids. They can only be spawned near shuttles that have stopped completely in space or near players on asteroids. They will have a basic matrix based path finding system and will possess the ability to perform melee + projectile attack actions. They can also break through windows of shuttles and open doors. Once an alien encounter has happened the chance of another one happening in the same area rises significantly. This will all be controlled via GameManager on the server.","title":"Npc aliens"},{"location":"project-goals/current-goal-scope/npc-aliens/#overview","text":"Hostile Alien encounters will be comprised of a group of basic NPC entities that have a small chance of being spawned near crew members who are exploring the solar system for asteroids. They can only be spawned near shuttles that have stopped completely in space or near players on asteroids. They will have a basic matrix based path finding system and will possess the ability to perform melee + projectile attack actions. They can also break through windows of shuttles and open doors. Once an alien encounter has happened the chance of another one happening in the same area rises significantly. This will all be controlled via GameManager on the server.","title":"Overview:"},{"location":"project-goals/current-goal-scope/player-accounts/","text":"Purpose: \u00b6 The player accounts system will be used to store character customization settings, player stats and admin data for each player who plays unitystation. It will be an easy process to sign up and will be required to join the closed preview demo of the game. A simple form page will be set up on unitystation.org to sign up each player. For the closed preview release a steam key will be emailed to each new player when they sign up. Changes to the Player Login GUI will need to be made to accept a password with an option to remember settings. Once the player logs in they will then move to a server list page to select the server they want to join (will just be the one server for a long time). Server count and stats will be retrieved via our api. Selecting a server while it is waiting to start will take the player to a Server Lobby screen with the ability to chat to people while they wait for the server to start. Servers automatically start when there is more then 1 player in the lobby and a 2 minute timer has finished counting down. If the lobby player count goes back to 0 before the timer has finished counting down then the timer is reset back to the full 2 minute wait time. More on the new lobby screen later. Backend API: \u00b6 While in development mode the server urls will point to our dev.unitystation.org api which will be separated from the release api. The url and pass key fields will be prepopulated with this data in our source code. At release time a new url and pass keys will be loaded via a config file on the build server to make sure db access is secure. All api requests should be hashed to prevent from sniffing. The development database will also have its own tables and db user credentials to ensure that the two services are sufficiently separated. Benefits for players: \u00b6 The player account system will allow players to take their characters to different machines. It also lays the ground work for player stats in the future which we will cover in another scope. Benefits for admins: \u00b6 We can now store IP addresses and Steam Ids to each account and admin notes. This will also be a good place to store account status (Active, Banned, Kicked etc).","title":"Player accounts"},{"location":"project-goals/current-goal-scope/player-accounts/#purpose","text":"The player accounts system will be used to store character customization settings, player stats and admin data for each player who plays unitystation. It will be an easy process to sign up and will be required to join the closed preview demo of the game. A simple form page will be set up on unitystation.org to sign up each player. For the closed preview release a steam key will be emailed to each new player when they sign up. Changes to the Player Login GUI will need to be made to accept a password with an option to remember settings. Once the player logs in they will then move to a server list page to select the server they want to join (will just be the one server for a long time). Server count and stats will be retrieved via our api. Selecting a server while it is waiting to start will take the player to a Server Lobby screen with the ability to chat to people while they wait for the server to start. Servers automatically start when there is more then 1 player in the lobby and a 2 minute timer has finished counting down. If the lobby player count goes back to 0 before the timer has finished counting down then the timer is reset back to the full 2 minute wait time. More on the new lobby screen later.","title":"Purpose:"},{"location":"project-goals/current-goal-scope/player-accounts/#backend-api","text":"While in development mode the server urls will point to our dev.unitystation.org api which will be separated from the release api. The url and pass key fields will be prepopulated with this data in our source code. At release time a new url and pass keys will be loaded via a config file on the build server to make sure db access is secure. All api requests should be hashed to prevent from sniffing. The development database will also have its own tables and db user credentials to ensure that the two services are sufficiently separated.","title":"Backend API:"},{"location":"project-goals/current-goal-scope/player-accounts/#benefits-for-players","text":"The player account system will allow players to take their characters to different machines. It also lays the ground work for player stats in the future which we will cover in another scope.","title":"Benefits for players:"},{"location":"project-goals/current-goal-scope/player-accounts/#benefits-for-admins","text":"We can now store IP addresses and Steam Ids to each account and admin notes. This will also be a good place to store account status (Active, Banned, Kicked etc).","title":"Benefits for admins:"},{"location":"project-goals/current-goal-scope/shuttles/","text":"Additional Shuttle work: \u00b6 Shuttles will need to be powered by plasma tanks secured to a pipe that connects to the shuttle thrusters. Once a canister is secured a plasma amount readout will be available on the shuttle GUI. There will be full tanks of gas plasma in atmospherics but new gas plasma can be made by grinding down solid plasma. Plasma Stocks: \u00b6 At the start of the round all shuttles will already have a full canister attached to their thrusters. A small stack of solid plasma will be available in cargo for the distribution in the early stages of the game while miners go out and find more deposits. Solid plasma is also used in the engineering power generators. The SMES on arrival will have enough power for about 40 minutes of station use. If there are no active power generators secured to the power network by then, then the crew will experience blackouts.","title":"Shuttles"},{"location":"project-goals/current-goal-scope/shuttles/#additional-shuttle-work","text":"Shuttles will need to be powered by plasma tanks secured to a pipe that connects to the shuttle thrusters. Once a canister is secured a plasma amount readout will be available on the shuttle GUI. There will be full tanks of gas plasma in atmospherics but new gas plasma can be made by grinding down solid plasma.","title":"Additional Shuttle work:"},{"location":"project-goals/current-goal-scope/shuttles/#plasma-stocks","text":"At the start of the round all shuttles will already have a full canister attached to their thrusters. A small stack of solid plasma will be available in cargo for the distribution in the early stages of the game while miners go out and find more deposits. Solid plasma is also used in the engineering power generators. The SMES on arrival will have enough power for about 40 minutes of station use. If there are no active power generators secured to the power network by then, then the crew will experience blackouts.","title":"Plasma Stocks:"},{"location":"project-goals/current-goal-scope/start-of-round/","text":"Overview: \u00b6 At the start of the round the asteriods that are mapped to a matrix move component will be placed at random coordinates and these coordinates will be used to mix in with false ones that will appear on the CENTCOMM mission statements. The power network on the station will be placed in standby mode and low level visibility will be provided by the red emergency lights placed in the halls. No APC's will be on when the crew arrives. Crew's first goal: \u00b6 One of the crew members will need to be an engineer or have access (or get access from the HoP) to set the SMES's to online mode.","title":"Start of round"},{"location":"project-goals/current-goal-scope/start-of-round/#overview","text":"At the start of the round the asteriods that are mapped to a matrix move component will be placed at random coordinates and these coordinates will be used to mix in with false ones that will appear on the CENTCOMM mission statements. The power network on the station will be placed in standby mode and low level visibility will be provided by the red emergency lights placed in the halls. No APC's will be on when the crew arrives.","title":"Overview:"},{"location":"project-goals/current-goal-scope/start-of-round/#crews-first-goal","text":"One of the crew members will need to be an engineer or have access (or get access from the HoP) to set the SMES's to online mode.","title":"Crew's first goal:"},{"location":"project-goals/current-goal-scope/the-narrative/","text":"The basic purpose of Outpost station: \u00b6 The Outpost Station Crew is an expedition team sent to explore unknown solar systems. Their main purpose is to scout for plasma resources on nearby solar bodies. A list of suspected asteriod locations are sent from CENTCOMM to the station when the crew arrives. Initial state of the station: \u00b6 The NanoTrasen Outpost Station lies dormant in the solar system until the Station Crew arrives. While it is dormant the power network is set to sleep mode and a small amount of plasma is left on the station for power generation. First step of the Station Crew is to activate power. Engineering will have to work with Cargo and Mining to keep the power network operational throughout the mission. The Mission: \u00b6 The station crew will receive CENTCOMM mission directives printed via each command console on round start. The directives will outline the intended goals for the Outpost Expedition team to complete.","title":"The narrative"},{"location":"project-goals/current-goal-scope/the-narrative/#the-basic-purpose-of-outpost-station","text":"The Outpost Station Crew is an expedition team sent to explore unknown solar systems. Their main purpose is to scout for plasma resources on nearby solar bodies. A list of suspected asteriod locations are sent from CENTCOMM to the station when the crew arrives.","title":"The basic purpose of Outpost station:"},{"location":"project-goals/current-goal-scope/the-narrative/#initial-state-of-the-station","text":"The NanoTrasen Outpost Station lies dormant in the solar system until the Station Crew arrives. While it is dormant the power network is set to sleep mode and a small amount of plasma is left on the station for power generation. First step of the Station Crew is to activate power. Engineering will have to work with Cargo and Mining to keep the power network operational throughout the mission.","title":"Initial state of the station:"},{"location":"project-goals/current-goal-scope/the-narrative/#the-mission","text":"The station crew will receive CENTCOMM mission directives printed via each command console on round start. The directives will outline the intended goals for the Outpost Expedition team to complete.","title":"The Mission:"}]}