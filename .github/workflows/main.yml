name: Build Project

on:
  push:
    branches:
    - develop
    - master
    paths:
    - 'Tools/UnityLicense.ulf'
    - 'UnityProject/**'
    - '.github/workflows/main.yml'
    - 'Docker/**'
  pull_request:
    branches:
    - develop
    - master
    paths:
    - 'Tools/UnityLicense.ulf'
    - 'UnityProject/**'
    - '.github/workflows/main.yml'

jobs:

  ########## HOW TO UPDATE UNITY_LICENSE ##########
  # The job below is only used to request a new activation file
  #
  # !!! WARNING: Use a throw away Unity account for this since anyone will have access to the license file !!!
  #
  # If you need a new one follow these steps:
  #   - Uncomment the job below and run it
  #   - Download the manual activation file that appears as an artifact in a zip (Unity_v20XX.x.alf).
  #   - Visit license.unity3d.com, sign in and upload it.
  #   - You should now receive your license file (Unity_v20XX.x.ulf) as a download.
  #   - Replace UnityLicense.ulf in the Tools directory with it.
  #   - Make sure LICENSE_FILE_PATH in the 'Setup license' step still points to it.

  # # Request license file job
  # requestManualActivationFile:
  #   name: Request manual activation file
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Request manual activation file
  #     - name: Request manual activation file
  #       uses: webbertakken/unity-request-manual-activation-file@v1.1
  #       id: getManualLicenseFile
  #       with:
  #         unityVersion: 2019.2.19f1
  #     # Upload artifact (Unity_v20XX.X.XXXX.alf)
  #     - name: Expose as artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: ${{ steps.getManualLicenseFile.outputs.filePath }}
  #         path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  # Perform build job
  performBuild:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - UnityProject
        unityVersion:
          - 2019.2.19f1
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v2.0.0

      # Cache the library directory to speed up builds
      - name: Cache library directory
        uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
            Library-${{ matrix.projectPath }}-
            Library-

      # Set the UNITY_LICENSE environment variable
      - name: Setup license
        # This step:
        #   - Grabs the license file contents from the $LICENSE_FILE_PATH
        #   - Uses substitution to escape newline characters for GitHub Actions set-env.
        #     (from: https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/td-p/37870)
        #   - Set the UNITY_LICENSE env var for all future steps using special GitHub Actions syntax
        env:
          LICENSE_FILE_PATH: ./Tools/UnityLicense.ulf
        run: |
          license=$(<"$LICENSE_FILE_PATH")
          license="${license//'%'/'%25'}"
          license="${license//$'\n'/'%0A'}"
          license="${license//$'\r'/'%0D'}"
          echo "::set-env name=UNITY_LICENSE::$license"
      # Build the project
      - name: Build project
        uses: webbertakken/unity-builder@v0.9
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: UnityStation
          buildMethod: BuildScript.BuildProject

      # Upload distributables
      - name: Upload Build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  Imaging:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: performBuild
    name: Create Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.0.0
      - uses: actions/download-artifact@v1
        with:
          name: StandaloneLinux64
          path: Docker/server
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.12
        with:
          name: unitystation/unitystation
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: Docker
          #buildargs: BUILD_NUMBER=${{github.run_number}}
          # tags: "latest,$GITHUB_RUN_NUMBER"