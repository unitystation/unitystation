using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Antagonists
{
	/// <summary>
	/// The base class ScriptableObject for all antagonist objectives
	/// </summary>
	public abstract class Objective : ScriptableObject
	{
		/// <summary>
		/// The player who has this objective
		/// </summary>
		public Mind Owner { get; protected set; }

		/// <summary>
		/// The name of the objective type
		/// </summary>
		[SerializeField]
		protected string objectiveName;
		/// <summary>
		/// The name of the objective type
		/// </summary>
		public string ObjectiveName => objectiveName;

		/// <summary>
		/// Can antags get this objective more than once?
		/// </summary>
		public bool IsUnique;

		/// <summary>
		/// The description of the objective which is shown to players. Usually generated by the objective when it is setup.
		/// </summary>
		[SerializeField]
		protected string description;
		/// <summary>
		/// The description of the objective which is shown to players. Usually generated by the objective when it is setup.
		/// </summary>
		public string Description => description;

		/// <summary>
		/// Variable to override the IsComplete function. Useful for free/custom objectives.
		/// </summary>
		protected bool Complete;

		/// <summary>
		/// Check if this objective is possible for a player, defaults to true if not overriden
		/// </summary>
		public virtual bool IsPossible(PlayerScript candidate)
		{
			return true;
		}

		/// <summary>
		/// Sets the owner of the objective and performs setup if required
		/// </summary>
		public void DoSetup(Mind owner)
		{
			Owner = owner;
			Setup();
		}

		/// <summary>
		/// Perform initial setup of the objective if needed
		/// </summary>
		protected abstract void Setup();

		/// <summary>
		/// Shows if this objective is complete or not
		/// </summary>
		public bool IsComplete()
		{
			return (Complete || CheckCompletion());
		}

		/// <summary>
		/// Defines how to check the completion of the objective.
		/// </summary>
		protected abstract bool CheckCompletion();
	}
}