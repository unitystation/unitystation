
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

/// <summary>
/// Encapsulates a set of right click elements (RightClickableElements)
/// generated by an IRightClickable, describing everything needed
/// to display a right click options to the user and allow them to click on the options.
///
/// Allows customizing / overriding the normal appearance of the right click option.
/// </summary>
public class RightClickableResult
{
	private List<RightClickableElement> elements;

	public RightClickableResult()
	{
		elements = new List<RightClickableElement>();
	}

	/// <summary>
	/// Static factory, same as constructor, to make chaining look nicer.
	/// </summary>
	/// <returns></returns>
	public static RightClickableResult Create()
	{
		return new RightClickableResult();
	}

	/// <summary>
	/// Add an element whose appearance will be based on the
	/// RightClickOption with the specified name. Shorthand to avoid having to specify
	/// the full resource path of the RightClickOption or manually construct a
	/// RightClickableElement.
	/// </summary>
	/// <param name="optionName">name of the option as it exists in the
	/// Resources/ScriptableObjects/Interaction/RightclickOptions folder</param>
	/// <param name="action">Action to invoke when the option is clicked.</param>
	/// <param name="bgColorOverride">Color to use instead of the RightClickOption's normal
	/// background color.</param>
	/// <param name="spriteOverride">Sprite to use instead of the RightClickOption's normal sprite.</param>
	/// <param name="nameOverride">Name to use instead of the RightClickOption's name</param>
	/// <returns>this RightClickableResult, to support chaining</returns>
	public RightClickableResult AddElement(string optionName, Action action,
		Color? bgColorOverride = null, string nameOverride = null, Sprite spriteOverride = null)
	{
		AddElement(RightClickableElement.FromOptionName(optionName, action, bgColorOverride, nameOverride, spriteOverride));
		return this;
	}

	/// <summary>
	/// Adds the right clickable element to this result, intended for things
	/// only to be used by admins
	/// </summary>
	public RightClickableResult AddAdminElement(string optionName, Action action,
		string nameOverride = null, Sprite spriteOverride = null)
	{
		AddElement(RightClickableElement.FromOptionName(optionName, action, new Color(1f, 0f, 0f, 0.7f), nameOverride, spriteOverride));
		return this;
	}

	/// <summary>
	/// Adds the right clickable element to this result
	/// </summary>
	/// <param name="toAdd"></param>
	/// <returns>this RightClickableResult, to support chaining</returns>
	public RightClickableResult AddElement(RightClickableElement toAdd)
	{
		elements.Add(toAdd);
		return this;
	}

	/// <summary>
	/// Adds the elements of other to this RightClickableResult
	/// </summary>
	/// <param name="other">other result to add. Can be null. If null, nothing will
	/// be added.</param>
	/// <returns>this RightClickableResult, to support chaining</returns>
	public RightClickableResult AddElements(RightClickableResult other)
	{
		if (other != null)
		{
			elements.AddRange(other.elements);
		}

		return this;
	}

	/// <summary>
	/// Convert the elements in this result to an ordered list of RightClickMenuItems, where order is
	/// defined by the specified rightClickOptionOrder
	/// </summary>
	/// <param name="rightClickOptionOrder"></param>
	/// <returns>ordered menu items</returns>
	public IEnumerable<RightClickMenuItem> AsOrderedMenus(RightClickOptionOrder rightClickOptionOrder)
	{
		elements.Sort(RightClickableElement.CompareBy(rightClickOptionOrder));
		return elements.Select(elem => elem.AsMenu());
	}
}